
BayesianEstimator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003238  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003414  08003414  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800341c  0800341c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000009c  080034c0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080034c0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007296  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017c4  00000000  00000000  0002735a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a0  00000000  00000000  00028b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  000291c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012d52  00000000  00000000  00029788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000722d  00000000  00000000  0003c4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000734b0  00000000  00000000  00043707  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6bb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001898  00000000  00000000  000b6c34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032e0 	.word	0x080032e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	080032e0 	.word	0x080032e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fc61 	bl	8000af0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fbe3 	bl	8000a04 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fc53 	bl	8000af0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc49 	bl	8000af0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fbf1 	bl	8000a54 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fbe7 	bl	8000a54 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	1c08      	adds	r0, r1, #0
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f830 	bl	8000328 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4647      	mov	r7, r8
 80002da:	0415      	lsls	r5, r2, #16
 80002dc:	0c2d      	lsrs	r5, r5, #16
 80002de:	002e      	movs	r6, r5
 80002e0:	b580      	push	{r7, lr}
 80002e2:	0407      	lsls	r7, r0, #16
 80002e4:	0c14      	lsrs	r4, r2, #16
 80002e6:	0c3f      	lsrs	r7, r7, #16
 80002e8:	4699      	mov	r9, r3
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	437e      	muls	r6, r7
 80002ee:	435d      	muls	r5, r3
 80002f0:	4367      	muls	r7, r4
 80002f2:	4363      	muls	r3, r4
 80002f4:	197f      	adds	r7, r7, r5
 80002f6:	0c34      	lsrs	r4, r6, #16
 80002f8:	19e4      	adds	r4, r4, r7
 80002fa:	469c      	mov	ip, r3
 80002fc:	42a5      	cmp	r5, r4
 80002fe:	d903      	bls.n	8000308 <__aeabi_lmul+0x34>
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	4698      	mov	r8, r3
 8000306:	44c4      	add	ip, r8
 8000308:	464b      	mov	r3, r9
 800030a:	4343      	muls	r3, r0
 800030c:	4351      	muls	r1, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	0436      	lsls	r6, r6, #16
 8000312:	4465      	add	r5, ip
 8000314:	0c36      	lsrs	r6, r6, #16
 8000316:	0424      	lsls	r4, r4, #16
 8000318:	19a4      	adds	r4, r4, r6
 800031a:	195b      	adds	r3, r3, r5
 800031c:	1859      	adds	r1, r3, r1
 800031e:	0020      	movs	r0, r4
 8000320:	bc0c      	pop	{r2, r3}
 8000322:	4690      	mov	r8, r2
 8000324:	4699      	mov	r9, r3
 8000326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000328 <__udivmoddi4>:
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032a:	464f      	mov	r7, r9
 800032c:	4646      	mov	r6, r8
 800032e:	46d6      	mov	lr, sl
 8000330:	b5c0      	push	{r6, r7, lr}
 8000332:	0004      	movs	r4, r0
 8000334:	b082      	sub	sp, #8
 8000336:	000d      	movs	r5, r1
 8000338:	4691      	mov	r9, r2
 800033a:	4698      	mov	r8, r3
 800033c:	428b      	cmp	r3, r1
 800033e:	d82f      	bhi.n	80003a0 <__udivmoddi4+0x78>
 8000340:	d02c      	beq.n	800039c <__udivmoddi4+0x74>
 8000342:	4641      	mov	r1, r8
 8000344:	4648      	mov	r0, r9
 8000346:	f001 f86d 	bl	8001424 <__clzdi2>
 800034a:	0029      	movs	r1, r5
 800034c:	0006      	movs	r6, r0
 800034e:	0020      	movs	r0, r4
 8000350:	f001 f868 	bl	8001424 <__clzdi2>
 8000354:	1a33      	subs	r3, r6, r0
 8000356:	469c      	mov	ip, r3
 8000358:	3b20      	subs	r3, #32
 800035a:	469a      	mov	sl, r3
 800035c:	d500      	bpl.n	8000360 <__udivmoddi4+0x38>
 800035e:	e076      	b.n	800044e <__udivmoddi4+0x126>
 8000360:	464b      	mov	r3, r9
 8000362:	4652      	mov	r2, sl
 8000364:	4093      	lsls	r3, r2
 8000366:	001f      	movs	r7, r3
 8000368:	464b      	mov	r3, r9
 800036a:	4662      	mov	r2, ip
 800036c:	4093      	lsls	r3, r2
 800036e:	001e      	movs	r6, r3
 8000370:	42af      	cmp	r7, r5
 8000372:	d828      	bhi.n	80003c6 <__udivmoddi4+0x9e>
 8000374:	d025      	beq.n	80003c2 <__udivmoddi4+0x9a>
 8000376:	4653      	mov	r3, sl
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	41bd      	sbcs	r5, r7
 800037c:	2b00      	cmp	r3, #0
 800037e:	da00      	bge.n	8000382 <__udivmoddi4+0x5a>
 8000380:	e07b      	b.n	800047a <__udivmoddi4+0x152>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	4652      	mov	r2, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	4662      	mov	r2, ip
 8000396:	4093      	lsls	r3, r2
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	e018      	b.n	80003ce <__udivmoddi4+0xa6>
 800039c:	4282      	cmp	r2, r0
 800039e:	d9d0      	bls.n	8000342 <__udivmoddi4+0x1a>
 80003a0:	2200      	movs	r2, #0
 80003a2:	2300      	movs	r3, #0
 80003a4:	9200      	str	r2, [sp, #0]
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <__udivmoddi4+0x8a>
 80003ae:	601c      	str	r4, [r3, #0]
 80003b0:	605d      	str	r5, [r3, #4]
 80003b2:	9800      	ldr	r0, [sp, #0]
 80003b4:	9901      	ldr	r1, [sp, #4]
 80003b6:	b002      	add	sp, #8
 80003b8:	bc1c      	pop	{r2, r3, r4}
 80003ba:	4690      	mov	r8, r2
 80003bc:	4699      	mov	r9, r3
 80003be:	46a2      	mov	sl, r4
 80003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d9d7      	bls.n	8000376 <__udivmoddi4+0x4e>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2300      	movs	r3, #0
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	4663      	mov	r3, ip
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0e9      	beq.n	80003a8 <__udivmoddi4+0x80>
 80003d4:	07fb      	lsls	r3, r7, #31
 80003d6:	4698      	mov	r8, r3
 80003d8:	4641      	mov	r1, r8
 80003da:	0872      	lsrs	r2, r6, #1
 80003dc:	430a      	orrs	r2, r1
 80003de:	087b      	lsrs	r3, r7, #1
 80003e0:	4666      	mov	r6, ip
 80003e2:	e00e      	b.n	8000402 <__udivmoddi4+0xda>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d101      	bne.n	80003ec <__udivmoddi4+0xc4>
 80003e8:	42a2      	cmp	r2, r4
 80003ea:	d80c      	bhi.n	8000406 <__udivmoddi4+0xde>
 80003ec:	1aa4      	subs	r4, r4, r2
 80003ee:	419d      	sbcs	r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	1924      	adds	r4, r4, r4
 80003f4:	416d      	adcs	r5, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	3e01      	subs	r6, #1
 80003fa:	1824      	adds	r4, r4, r0
 80003fc:	414d      	adcs	r5, r1
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d006      	beq.n	8000410 <__udivmoddi4+0xe8>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d9ee      	bls.n	80003e4 <__udivmoddi4+0xbc>
 8000406:	3e01      	subs	r6, #1
 8000408:	1924      	adds	r4, r4, r4
 800040a:	416d      	adcs	r5, r5
 800040c:	2e00      	cmp	r6, #0
 800040e:	d1f8      	bne.n	8000402 <__udivmoddi4+0xda>
 8000410:	9800      	ldr	r0, [sp, #0]
 8000412:	9901      	ldr	r1, [sp, #4]
 8000414:	4653      	mov	r3, sl
 8000416:	1900      	adds	r0, r0, r4
 8000418:	4169      	adcs	r1, r5
 800041a:	2b00      	cmp	r3, #0
 800041c:	db23      	blt.n	8000466 <__udivmoddi4+0x13e>
 800041e:	002b      	movs	r3, r5
 8000420:	4652      	mov	r2, sl
 8000422:	40d3      	lsrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4664      	mov	r4, ip
 8000428:	40e2      	lsrs	r2, r4
 800042a:	001c      	movs	r4, r3
 800042c:	4653      	mov	r3, sl
 800042e:	0015      	movs	r5, r2
 8000430:	2b00      	cmp	r3, #0
 8000432:	db2d      	blt.n	8000490 <__udivmoddi4+0x168>
 8000434:	0026      	movs	r6, r4
 8000436:	4657      	mov	r7, sl
 8000438:	40be      	lsls	r6, r7
 800043a:	0033      	movs	r3, r6
 800043c:	0026      	movs	r6, r4
 800043e:	4667      	mov	r7, ip
 8000440:	40be      	lsls	r6, r7
 8000442:	0032      	movs	r2, r6
 8000444:	1a80      	subs	r0, r0, r2
 8000446:	4199      	sbcs	r1, r3
 8000448:	9000      	str	r0, [sp, #0]
 800044a:	9101      	str	r1, [sp, #4]
 800044c:	e7ac      	b.n	80003a8 <__udivmoddi4+0x80>
 800044e:	4662      	mov	r2, ip
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	464a      	mov	r2, r9
 8000456:	40da      	lsrs	r2, r3
 8000458:	4661      	mov	r1, ip
 800045a:	0013      	movs	r3, r2
 800045c:	4642      	mov	r2, r8
 800045e:	408a      	lsls	r2, r1
 8000460:	0017      	movs	r7, r2
 8000462:	431f      	orrs	r7, r3
 8000464:	e780      	b.n	8000368 <__udivmoddi4+0x40>
 8000466:	4662      	mov	r2, ip
 8000468:	2320      	movs	r3, #32
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	4666      	mov	r6, ip
 8000470:	409a      	lsls	r2, r3
 8000472:	0023      	movs	r3, r4
 8000474:	40f3      	lsrs	r3, r6
 8000476:	4313      	orrs	r3, r2
 8000478:	e7d4      	b.n	8000424 <__udivmoddi4+0xfc>
 800047a:	4662      	mov	r2, ip
 800047c:	2320      	movs	r3, #32
 800047e:	2100      	movs	r1, #0
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	2200      	movs	r2, #0
 8000484:	9100      	str	r1, [sp, #0]
 8000486:	9201      	str	r2, [sp, #4]
 8000488:	2201      	movs	r2, #1
 800048a:	40da      	lsrs	r2, r3
 800048c:	9201      	str	r2, [sp, #4]
 800048e:	e780      	b.n	8000392 <__udivmoddi4+0x6a>
 8000490:	2320      	movs	r3, #32
 8000492:	4662      	mov	r2, ip
 8000494:	0026      	movs	r6, r4
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	40de      	lsrs	r6, r3
 800049a:	002f      	movs	r7, r5
 800049c:	46b0      	mov	r8, r6
 800049e:	4666      	mov	r6, ip
 80004a0:	40b7      	lsls	r7, r6
 80004a2:	4646      	mov	r6, r8
 80004a4:	003b      	movs	r3, r7
 80004a6:	4333      	orrs	r3, r6
 80004a8:	e7c8      	b.n	800043c <__udivmoddi4+0x114>
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_fadd>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	4647      	mov	r7, r8
 80004b0:	46ce      	mov	lr, r9
 80004b2:	0243      	lsls	r3, r0, #9
 80004b4:	0a5b      	lsrs	r3, r3, #9
 80004b6:	0044      	lsls	r4, r0, #1
 80004b8:	0fc2      	lsrs	r2, r0, #31
 80004ba:	469c      	mov	ip, r3
 80004bc:	0048      	lsls	r0, r1, #1
 80004be:	00dd      	lsls	r5, r3, #3
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	0e24      	lsrs	r4, r4, #24
 80004c4:	0a5b      	lsrs	r3, r3, #9
 80004c6:	0e00      	lsrs	r0, r0, #24
 80004c8:	b580      	push	{r7, lr}
 80004ca:	4698      	mov	r8, r3
 80004cc:	0026      	movs	r6, r4
 80004ce:	4691      	mov	r9, r2
 80004d0:	0fc9      	lsrs	r1, r1, #31
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	1a27      	subs	r7, r4, r0
 80004d6:	428a      	cmp	r2, r1
 80004d8:	d029      	beq.n	800052e <__aeabi_fadd+0x82>
 80004da:	2f00      	cmp	r7, #0
 80004dc:	dd15      	ble.n	800050a <__aeabi_fadd+0x5e>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d14a      	bne.n	8000578 <__aeabi_fadd+0xcc>
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fadd+0x3c>
 80004e6:	e095      	b.n	8000614 <__aeabi_fadd+0x168>
 80004e8:	08ed      	lsrs	r5, r5, #3
 80004ea:	2cff      	cmp	r4, #255	; 0xff
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x44>
 80004ee:	e088      	b.n	8000602 <__aeabi_fadd+0x156>
 80004f0:	026b      	lsls	r3, r5, #9
 80004f2:	0a5b      	lsrs	r3, r3, #9
 80004f4:	b2e6      	uxtb	r6, r4
 80004f6:	025b      	lsls	r3, r3, #9
 80004f8:	05f6      	lsls	r6, r6, #23
 80004fa:	0a58      	lsrs	r0, r3, #9
 80004fc:	4330      	orrs	r0, r6
 80004fe:	07d2      	lsls	r2, r2, #31
 8000500:	4310      	orrs	r0, r2
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4690      	mov	r8, r2
 8000506:	4699      	mov	r9, r3
 8000508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800050a:	2f00      	cmp	r7, #0
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0x64>
 800050e:	e087      	b.n	8000620 <__aeabi_fadd+0x174>
 8000510:	1c60      	adds	r0, r4, #1
 8000512:	b2c0      	uxtb	r0, r0
 8000514:	2801      	cmp	r0, #1
 8000516:	dc00      	bgt.n	800051a <__aeabi_fadd+0x6e>
 8000518:	e0b6      	b.n	8000688 <__aeabi_fadd+0x1dc>
 800051a:	1aee      	subs	r6, r5, r3
 800051c:	0172      	lsls	r2, r6, #5
 800051e:	d500      	bpl.n	8000522 <__aeabi_fadd+0x76>
 8000520:	e0c5      	b.n	80006ae <__aeabi_fadd+0x202>
 8000522:	2e00      	cmp	r6, #0
 8000524:	d13d      	bne.n	80005a2 <__aeabi_fadd+0xf6>
 8000526:	2200      	movs	r2, #0
 8000528:	2600      	movs	r6, #0
 800052a:	2300      	movs	r3, #0
 800052c:	e7e3      	b.n	80004f6 <__aeabi_fadd+0x4a>
 800052e:	2f00      	cmp	r7, #0
 8000530:	dc00      	bgt.n	8000534 <__aeabi_fadd+0x88>
 8000532:	e096      	b.n	8000662 <__aeabi_fadd+0x1b6>
 8000534:	2800      	cmp	r0, #0
 8000536:	d05d      	beq.n	80005f4 <__aeabi_fadd+0x148>
 8000538:	2cff      	cmp	r4, #255	; 0xff
 800053a:	d060      	beq.n	80005fe <__aeabi_fadd+0x152>
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	04d2      	lsls	r2, r2, #19
 8000540:	4313      	orrs	r3, r2
 8000542:	2f1b      	cmp	r7, #27
 8000544:	dd00      	ble.n	8000548 <__aeabi_fadd+0x9c>
 8000546:	e0ec      	b.n	8000722 <__aeabi_fadd+0x276>
 8000548:	2220      	movs	r2, #32
 800054a:	1bd2      	subs	r2, r2, r7
 800054c:	0018      	movs	r0, r3
 800054e:	4093      	lsls	r3, r2
 8000550:	40f8      	lsrs	r0, r7
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4193      	sbcs	r3, r2
 8000556:	4303      	orrs	r3, r0
 8000558:	18ed      	adds	r5, r5, r3
 800055a:	016b      	lsls	r3, r5, #5
 800055c:	d57b      	bpl.n	8000656 <__aeabi_fadd+0x1aa>
 800055e:	3401      	adds	r4, #1
 8000560:	2cff      	cmp	r4, #255	; 0xff
 8000562:	d100      	bne.n	8000566 <__aeabi_fadd+0xba>
 8000564:	e0b7      	b.n	80006d6 <__aeabi_fadd+0x22a>
 8000566:	2201      	movs	r2, #1
 8000568:	2607      	movs	r6, #7
 800056a:	402a      	ands	r2, r5
 800056c:	086b      	lsrs	r3, r5, #1
 800056e:	4d9a      	ldr	r5, [pc, #616]	; (80007d8 <__aeabi_fadd+0x32c>)
 8000570:	401d      	ands	r5, r3
 8000572:	4315      	orrs	r5, r2
 8000574:	402e      	ands	r6, r5
 8000576:	e029      	b.n	80005cc <__aeabi_fadd+0x120>
 8000578:	2cff      	cmp	r4, #255	; 0xff
 800057a:	d0b5      	beq.n	80004e8 <__aeabi_fadd+0x3c>
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	04d2      	lsls	r2, r2, #19
 8000580:	4313      	orrs	r3, r2
 8000582:	2f1b      	cmp	r7, #27
 8000584:	dd00      	ble.n	8000588 <__aeabi_fadd+0xdc>
 8000586:	e0b2      	b.n	80006ee <__aeabi_fadd+0x242>
 8000588:	2220      	movs	r2, #32
 800058a:	1bd2      	subs	r2, r2, r7
 800058c:	0019      	movs	r1, r3
 800058e:	4093      	lsls	r3, r2
 8000590:	40f9      	lsrs	r1, r7
 8000592:	1e5a      	subs	r2, r3, #1
 8000594:	4193      	sbcs	r3, r2
 8000596:	430b      	orrs	r3, r1
 8000598:	1aed      	subs	r5, r5, r3
 800059a:	016b      	lsls	r3, r5, #5
 800059c:	d55b      	bpl.n	8000656 <__aeabi_fadd+0x1aa>
 800059e:	01ad      	lsls	r5, r5, #6
 80005a0:	09ae      	lsrs	r6, r5, #6
 80005a2:	0030      	movs	r0, r6
 80005a4:	f000 ff20 	bl	80013e8 <__clzsi2>
 80005a8:	3805      	subs	r0, #5
 80005aa:	4086      	lsls	r6, r0
 80005ac:	4284      	cmp	r4, r0
 80005ae:	dc65      	bgt.n	800067c <__aeabi_fadd+0x1d0>
 80005b0:	1b04      	subs	r4, r0, r4
 80005b2:	0033      	movs	r3, r6
 80005b4:	2020      	movs	r0, #32
 80005b6:	3401      	adds	r4, #1
 80005b8:	40e3      	lsrs	r3, r4
 80005ba:	1b04      	subs	r4, r0, r4
 80005bc:	40a6      	lsls	r6, r4
 80005be:	1e75      	subs	r5, r6, #1
 80005c0:	41ae      	sbcs	r6, r5
 80005c2:	4333      	orrs	r3, r6
 80005c4:	2607      	movs	r6, #7
 80005c6:	001d      	movs	r5, r3
 80005c8:	2400      	movs	r4, #0
 80005ca:	401e      	ands	r6, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	464b      	mov	r3, r9
 80005d0:	401a      	ands	r2, r3
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d004      	beq.n	80005e0 <__aeabi_fadd+0x134>
 80005d6:	230f      	movs	r3, #15
 80005d8:	402b      	ands	r3, r5
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fadd+0x134>
 80005de:	3504      	adds	r5, #4
 80005e0:	016b      	lsls	r3, r5, #5
 80005e2:	d400      	bmi.n	80005e6 <__aeabi_fadd+0x13a>
 80005e4:	e780      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80005e6:	3401      	adds	r4, #1
 80005e8:	b2e6      	uxtb	r6, r4
 80005ea:	2cff      	cmp	r4, #255	; 0xff
 80005ec:	d12f      	bne.n	800064e <__aeabi_fadd+0x1a2>
 80005ee:	26ff      	movs	r6, #255	; 0xff
 80005f0:	2300      	movs	r3, #0
 80005f2:	e780      	b.n	80004f6 <__aeabi_fadd+0x4a>
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d152      	bne.n	800069e <__aeabi_fadd+0x1f2>
 80005f8:	2cff      	cmp	r4, #255	; 0xff
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x152>
 80005fc:	e774      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80005fe:	000a      	movs	r2, r1
 8000600:	08ed      	lsrs	r5, r5, #3
 8000602:	2d00      	cmp	r5, #0
 8000604:	d0f3      	beq.n	80005ee <__aeabi_fadd+0x142>
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	03db      	lsls	r3, r3, #15
 800060a:	432b      	orrs	r3, r5
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	26ff      	movs	r6, #255	; 0xff
 8000612:	e770      	b.n	80004f6 <__aeabi_fadd+0x4a>
 8000614:	3f01      	subs	r7, #1
 8000616:	2f00      	cmp	r7, #0
 8000618:	d0be      	beq.n	8000598 <__aeabi_fadd+0xec>
 800061a:	2cff      	cmp	r4, #255	; 0xff
 800061c:	d1b1      	bne.n	8000582 <__aeabi_fadd+0xd6>
 800061e:	e763      	b.n	80004e8 <__aeabi_fadd+0x3c>
 8000620:	2c00      	cmp	r4, #0
 8000622:	d047      	beq.n	80006b4 <__aeabi_fadd+0x208>
 8000624:	28ff      	cmp	r0, #255	; 0xff
 8000626:	d069      	beq.n	80006fc <__aeabi_fadd+0x250>
 8000628:	2480      	movs	r4, #128	; 0x80
 800062a:	04e4      	lsls	r4, r4, #19
 800062c:	427a      	negs	r2, r7
 800062e:	4325      	orrs	r5, r4
 8000630:	2a1b      	cmp	r2, #27
 8000632:	dd00      	ble.n	8000636 <__aeabi_fadd+0x18a>
 8000634:	e0c5      	b.n	80007c2 <__aeabi_fadd+0x316>
 8000636:	002c      	movs	r4, r5
 8000638:	2620      	movs	r6, #32
 800063a:	40d4      	lsrs	r4, r2
 800063c:	1ab2      	subs	r2, r6, r2
 800063e:	4095      	lsls	r5, r2
 8000640:	1e6a      	subs	r2, r5, #1
 8000642:	4195      	sbcs	r5, r2
 8000644:	4325      	orrs	r5, r4
 8000646:	1b5d      	subs	r5, r3, r5
 8000648:	0004      	movs	r4, r0
 800064a:	4689      	mov	r9, r1
 800064c:	e7a5      	b.n	800059a <__aeabi_fadd+0xee>
 800064e:	01ab      	lsls	r3, r5, #6
 8000650:	0a5b      	lsrs	r3, r3, #9
 8000652:	e750      	b.n	80004f6 <__aeabi_fadd+0x4a>
 8000654:	2400      	movs	r4, #0
 8000656:	2201      	movs	r2, #1
 8000658:	464b      	mov	r3, r9
 800065a:	401a      	ands	r2, r3
 800065c:	076b      	lsls	r3, r5, #29
 800065e:	d1ba      	bne.n	80005d6 <__aeabi_fadd+0x12a>
 8000660:	e742      	b.n	80004e8 <__aeabi_fadd+0x3c>
 8000662:	2f00      	cmp	r7, #0
 8000664:	d13b      	bne.n	80006de <__aeabi_fadd+0x232>
 8000666:	3401      	adds	r4, #1
 8000668:	b2e0      	uxtb	r0, r4
 800066a:	2801      	cmp	r0, #1
 800066c:	dd4a      	ble.n	8000704 <__aeabi_fadd+0x258>
 800066e:	2cff      	cmp	r4, #255	; 0xff
 8000670:	d0bd      	beq.n	80005ee <__aeabi_fadd+0x142>
 8000672:	2607      	movs	r6, #7
 8000674:	18ed      	adds	r5, r5, r3
 8000676:	086d      	lsrs	r5, r5, #1
 8000678:	402e      	ands	r6, r5
 800067a:	e7a7      	b.n	80005cc <__aeabi_fadd+0x120>
 800067c:	2307      	movs	r3, #7
 800067e:	4d57      	ldr	r5, [pc, #348]	; (80007dc <__aeabi_fadd+0x330>)
 8000680:	1a24      	subs	r4, r4, r0
 8000682:	4035      	ands	r5, r6
 8000684:	401e      	ands	r6, r3
 8000686:	e7a1      	b.n	80005cc <__aeabi_fadd+0x120>
 8000688:	2c00      	cmp	r4, #0
 800068a:	d11b      	bne.n	80006c4 <__aeabi_fadd+0x218>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d16e      	bne.n	800076e <__aeabi_fadd+0x2c2>
 8000690:	2b00      	cmp	r3, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x1ea>
 8000694:	e09a      	b.n	80007cc <__aeabi_fadd+0x320>
 8000696:	000a      	movs	r2, r1
 8000698:	001d      	movs	r5, r3
 800069a:	003c      	movs	r4, r7
 800069c:	e724      	b.n	80004e8 <__aeabi_fadd+0x3c>
 800069e:	3f01      	subs	r7, #1
 80006a0:	2f00      	cmp	r7, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x1fa>
 80006a4:	e758      	b.n	8000558 <__aeabi_fadd+0xac>
 80006a6:	2cff      	cmp	r4, #255	; 0xff
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x200>
 80006aa:	e74a      	b.n	8000542 <__aeabi_fadd+0x96>
 80006ac:	e7a7      	b.n	80005fe <__aeabi_fadd+0x152>
 80006ae:	1b5e      	subs	r6, r3, r5
 80006b0:	4689      	mov	r9, r1
 80006b2:	e776      	b.n	80005a2 <__aeabi_fadd+0xf6>
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d11c      	bne.n	80006f2 <__aeabi_fadd+0x246>
 80006b8:	000a      	movs	r2, r1
 80006ba:	28ff      	cmp	r0, #255	; 0xff
 80006bc:	d01f      	beq.n	80006fe <__aeabi_fadd+0x252>
 80006be:	0004      	movs	r4, r0
 80006c0:	001d      	movs	r5, r3
 80006c2:	e711      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d15d      	bne.n	8000784 <__aeabi_fadd+0x2d8>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d117      	bne.n	80006fc <__aeabi_fadd+0x250>
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	2200      	movs	r2, #0
 80006d0:	03db      	lsls	r3, r3, #15
 80006d2:	26ff      	movs	r6, #255	; 0xff
 80006d4:	e70f      	b.n	80004f6 <__aeabi_fadd+0x4a>
 80006d6:	000a      	movs	r2, r1
 80006d8:	26ff      	movs	r6, #255	; 0xff
 80006da:	2300      	movs	r3, #0
 80006dc:	e70b      	b.n	80004f6 <__aeabi_fadd+0x4a>
 80006de:	2c00      	cmp	r4, #0
 80006e0:	d121      	bne.n	8000726 <__aeabi_fadd+0x27a>
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d166      	bne.n	80007b4 <__aeabi_fadd+0x308>
 80006e6:	28ff      	cmp	r0, #255	; 0xff
 80006e8:	d1e9      	bne.n	80006be <__aeabi_fadd+0x212>
 80006ea:	001d      	movs	r5, r3
 80006ec:	e787      	b.n	80005fe <__aeabi_fadd+0x152>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e752      	b.n	8000598 <__aeabi_fadd+0xec>
 80006f2:	1c7a      	adds	r2, r7, #1
 80006f4:	d0a7      	beq.n	8000646 <__aeabi_fadd+0x19a>
 80006f6:	43fa      	mvns	r2, r7
 80006f8:	28ff      	cmp	r0, #255	; 0xff
 80006fa:	d199      	bne.n	8000630 <__aeabi_fadd+0x184>
 80006fc:	000a      	movs	r2, r1
 80006fe:	001d      	movs	r5, r3
 8000700:	24ff      	movs	r4, #255	; 0xff
 8000702:	e6f1      	b.n	80004e8 <__aeabi_fadd+0x3c>
 8000704:	2e00      	cmp	r6, #0
 8000706:	d121      	bne.n	800074c <__aeabi_fadd+0x2a0>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d04f      	beq.n	80007ac <__aeabi_fadd+0x300>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d04c      	beq.n	80007aa <__aeabi_fadd+0x2fe>
 8000710:	18ed      	adds	r5, r5, r3
 8000712:	016b      	lsls	r3, r5, #5
 8000714:	d59e      	bpl.n	8000654 <__aeabi_fadd+0x1a8>
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <__aeabi_fadd+0x330>)
 8000718:	3607      	adds	r6, #7
 800071a:	402e      	ands	r6, r5
 800071c:	2401      	movs	r4, #1
 800071e:	401d      	ands	r5, r3
 8000720:	e754      	b.n	80005cc <__aeabi_fadd+0x120>
 8000722:	2301      	movs	r3, #1
 8000724:	e718      	b.n	8000558 <__aeabi_fadd+0xac>
 8000726:	28ff      	cmp	r0, #255	; 0xff
 8000728:	d0df      	beq.n	80006ea <__aeabi_fadd+0x23e>
 800072a:	2480      	movs	r4, #128	; 0x80
 800072c:	04e4      	lsls	r4, r4, #19
 800072e:	427f      	negs	r7, r7
 8000730:	4325      	orrs	r5, r4
 8000732:	2f1b      	cmp	r7, #27
 8000734:	dc4d      	bgt.n	80007d2 <__aeabi_fadd+0x326>
 8000736:	2620      	movs	r6, #32
 8000738:	1bf6      	subs	r6, r6, r7
 800073a:	002c      	movs	r4, r5
 800073c:	40b5      	lsls	r5, r6
 800073e:	40fc      	lsrs	r4, r7
 8000740:	1e6a      	subs	r2, r5, #1
 8000742:	4195      	sbcs	r5, r2
 8000744:	4325      	orrs	r5, r4
 8000746:	18ed      	adds	r5, r5, r3
 8000748:	0004      	movs	r4, r0
 800074a:	e706      	b.n	800055a <__aeabi_fadd+0xae>
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0cc      	beq.n	80006ea <__aeabi_fadd+0x23e>
 8000750:	2b00      	cmp	r3, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x2aa>
 8000754:	e753      	b.n	80005fe <__aeabi_fadd+0x152>
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	4660      	mov	r0, ip
 800075a:	03c9      	lsls	r1, r1, #15
 800075c:	4208      	tst	r0, r1
 800075e:	d003      	beq.n	8000768 <__aeabi_fadd+0x2bc>
 8000760:	4640      	mov	r0, r8
 8000762:	4208      	tst	r0, r1
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x2bc>
 8000766:	001d      	movs	r5, r3
 8000768:	2101      	movs	r1, #1
 800076a:	4011      	ands	r1, r2
 800076c:	e747      	b.n	80005fe <__aeabi_fadd+0x152>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x2c8>
 8000772:	e6b9      	b.n	80004e8 <__aeabi_fadd+0x3c>
 8000774:	1aea      	subs	r2, r5, r3
 8000776:	0150      	lsls	r0, r2, #5
 8000778:	d525      	bpl.n	80007c6 <__aeabi_fadd+0x31a>
 800077a:	2607      	movs	r6, #7
 800077c:	1b5d      	subs	r5, r3, r5
 800077e:	402e      	ands	r6, r5
 8000780:	4689      	mov	r9, r1
 8000782:	e723      	b.n	80005cc <__aeabi_fadd+0x120>
 8000784:	24ff      	movs	r4, #255	; 0xff
 8000786:	2b00      	cmp	r3, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fadd+0x2e0>
 800078a:	e6ad      	b.n	80004e8 <__aeabi_fadd+0x3c>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	4660      	mov	r0, ip
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	4210      	tst	r0, r2
 8000794:	d004      	beq.n	80007a0 <__aeabi_fadd+0x2f4>
 8000796:	4640      	mov	r0, r8
 8000798:	4210      	tst	r0, r2
 800079a:	d101      	bne.n	80007a0 <__aeabi_fadd+0x2f4>
 800079c:	001d      	movs	r5, r3
 800079e:	4689      	mov	r9, r1
 80007a0:	2201      	movs	r2, #1
 80007a2:	464b      	mov	r3, r9
 80007a4:	24ff      	movs	r4, #255	; 0xff
 80007a6:	401a      	ands	r2, r3
 80007a8:	e69e      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80007aa:	002b      	movs	r3, r5
 80007ac:	08dd      	lsrs	r5, r3, #3
 80007ae:	000a      	movs	r2, r1
 80007b0:	2400      	movs	r4, #0
 80007b2:	e69d      	b.n	80004f0 <__aeabi_fadd+0x44>
 80007b4:	1c7a      	adds	r2, r7, #1
 80007b6:	d0c6      	beq.n	8000746 <__aeabi_fadd+0x29a>
 80007b8:	43ff      	mvns	r7, r7
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d1b9      	bne.n	8000732 <__aeabi_fadd+0x286>
 80007be:	001d      	movs	r5, r3
 80007c0:	e71d      	b.n	80005fe <__aeabi_fadd+0x152>
 80007c2:	2501      	movs	r5, #1
 80007c4:	e73f      	b.n	8000646 <__aeabi_fadd+0x19a>
 80007c6:	1e15      	subs	r5, r2, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_fadd+0x320>
 80007ca:	e744      	b.n	8000656 <__aeabi_fadd+0x1aa>
 80007cc:	2200      	movs	r2, #0
 80007ce:	2300      	movs	r3, #0
 80007d0:	e691      	b.n	80004f6 <__aeabi_fadd+0x4a>
 80007d2:	2501      	movs	r5, #1
 80007d4:	e7b7      	b.n	8000746 <__aeabi_fadd+0x29a>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	7dffffff 	.word	0x7dffffff
 80007dc:	fbffffff 	.word	0xfbffffff

080007e0 <__aeabi_fdiv>:
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e2:	4657      	mov	r7, sl
 80007e4:	464e      	mov	r6, r9
 80007e6:	4645      	mov	r5, r8
 80007e8:	46de      	mov	lr, fp
 80007ea:	0244      	lsls	r4, r0, #9
 80007ec:	b5e0      	push	{r5, r6, r7, lr}
 80007ee:	0046      	lsls	r6, r0, #1
 80007f0:	4688      	mov	r8, r1
 80007f2:	0a64      	lsrs	r4, r4, #9
 80007f4:	0e36      	lsrs	r6, r6, #24
 80007f6:	0fc7      	lsrs	r7, r0, #31
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d063      	beq.n	80008c4 <__aeabi_fdiv+0xe4>
 80007fc:	2eff      	cmp	r6, #255	; 0xff
 80007fe:	d024      	beq.n	800084a <__aeabi_fdiv+0x6a>
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	00e4      	lsls	r4, r4, #3
 8000804:	04db      	lsls	r3, r3, #19
 8000806:	431c      	orrs	r4, r3
 8000808:	2300      	movs	r3, #0
 800080a:	4699      	mov	r9, r3
 800080c:	469b      	mov	fp, r3
 800080e:	3e7f      	subs	r6, #127	; 0x7f
 8000810:	4643      	mov	r3, r8
 8000812:	4642      	mov	r2, r8
 8000814:	025d      	lsls	r5, r3, #9
 8000816:	0fd2      	lsrs	r2, r2, #31
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	0a6d      	lsrs	r5, r5, #9
 800081c:	0e1b      	lsrs	r3, r3, #24
 800081e:	4690      	mov	r8, r2
 8000820:	4692      	mov	sl, r2
 8000822:	d065      	beq.n	80008f0 <__aeabi_fdiv+0x110>
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	d055      	beq.n	80008d4 <__aeabi_fdiv+0xf4>
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	2100      	movs	r1, #0
 800082c:	00ed      	lsls	r5, r5, #3
 800082e:	04d2      	lsls	r2, r2, #19
 8000830:	3b7f      	subs	r3, #127	; 0x7f
 8000832:	4315      	orrs	r5, r2
 8000834:	1af6      	subs	r6, r6, r3
 8000836:	4643      	mov	r3, r8
 8000838:	464a      	mov	r2, r9
 800083a:	407b      	eors	r3, r7
 800083c:	2a0f      	cmp	r2, #15
 800083e:	d900      	bls.n	8000842 <__aeabi_fdiv+0x62>
 8000840:	e08d      	b.n	800095e <__aeabi_fdiv+0x17e>
 8000842:	486d      	ldr	r0, [pc, #436]	; (80009f8 <__aeabi_fdiv+0x218>)
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	5882      	ldr	r2, [r0, r2]
 8000848:	4697      	mov	pc, r2
 800084a:	2c00      	cmp	r4, #0
 800084c:	d154      	bne.n	80008f8 <__aeabi_fdiv+0x118>
 800084e:	2308      	movs	r3, #8
 8000850:	4699      	mov	r9, r3
 8000852:	3b06      	subs	r3, #6
 8000854:	26ff      	movs	r6, #255	; 0xff
 8000856:	469b      	mov	fp, r3
 8000858:	e7da      	b.n	8000810 <__aeabi_fdiv+0x30>
 800085a:	2500      	movs	r5, #0
 800085c:	4653      	mov	r3, sl
 800085e:	2902      	cmp	r1, #2
 8000860:	d01b      	beq.n	800089a <__aeabi_fdiv+0xba>
 8000862:	2903      	cmp	r1, #3
 8000864:	d100      	bne.n	8000868 <__aeabi_fdiv+0x88>
 8000866:	e0bf      	b.n	80009e8 <__aeabi_fdiv+0x208>
 8000868:	2901      	cmp	r1, #1
 800086a:	d028      	beq.n	80008be <__aeabi_fdiv+0xde>
 800086c:	0030      	movs	r0, r6
 800086e:	307f      	adds	r0, #127	; 0x7f
 8000870:	2800      	cmp	r0, #0
 8000872:	dd20      	ble.n	80008b6 <__aeabi_fdiv+0xd6>
 8000874:	076a      	lsls	r2, r5, #29
 8000876:	d004      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000878:	220f      	movs	r2, #15
 800087a:	402a      	ands	r2, r5
 800087c:	2a04      	cmp	r2, #4
 800087e:	d000      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000880:	3504      	adds	r5, #4
 8000882:	012a      	lsls	r2, r5, #4
 8000884:	d503      	bpl.n	800088e <__aeabi_fdiv+0xae>
 8000886:	0030      	movs	r0, r6
 8000888:	4a5c      	ldr	r2, [pc, #368]	; (80009fc <__aeabi_fdiv+0x21c>)
 800088a:	3080      	adds	r0, #128	; 0x80
 800088c:	4015      	ands	r5, r2
 800088e:	28fe      	cmp	r0, #254	; 0xfe
 8000890:	dc03      	bgt.n	800089a <__aeabi_fdiv+0xba>
 8000892:	01ac      	lsls	r4, r5, #6
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	b2c2      	uxtb	r2, r0
 8000898:	e001      	b.n	800089e <__aeabi_fdiv+0xbe>
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	2400      	movs	r4, #0
 800089e:	0264      	lsls	r4, r4, #9
 80008a0:	05d2      	lsls	r2, r2, #23
 80008a2:	0a60      	lsrs	r0, r4, #9
 80008a4:	07db      	lsls	r3, r3, #31
 80008a6:	4310      	orrs	r0, r2
 80008a8:	4318      	orrs	r0, r3
 80008aa:	bc3c      	pop	{r2, r3, r4, r5}
 80008ac:	4690      	mov	r8, r2
 80008ae:	4699      	mov	r9, r3
 80008b0:	46a2      	mov	sl, r4
 80008b2:	46ab      	mov	fp, r5
 80008b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b6:	2201      	movs	r2, #1
 80008b8:	1a10      	subs	r0, r2, r0
 80008ba:	281b      	cmp	r0, #27
 80008bc:	dd7c      	ble.n	80009b8 <__aeabi_fdiv+0x1d8>
 80008be:	2200      	movs	r2, #0
 80008c0:	2400      	movs	r4, #0
 80008c2:	e7ec      	b.n	800089e <__aeabi_fdiv+0xbe>
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d11d      	bne.n	8000904 <__aeabi_fdiv+0x124>
 80008c8:	2304      	movs	r3, #4
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b03      	subs	r3, #3
 80008ce:	2600      	movs	r6, #0
 80008d0:	469b      	mov	fp, r3
 80008d2:	e79d      	b.n	8000810 <__aeabi_fdiv+0x30>
 80008d4:	3eff      	subs	r6, #255	; 0xff
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d120      	bne.n	800091c <__aeabi_fdiv+0x13c>
 80008da:	2102      	movs	r1, #2
 80008dc:	4643      	mov	r3, r8
 80008de:	464a      	mov	r2, r9
 80008e0:	407b      	eors	r3, r7
 80008e2:	430a      	orrs	r2, r1
 80008e4:	2a0f      	cmp	r2, #15
 80008e6:	d8d8      	bhi.n	800089a <__aeabi_fdiv+0xba>
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <__aeabi_fdiv+0x220>)
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	5882      	ldr	r2, [r0, r2]
 80008ee:	4697      	mov	pc, r2
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d119      	bne.n	8000928 <__aeabi_fdiv+0x148>
 80008f4:	2101      	movs	r1, #1
 80008f6:	e7f1      	b.n	80008dc <__aeabi_fdiv+0xfc>
 80008f8:	230c      	movs	r3, #12
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b09      	subs	r3, #9
 80008fe:	26ff      	movs	r6, #255	; 0xff
 8000900:	469b      	mov	fp, r3
 8000902:	e785      	b.n	8000810 <__aeabi_fdiv+0x30>
 8000904:	0020      	movs	r0, r4
 8000906:	f000 fd6f 	bl	80013e8 <__clzsi2>
 800090a:	2676      	movs	r6, #118	; 0x76
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	409c      	lsls	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	4276      	negs	r6, r6
 8000914:	1a36      	subs	r6, r6, r0
 8000916:	4699      	mov	r9, r3
 8000918:	469b      	mov	fp, r3
 800091a:	e779      	b.n	8000810 <__aeabi_fdiv+0x30>
 800091c:	464a      	mov	r2, r9
 800091e:	2303      	movs	r3, #3
 8000920:	431a      	orrs	r2, r3
 8000922:	4691      	mov	r9, r2
 8000924:	2103      	movs	r1, #3
 8000926:	e786      	b.n	8000836 <__aeabi_fdiv+0x56>
 8000928:	0028      	movs	r0, r5
 800092a:	f000 fd5d 	bl	80013e8 <__clzsi2>
 800092e:	1f43      	subs	r3, r0, #5
 8000930:	1836      	adds	r6, r6, r0
 8000932:	409d      	lsls	r5, r3
 8000934:	3676      	adds	r6, #118	; 0x76
 8000936:	2100      	movs	r1, #0
 8000938:	e77d      	b.n	8000836 <__aeabi_fdiv+0x56>
 800093a:	2480      	movs	r4, #128	; 0x80
 800093c:	2300      	movs	r3, #0
 800093e:	03e4      	lsls	r4, r4, #15
 8000940:	22ff      	movs	r2, #255	; 0xff
 8000942:	e7ac      	b.n	800089e <__aeabi_fdiv+0xbe>
 8000944:	2500      	movs	r5, #0
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	03db      	lsls	r3, r3, #15
 800094a:	421c      	tst	r4, r3
 800094c:	d028      	beq.n	80009a0 <__aeabi_fdiv+0x1c0>
 800094e:	421d      	tst	r5, r3
 8000950:	d126      	bne.n	80009a0 <__aeabi_fdiv+0x1c0>
 8000952:	432b      	orrs	r3, r5
 8000954:	025c      	lsls	r4, r3, #9
 8000956:	0a64      	lsrs	r4, r4, #9
 8000958:	4643      	mov	r3, r8
 800095a:	22ff      	movs	r2, #255	; 0xff
 800095c:	e79f      	b.n	800089e <__aeabi_fdiv+0xbe>
 800095e:	0162      	lsls	r2, r4, #5
 8000960:	016c      	lsls	r4, r5, #5
 8000962:	42a2      	cmp	r2, r4
 8000964:	d224      	bcs.n	80009b0 <__aeabi_fdiv+0x1d0>
 8000966:	211b      	movs	r1, #27
 8000968:	2500      	movs	r5, #0
 800096a:	3e01      	subs	r6, #1
 800096c:	2701      	movs	r7, #1
 800096e:	0010      	movs	r0, r2
 8000970:	006d      	lsls	r5, r5, #1
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	2800      	cmp	r0, #0
 8000976:	db01      	blt.n	800097c <__aeabi_fdiv+0x19c>
 8000978:	4294      	cmp	r4, r2
 800097a:	d801      	bhi.n	8000980 <__aeabi_fdiv+0x1a0>
 800097c:	1b12      	subs	r2, r2, r4
 800097e:	433d      	orrs	r5, r7
 8000980:	3901      	subs	r1, #1
 8000982:	2900      	cmp	r1, #0
 8000984:	d1f3      	bne.n	800096e <__aeabi_fdiv+0x18e>
 8000986:	0014      	movs	r4, r2
 8000988:	1e62      	subs	r2, r4, #1
 800098a:	4194      	sbcs	r4, r2
 800098c:	4325      	orrs	r5, r4
 800098e:	e76d      	b.n	800086c <__aeabi_fdiv+0x8c>
 8000990:	46ba      	mov	sl, r7
 8000992:	4659      	mov	r1, fp
 8000994:	0025      	movs	r5, r4
 8000996:	4653      	mov	r3, sl
 8000998:	2902      	cmp	r1, #2
 800099a:	d000      	beq.n	800099e <__aeabi_fdiv+0x1be>
 800099c:	e761      	b.n	8000862 <__aeabi_fdiv+0x82>
 800099e:	e77c      	b.n	800089a <__aeabi_fdiv+0xba>
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	03db      	lsls	r3, r3, #15
 80009a4:	431c      	orrs	r4, r3
 80009a6:	0264      	lsls	r4, r4, #9
 80009a8:	0a64      	lsrs	r4, r4, #9
 80009aa:	003b      	movs	r3, r7
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	e776      	b.n	800089e <__aeabi_fdiv+0xbe>
 80009b0:	1b12      	subs	r2, r2, r4
 80009b2:	211a      	movs	r1, #26
 80009b4:	2501      	movs	r5, #1
 80009b6:	e7d9      	b.n	800096c <__aeabi_fdiv+0x18c>
 80009b8:	369e      	adds	r6, #158	; 0x9e
 80009ba:	002a      	movs	r2, r5
 80009bc:	40b5      	lsls	r5, r6
 80009be:	002c      	movs	r4, r5
 80009c0:	40c2      	lsrs	r2, r0
 80009c2:	1e65      	subs	r5, r4, #1
 80009c4:	41ac      	sbcs	r4, r5
 80009c6:	4314      	orrs	r4, r2
 80009c8:	0762      	lsls	r2, r4, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fdiv+0x1f6>
 80009cc:	220f      	movs	r2, #15
 80009ce:	4022      	ands	r2, r4
 80009d0:	2a04      	cmp	r2, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fdiv+0x1f6>
 80009d4:	3404      	adds	r4, #4
 80009d6:	0162      	lsls	r2, r4, #5
 80009d8:	d403      	bmi.n	80009e2 <__aeabi_fdiv+0x202>
 80009da:	01a4      	lsls	r4, r4, #6
 80009dc:	0a64      	lsrs	r4, r4, #9
 80009de:	2200      	movs	r2, #0
 80009e0:	e75d      	b.n	800089e <__aeabi_fdiv+0xbe>
 80009e2:	2201      	movs	r2, #1
 80009e4:	2400      	movs	r4, #0
 80009e6:	e75a      	b.n	800089e <__aeabi_fdiv+0xbe>
 80009e8:	2480      	movs	r4, #128	; 0x80
 80009ea:	03e4      	lsls	r4, r4, #15
 80009ec:	432c      	orrs	r4, r5
 80009ee:	0264      	lsls	r4, r4, #9
 80009f0:	0a64      	lsrs	r4, r4, #9
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	e753      	b.n	800089e <__aeabi_fdiv+0xbe>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	080032f8 	.word	0x080032f8
 80009fc:	f7ffffff 	.word	0xf7ffffff
 8000a00:	08003338 	.word	0x08003338

08000a04 <__eqsf2>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	0042      	lsls	r2, r0, #1
 8000a08:	024e      	lsls	r6, r1, #9
 8000a0a:	004c      	lsls	r4, r1, #1
 8000a0c:	0245      	lsls	r5, r0, #9
 8000a0e:	0a6d      	lsrs	r5, r5, #9
 8000a10:	0e12      	lsrs	r2, r2, #24
 8000a12:	0fc3      	lsrs	r3, r0, #31
 8000a14:	0a76      	lsrs	r6, r6, #9
 8000a16:	0e24      	lsrs	r4, r4, #24
 8000a18:	0fc9      	lsrs	r1, r1, #31
 8000a1a:	2aff      	cmp	r2, #255	; 0xff
 8000a1c:	d00f      	beq.n	8000a3e <__eqsf2+0x3a>
 8000a1e:	2cff      	cmp	r4, #255	; 0xff
 8000a20:	d011      	beq.n	8000a46 <__eqsf2+0x42>
 8000a22:	2001      	movs	r0, #1
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d000      	beq.n	8000a2a <__eqsf2+0x26>
 8000a28:	bd70      	pop	{r4, r5, r6, pc}
 8000a2a:	42b5      	cmp	r5, r6
 8000a2c:	d1fc      	bne.n	8000a28 <__eqsf2+0x24>
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d00d      	beq.n	8000a4e <__eqsf2+0x4a>
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	d1f8      	bne.n	8000a28 <__eqsf2+0x24>
 8000a36:	0028      	movs	r0, r5
 8000a38:	1e45      	subs	r5, r0, #1
 8000a3a:	41a8      	sbcs	r0, r5
 8000a3c:	e7f4      	b.n	8000a28 <__eqsf2+0x24>
 8000a3e:	2001      	movs	r0, #1
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d1f1      	bne.n	8000a28 <__eqsf2+0x24>
 8000a44:	e7eb      	b.n	8000a1e <__eqsf2+0x1a>
 8000a46:	2001      	movs	r0, #1
 8000a48:	2e00      	cmp	r6, #0
 8000a4a:	d1ed      	bne.n	8000a28 <__eqsf2+0x24>
 8000a4c:	e7e9      	b.n	8000a22 <__eqsf2+0x1e>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	e7ea      	b.n	8000a28 <__eqsf2+0x24>
 8000a52:	46c0      	nop			; (mov r8, r8)

08000a54 <__gesf2>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	004a      	lsls	r2, r1, #1
 8000a58:	024e      	lsls	r6, r1, #9
 8000a5a:	0245      	lsls	r5, r0, #9
 8000a5c:	0044      	lsls	r4, r0, #1
 8000a5e:	0a6d      	lsrs	r5, r5, #9
 8000a60:	0e24      	lsrs	r4, r4, #24
 8000a62:	0fc3      	lsrs	r3, r0, #31
 8000a64:	0a76      	lsrs	r6, r6, #9
 8000a66:	0e12      	lsrs	r2, r2, #24
 8000a68:	0fc9      	lsrs	r1, r1, #31
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d015      	beq.n	8000a9a <__gesf2+0x46>
 8000a6e:	2aff      	cmp	r2, #255	; 0xff
 8000a70:	d00e      	beq.n	8000a90 <__gesf2+0x3c>
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d115      	bne.n	8000aa2 <__gesf2+0x4e>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d101      	bne.n	8000a7e <__gesf2+0x2a>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d01c      	beq.n	8000ab8 <__gesf2+0x64>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d014      	beq.n	8000aac <__gesf2+0x58>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d027      	beq.n	8000ad6 <__gesf2+0x82>
 8000a86:	2002      	movs	r0, #2
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	4018      	ands	r0, r3
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d0ee      	beq.n	8000a72 <__gesf2+0x1e>
 8000a94:	2002      	movs	r0, #2
 8000a96:	4240      	negs	r0, r0
 8000a98:	e7f9      	b.n	8000a8e <__gesf2+0x3a>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d1fa      	bne.n	8000a94 <__gesf2+0x40>
 8000a9e:	2aff      	cmp	r2, #255	; 0xff
 8000aa0:	d00e      	beq.n	8000ac0 <__gesf2+0x6c>
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d10e      	bne.n	8000ac4 <__gesf2+0x70>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d0ed      	beq.n	8000a86 <__gesf2+0x32>
 8000aaa:	e00b      	b.n	8000ac4 <__gesf2+0x70>
 8000aac:	2301      	movs	r3, #1
 8000aae:	3901      	subs	r1, #1
 8000ab0:	4399      	bics	r1, r3
 8000ab2:	0008      	movs	r0, r1
 8000ab4:	3001      	adds	r0, #1
 8000ab6:	e7ea      	b.n	8000a8e <__gesf2+0x3a>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d0e7      	beq.n	8000a8e <__gesf2+0x3a>
 8000abe:	e7e2      	b.n	8000a86 <__gesf2+0x32>
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d1e7      	bne.n	8000a94 <__gesf2+0x40>
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d1de      	bne.n	8000a86 <__gesf2+0x32>
 8000ac8:	4294      	cmp	r4, r2
 8000aca:	dd05      	ble.n	8000ad8 <__gesf2+0x84>
 8000acc:	2102      	movs	r1, #2
 8000ace:	1e58      	subs	r0, r3, #1
 8000ad0:	4008      	ands	r0, r1
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7db      	b.n	8000a8e <__gesf2+0x3a>
 8000ad6:	2400      	movs	r4, #0
 8000ad8:	42a2      	cmp	r2, r4
 8000ada:	dc04      	bgt.n	8000ae6 <__gesf2+0x92>
 8000adc:	42b5      	cmp	r5, r6
 8000ade:	d8d2      	bhi.n	8000a86 <__gesf2+0x32>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	42b5      	cmp	r5, r6
 8000ae4:	d2d3      	bcs.n	8000a8e <__gesf2+0x3a>
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	2301      	movs	r3, #1
 8000aea:	4398      	bics	r0, r3
 8000aec:	3001      	adds	r0, #1
 8000aee:	e7ce      	b.n	8000a8e <__gesf2+0x3a>

08000af0 <__lesf2>:
 8000af0:	b530      	push	{r4, r5, lr}
 8000af2:	0042      	lsls	r2, r0, #1
 8000af4:	0244      	lsls	r4, r0, #9
 8000af6:	024d      	lsls	r5, r1, #9
 8000af8:	0fc3      	lsrs	r3, r0, #31
 8000afa:	0048      	lsls	r0, r1, #1
 8000afc:	0a64      	lsrs	r4, r4, #9
 8000afe:	0e12      	lsrs	r2, r2, #24
 8000b00:	0a6d      	lsrs	r5, r5, #9
 8000b02:	0e00      	lsrs	r0, r0, #24
 8000b04:	0fc9      	lsrs	r1, r1, #31
 8000b06:	2aff      	cmp	r2, #255	; 0xff
 8000b08:	d012      	beq.n	8000b30 <__lesf2+0x40>
 8000b0a:	28ff      	cmp	r0, #255	; 0xff
 8000b0c:	d00c      	beq.n	8000b28 <__lesf2+0x38>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d112      	bne.n	8000b38 <__lesf2+0x48>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d119      	bne.n	8000b4a <__lesf2+0x5a>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d117      	bne.n	8000b4a <__lesf2+0x5a>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d02b      	beq.n	8000b76 <__lesf2+0x86>
 8000b1e:	2002      	movs	r0, #2
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4018      	ands	r0, r3
 8000b24:	3801      	subs	r0, #1
 8000b26:	e026      	b.n	8000b76 <__lesf2+0x86>
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d0f0      	beq.n	8000b0e <__lesf2+0x1e>
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	e022      	b.n	8000b76 <__lesf2+0x86>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d1fb      	bne.n	8000b2c <__lesf2+0x3c>
 8000b34:	28ff      	cmp	r0, #255	; 0xff
 8000b36:	d01f      	beq.n	8000b78 <__lesf2+0x88>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d11f      	bne.n	8000b7c <__lesf2+0x8c>
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d11d      	bne.n	8000b7c <__lesf2+0x8c>
 8000b40:	2002      	movs	r0, #2
 8000b42:	3b01      	subs	r3, #1
 8000b44:	4018      	ands	r0, r3
 8000b46:	3801      	subs	r0, #1
 8000b48:	e015      	b.n	8000b76 <__lesf2+0x86>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d00e      	beq.n	8000b6c <__lesf2+0x7c>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d1e5      	bne.n	8000b1e <__lesf2+0x2e>
 8000b52:	2200      	movs	r2, #0
 8000b54:	4290      	cmp	r0, r2
 8000b56:	dc04      	bgt.n	8000b62 <__lesf2+0x72>
 8000b58:	42ac      	cmp	r4, r5
 8000b5a:	d8e0      	bhi.n	8000b1e <__lesf2+0x2e>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	42ac      	cmp	r4, r5
 8000b60:	d209      	bcs.n	8000b76 <__lesf2+0x86>
 8000b62:	1e58      	subs	r0, r3, #1
 8000b64:	2301      	movs	r3, #1
 8000b66:	4398      	bics	r0, r3
 8000b68:	3001      	adds	r0, #1
 8000b6a:	e004      	b.n	8000b76 <__lesf2+0x86>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	3901      	subs	r1, #1
 8000b70:	4399      	bics	r1, r3
 8000b72:	0008      	movs	r0, r1
 8000b74:	3001      	adds	r0, #1
 8000b76:	bd30      	pop	{r4, r5, pc}
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d1d7      	bne.n	8000b2c <__lesf2+0x3c>
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d1ce      	bne.n	8000b1e <__lesf2+0x2e>
 8000b80:	4282      	cmp	r2, r0
 8000b82:	dde7      	ble.n	8000b54 <__lesf2+0x64>
 8000b84:	2102      	movs	r1, #2
 8000b86:	1e58      	subs	r0, r3, #1
 8000b88:	4008      	ands	r0, r1
 8000b8a:	3801      	subs	r0, #1
 8000b8c:	e7f3      	b.n	8000b76 <__lesf2+0x86>
 8000b8e:	46c0      	nop			; (mov r8, r8)

08000b90 <__aeabi_fmul>:
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	464e      	mov	r6, r9
 8000b94:	4657      	mov	r7, sl
 8000b96:	4645      	mov	r5, r8
 8000b98:	46de      	mov	lr, fp
 8000b9a:	b5e0      	push	{r5, r6, r7, lr}
 8000b9c:	0243      	lsls	r3, r0, #9
 8000b9e:	0a5b      	lsrs	r3, r3, #9
 8000ba0:	0045      	lsls	r5, r0, #1
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	1c0f      	adds	r7, r1, #0
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	0e2d      	lsrs	r5, r5, #24
 8000baa:	0fc6      	lsrs	r6, r0, #31
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	d057      	beq.n	8000c60 <__aeabi_fmul+0xd0>
 8000bb0:	2dff      	cmp	r5, #255	; 0xff
 8000bb2:	d024      	beq.n	8000bfe <__aeabi_fmul+0x6e>
 8000bb4:	2080      	movs	r0, #128	; 0x80
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	04c0      	lsls	r0, r0, #19
 8000bba:	4318      	orrs	r0, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4681      	mov	r9, r0
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	469b      	mov	fp, r3
 8000bc4:	3d7f      	subs	r5, #127	; 0x7f
 8000bc6:	027c      	lsls	r4, r7, #9
 8000bc8:	007a      	lsls	r2, r7, #1
 8000bca:	0ffb      	lsrs	r3, r7, #31
 8000bcc:	0a64      	lsrs	r4, r4, #9
 8000bce:	0e12      	lsrs	r2, r2, #24
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	d023      	beq.n	8000c1c <__aeabi_fmul+0x8c>
 8000bd4:	2aff      	cmp	r2, #255	; 0xff
 8000bd6:	d04b      	beq.n	8000c70 <__aeabi_fmul+0xe0>
 8000bd8:	00e3      	lsls	r3, r4, #3
 8000bda:	2480      	movs	r4, #128	; 0x80
 8000bdc:	2000      	movs	r0, #0
 8000bde:	04e4      	lsls	r4, r4, #19
 8000be0:	3a7f      	subs	r2, #127	; 0x7f
 8000be2:	431c      	orrs	r4, r3
 8000be4:	18ad      	adds	r5, r5, r2
 8000be6:	1c6b      	adds	r3, r5, #1
 8000be8:	4647      	mov	r7, r8
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	4653      	mov	r3, sl
 8000bee:	4077      	eors	r7, r6
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	2b0f      	cmp	r3, #15
 8000bf4:	d848      	bhi.n	8000c88 <__aeabi_fmul+0xf8>
 8000bf6:	497d      	ldr	r1, [pc, #500]	; (8000dec <__aeabi_fmul+0x25c>)
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	58cb      	ldr	r3, [r1, r3]
 8000bfc:	469f      	mov	pc, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d000      	beq.n	8000c04 <__aeabi_fmul+0x74>
 8000c02:	e085      	b.n	8000d10 <__aeabi_fmul+0x180>
 8000c04:	3308      	adds	r3, #8
 8000c06:	469a      	mov	sl, r3
 8000c08:	3b06      	subs	r3, #6
 8000c0a:	469b      	mov	fp, r3
 8000c0c:	027c      	lsls	r4, r7, #9
 8000c0e:	007a      	lsls	r2, r7, #1
 8000c10:	0ffb      	lsrs	r3, r7, #31
 8000c12:	25ff      	movs	r5, #255	; 0xff
 8000c14:	0a64      	lsrs	r4, r4, #9
 8000c16:	0e12      	lsrs	r2, r2, #24
 8000c18:	4698      	mov	r8, r3
 8000c1a:	d1db      	bne.n	8000bd4 <__aeabi_fmul+0x44>
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fmul+0x92>
 8000c20:	e090      	b.n	8000d44 <__aeabi_fmul+0x1b4>
 8000c22:	4652      	mov	r2, sl
 8000c24:	2301      	movs	r3, #1
 8000c26:	431a      	orrs	r2, r3
 8000c28:	4692      	mov	sl, r2
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	e7db      	b.n	8000be6 <__aeabi_fmul+0x56>
 8000c2e:	464c      	mov	r4, r9
 8000c30:	4658      	mov	r0, fp
 8000c32:	0017      	movs	r7, r2
 8000c34:	2802      	cmp	r0, #2
 8000c36:	d024      	beq.n	8000c82 <__aeabi_fmul+0xf2>
 8000c38:	2803      	cmp	r0, #3
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fmul+0xae>
 8000c3c:	e0cf      	b.n	8000dde <__aeabi_fmul+0x24e>
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	2801      	cmp	r0, #1
 8000c44:	d14d      	bne.n	8000ce2 <__aeabi_fmul+0x152>
 8000c46:	0258      	lsls	r0, r3, #9
 8000c48:	05d2      	lsls	r2, r2, #23
 8000c4a:	0a40      	lsrs	r0, r0, #9
 8000c4c:	07ff      	lsls	r7, r7, #31
 8000c4e:	4310      	orrs	r0, r2
 8000c50:	4338      	orrs	r0, r7
 8000c52:	b003      	add	sp, #12
 8000c54:	bc3c      	pop	{r2, r3, r4, r5}
 8000c56:	4690      	mov	r8, r2
 8000c58:	4699      	mov	r9, r3
 8000c5a:	46a2      	mov	sl, r4
 8000c5c:	46ab      	mov	fp, r5
 8000c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d15b      	bne.n	8000d1c <__aeabi_fmul+0x18c>
 8000c64:	2304      	movs	r3, #4
 8000c66:	469a      	mov	sl, r3
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	469b      	mov	fp, r3
 8000c6e:	e7aa      	b.n	8000bc6 <__aeabi_fmul+0x36>
 8000c70:	35ff      	adds	r5, #255	; 0xff
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	d160      	bne.n	8000d38 <__aeabi_fmul+0x1a8>
 8000c76:	4652      	mov	r2, sl
 8000c78:	2302      	movs	r3, #2
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	4692      	mov	sl, r2
 8000c7e:	2002      	movs	r0, #2
 8000c80:	e7b1      	b.n	8000be6 <__aeabi_fmul+0x56>
 8000c82:	22ff      	movs	r2, #255	; 0xff
 8000c84:	2300      	movs	r3, #0
 8000c86:	e7de      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000c88:	464b      	mov	r3, r9
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	469c      	mov	ip, r3
 8000c8e:	464b      	mov	r3, r9
 8000c90:	0426      	lsls	r6, r4, #16
 8000c92:	0c36      	lsrs	r6, r6, #16
 8000c94:	0418      	lsls	r0, r3, #16
 8000c96:	4661      	mov	r1, ip
 8000c98:	0033      	movs	r3, r6
 8000c9a:	0c22      	lsrs	r2, r4, #16
 8000c9c:	4664      	mov	r4, ip
 8000c9e:	0c00      	lsrs	r0, r0, #16
 8000ca0:	4343      	muls	r3, r0
 8000ca2:	434e      	muls	r6, r1
 8000ca4:	4350      	muls	r0, r2
 8000ca6:	4354      	muls	r4, r2
 8000ca8:	1980      	adds	r0, r0, r6
 8000caa:	0c1a      	lsrs	r2, r3, #16
 8000cac:	1812      	adds	r2, r2, r0
 8000cae:	4296      	cmp	r6, r2
 8000cb0:	d903      	bls.n	8000cba <__aeabi_fmul+0x12a>
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	0249      	lsls	r1, r1, #9
 8000cb6:	468c      	mov	ip, r1
 8000cb8:	4464      	add	r4, ip
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	0410      	lsls	r0, r2, #16
 8000cc0:	18c0      	adds	r0, r0, r3
 8000cc2:	0183      	lsls	r3, r0, #6
 8000cc4:	1e5e      	subs	r6, r3, #1
 8000cc6:	41b3      	sbcs	r3, r6
 8000cc8:	0e80      	lsrs	r0, r0, #26
 8000cca:	4318      	orrs	r0, r3
 8000ccc:	0c13      	lsrs	r3, r2, #16
 8000cce:	191b      	adds	r3, r3, r4
 8000cd0:	019b      	lsls	r3, r3, #6
 8000cd2:	4303      	orrs	r3, r0
 8000cd4:	001c      	movs	r4, r3
 8000cd6:	0123      	lsls	r3, r4, #4
 8000cd8:	d579      	bpl.n	8000dce <__aeabi_fmul+0x23e>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	0862      	lsrs	r2, r4, #1
 8000cde:	401c      	ands	r4, r3
 8000ce0:	4314      	orrs	r4, r2
 8000ce2:	9a01      	ldr	r2, [sp, #4]
 8000ce4:	327f      	adds	r2, #127	; 0x7f
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	dd4d      	ble.n	8000d86 <__aeabi_fmul+0x1f6>
 8000cea:	0763      	lsls	r3, r4, #29
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_fmul+0x168>
 8000cee:	230f      	movs	r3, #15
 8000cf0:	4023      	ands	r3, r4
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fmul+0x168>
 8000cf6:	3404      	adds	r4, #4
 8000cf8:	0123      	lsls	r3, r4, #4
 8000cfa:	d503      	bpl.n	8000d04 <__aeabi_fmul+0x174>
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <__aeabi_fmul+0x260>)
 8000cfe:	9a01      	ldr	r2, [sp, #4]
 8000d00:	401c      	ands	r4, r3
 8000d02:	3280      	adds	r2, #128	; 0x80
 8000d04:	2afe      	cmp	r2, #254	; 0xfe
 8000d06:	dcbc      	bgt.n	8000c82 <__aeabi_fmul+0xf2>
 8000d08:	01a3      	lsls	r3, r4, #6
 8000d0a:	0a5b      	lsrs	r3, r3, #9
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	e79a      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000d10:	230c      	movs	r3, #12
 8000d12:	469a      	mov	sl, r3
 8000d14:	3b09      	subs	r3, #9
 8000d16:	25ff      	movs	r5, #255	; 0xff
 8000d18:	469b      	mov	fp, r3
 8000d1a:	e754      	b.n	8000bc6 <__aeabi_fmul+0x36>
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fb63 	bl	80013e8 <__clzsi2>
 8000d22:	464a      	mov	r2, r9
 8000d24:	1f43      	subs	r3, r0, #5
 8000d26:	2576      	movs	r5, #118	; 0x76
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	426d      	negs	r5, r5
 8000d2e:	4691      	mov	r9, r2
 8000d30:	1a2d      	subs	r5, r5, r0
 8000d32:	469a      	mov	sl, r3
 8000d34:	469b      	mov	fp, r3
 8000d36:	e746      	b.n	8000bc6 <__aeabi_fmul+0x36>
 8000d38:	4652      	mov	r2, sl
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	4692      	mov	sl, r2
 8000d40:	2003      	movs	r0, #3
 8000d42:	e750      	b.n	8000be6 <__aeabi_fmul+0x56>
 8000d44:	0020      	movs	r0, r4
 8000d46:	f000 fb4f 	bl	80013e8 <__clzsi2>
 8000d4a:	1f43      	subs	r3, r0, #5
 8000d4c:	1a2d      	subs	r5, r5, r0
 8000d4e:	409c      	lsls	r4, r3
 8000d50:	3d76      	subs	r5, #118	; 0x76
 8000d52:	2000      	movs	r0, #0
 8000d54:	e747      	b.n	8000be6 <__aeabi_fmul+0x56>
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	2700      	movs	r7, #0
 8000d5a:	03db      	lsls	r3, r3, #15
 8000d5c:	22ff      	movs	r2, #255	; 0xff
 8000d5e:	e772      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000d60:	4642      	mov	r2, r8
 8000d62:	e766      	b.n	8000c32 <__aeabi_fmul+0xa2>
 8000d64:	464c      	mov	r4, r9
 8000d66:	0032      	movs	r2, r6
 8000d68:	4658      	mov	r0, fp
 8000d6a:	e762      	b.n	8000c32 <__aeabi_fmul+0xa2>
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	464a      	mov	r2, r9
 8000d70:	03db      	lsls	r3, r3, #15
 8000d72:	421a      	tst	r2, r3
 8000d74:	d022      	beq.n	8000dbc <__aeabi_fmul+0x22c>
 8000d76:	421c      	tst	r4, r3
 8000d78:	d120      	bne.n	8000dbc <__aeabi_fmul+0x22c>
 8000d7a:	4323      	orrs	r3, r4
 8000d7c:	025b      	lsls	r3, r3, #9
 8000d7e:	0a5b      	lsrs	r3, r3, #9
 8000d80:	4647      	mov	r7, r8
 8000d82:	22ff      	movs	r2, #255	; 0xff
 8000d84:	e75f      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000d86:	2301      	movs	r3, #1
 8000d88:	1a9a      	subs	r2, r3, r2
 8000d8a:	2a1b      	cmp	r2, #27
 8000d8c:	dc21      	bgt.n	8000dd2 <__aeabi_fmul+0x242>
 8000d8e:	0023      	movs	r3, r4
 8000d90:	9901      	ldr	r1, [sp, #4]
 8000d92:	40d3      	lsrs	r3, r2
 8000d94:	319e      	adds	r1, #158	; 0x9e
 8000d96:	408c      	lsls	r4, r1
 8000d98:	001a      	movs	r2, r3
 8000d9a:	0023      	movs	r3, r4
 8000d9c:	1e5c      	subs	r4, r3, #1
 8000d9e:	41a3      	sbcs	r3, r4
 8000da0:	4313      	orrs	r3, r2
 8000da2:	075a      	lsls	r2, r3, #29
 8000da4:	d004      	beq.n	8000db0 <__aeabi_fmul+0x220>
 8000da6:	220f      	movs	r2, #15
 8000da8:	401a      	ands	r2, r3
 8000daa:	2a04      	cmp	r2, #4
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fmul+0x220>
 8000dae:	3304      	adds	r3, #4
 8000db0:	015a      	lsls	r2, r3, #5
 8000db2:	d411      	bmi.n	8000dd8 <__aeabi_fmul+0x248>
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	0a5b      	lsrs	r3, r3, #9
 8000db8:	2200      	movs	r2, #0
 8000dba:	e744      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	03db      	lsls	r3, r3, #15
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	0a5b      	lsrs	r3, r3, #9
 8000dc8:	0037      	movs	r7, r6
 8000dca:	22ff      	movs	r2, #255	; 0xff
 8000dcc:	e73b      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000dce:	9501      	str	r5, [sp, #4]
 8000dd0:	e787      	b.n	8000ce2 <__aeabi_fmul+0x152>
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e736      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e733      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	03db      	lsls	r3, r3, #15
 8000de2:	4323      	orrs	r3, r4
 8000de4:	025b      	lsls	r3, r3, #9
 8000de6:	0a5b      	lsrs	r3, r3, #9
 8000de8:	22ff      	movs	r2, #255	; 0xff
 8000dea:	e72c      	b.n	8000c46 <__aeabi_fmul+0xb6>
 8000dec:	08003378 	.word	0x08003378
 8000df0:	f7ffffff 	.word	0xf7ffffff

08000df4 <__aeabi_fsub>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	4647      	mov	r7, r8
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	0044      	lsls	r4, r0, #1
 8000dfc:	0fc2      	lsrs	r2, r0, #31
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	0247      	lsls	r7, r0, #9
 8000e02:	0248      	lsls	r0, r1, #9
 8000e04:	0a40      	lsrs	r0, r0, #9
 8000e06:	4684      	mov	ip, r0
 8000e08:	4666      	mov	r6, ip
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a7f      	lsrs	r7, r7, #9
 8000e0e:	0e24      	lsrs	r4, r4, #24
 8000e10:	00f6      	lsls	r6, r6, #3
 8000e12:	0025      	movs	r5, r4
 8000e14:	4690      	mov	r8, r2
 8000e16:	00fb      	lsls	r3, r7, #3
 8000e18:	0e00      	lsrs	r0, r0, #24
 8000e1a:	0fc9      	lsrs	r1, r1, #31
 8000e1c:	46b1      	mov	r9, r6
 8000e1e:	28ff      	cmp	r0, #255	; 0xff
 8000e20:	d100      	bne.n	8000e24 <__aeabi_fsub+0x30>
 8000e22:	e085      	b.n	8000f30 <__aeabi_fsub+0x13c>
 8000e24:	2601      	movs	r6, #1
 8000e26:	4071      	eors	r1, r6
 8000e28:	1a26      	subs	r6, r4, r0
 8000e2a:	4291      	cmp	r1, r2
 8000e2c:	d057      	beq.n	8000ede <__aeabi_fsub+0xea>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	dd43      	ble.n	8000eba <__aeabi_fsub+0xc6>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fsub+0x44>
 8000e36:	e07f      	b.n	8000f38 <__aeabi_fsub+0x144>
 8000e38:	4649      	mov	r1, r9
 8000e3a:	2900      	cmp	r1, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x4c>
 8000e3e:	e0aa      	b.n	8000f96 <__aeabi_fsub+0x1a2>
 8000e40:	3e01      	subs	r6, #1
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	d000      	beq.n	8000e48 <__aeabi_fsub+0x54>
 8000e46:	e0f7      	b.n	8001038 <__aeabi_fsub+0x244>
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	015a      	lsls	r2, r3, #5
 8000e4c:	d400      	bmi.n	8000e50 <__aeabi_fsub+0x5c>
 8000e4e:	e08b      	b.n	8000f68 <__aeabi_fsub+0x174>
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	099c      	lsrs	r4, r3, #6
 8000e54:	0020      	movs	r0, r4
 8000e56:	f000 fac7 	bl	80013e8 <__clzsi2>
 8000e5a:	3805      	subs	r0, #5
 8000e5c:	4084      	lsls	r4, r0
 8000e5e:	4285      	cmp	r5, r0
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_fsub+0x70>
 8000e62:	e0d3      	b.n	800100c <__aeabi_fsub+0x218>
 8000e64:	1b45      	subs	r5, r0, r5
 8000e66:	0023      	movs	r3, r4
 8000e68:	2020      	movs	r0, #32
 8000e6a:	3501      	adds	r5, #1
 8000e6c:	40eb      	lsrs	r3, r5
 8000e6e:	1b45      	subs	r5, r0, r5
 8000e70:	40ac      	lsls	r4, r5
 8000e72:	1e62      	subs	r2, r4, #1
 8000e74:	4194      	sbcs	r4, r2
 8000e76:	4323      	orrs	r3, r4
 8000e78:	2407      	movs	r4, #7
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	401c      	ands	r4, r3
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4641      	mov	r1, r8
 8000e82:	400a      	ands	r2, r1
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fsub+0x9e>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fsub+0x9e>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d400      	bmi.n	8000e98 <__aeabi_fsub+0xa4>
 8000e96:	e080      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8000e98:	3501      	adds	r5, #1
 8000e9a:	b2ec      	uxtb	r4, r5
 8000e9c:	2dff      	cmp	r5, #255	; 0xff
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_fsub+0xae>
 8000ea0:	e0a3      	b.n	8000fea <__aeabi_fsub+0x1f6>
 8000ea2:	24ff      	movs	r4, #255	; 0xff
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	025b      	lsls	r3, r3, #9
 8000ea8:	05e4      	lsls	r4, r4, #23
 8000eaa:	0a58      	lsrs	r0, r3, #9
 8000eac:	07d2      	lsls	r2, r2, #31
 8000eae:	4320      	orrs	r0, r4
 8000eb0:	4310      	orrs	r0, r2
 8000eb2:	bc0c      	pop	{r2, r3}
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d174      	bne.n	8000fa8 <__aeabi_fsub+0x1b4>
 8000ebe:	1c60      	adds	r0, r4, #1
 8000ec0:	b2c0      	uxtb	r0, r0
 8000ec2:	2801      	cmp	r0, #1
 8000ec4:	dc00      	bgt.n	8000ec8 <__aeabi_fsub+0xd4>
 8000ec6:	e0a7      	b.n	8001018 <__aeabi_fsub+0x224>
 8000ec8:	464a      	mov	r2, r9
 8000eca:	1a9c      	subs	r4, r3, r2
 8000ecc:	0162      	lsls	r2, r4, #5
 8000ece:	d500      	bpl.n	8000ed2 <__aeabi_fsub+0xde>
 8000ed0:	e0b6      	b.n	8001040 <__aeabi_fsub+0x24c>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d1be      	bne.n	8000e54 <__aeabi_fsub+0x60>
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2400      	movs	r4, #0
 8000eda:	2300      	movs	r3, #0
 8000edc:	e7e3      	b.n	8000ea6 <__aeabi_fsub+0xb2>
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	dc00      	bgt.n	8000ee4 <__aeabi_fsub+0xf0>
 8000ee2:	e085      	b.n	8000ff0 <__aeabi_fsub+0x1fc>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d046      	beq.n	8000f76 <__aeabi_fsub+0x182>
 8000ee8:	2cff      	cmp	r4, #255	; 0xff
 8000eea:	d049      	beq.n	8000f80 <__aeabi_fsub+0x18c>
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	4648      	mov	r0, r9
 8000ef0:	04d2      	lsls	r2, r2, #19
 8000ef2:	4310      	orrs	r0, r2
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2e1b      	cmp	r6, #27
 8000efa:	dc09      	bgt.n	8000f10 <__aeabi_fsub+0x11c>
 8000efc:	2020      	movs	r0, #32
 8000efe:	464c      	mov	r4, r9
 8000f00:	1b80      	subs	r0, r0, r6
 8000f02:	4084      	lsls	r4, r0
 8000f04:	464a      	mov	r2, r9
 8000f06:	0020      	movs	r0, r4
 8000f08:	40f2      	lsrs	r2, r6
 8000f0a:	1e44      	subs	r4, r0, #1
 8000f0c:	41a0      	sbcs	r0, r4
 8000f0e:	4302      	orrs	r2, r0
 8000f10:	189b      	adds	r3, r3, r2
 8000f12:	015a      	lsls	r2, r3, #5
 8000f14:	d528      	bpl.n	8000f68 <__aeabi_fsub+0x174>
 8000f16:	3501      	adds	r5, #1
 8000f18:	2dff      	cmp	r5, #255	; 0xff
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_fsub+0x12a>
 8000f1c:	e0a8      	b.n	8001070 <__aeabi_fsub+0x27c>
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2407      	movs	r4, #7
 8000f22:	4994      	ldr	r1, [pc, #592]	; (8001174 <__aeabi_fsub+0x380>)
 8000f24:	401a      	ands	r2, r3
 8000f26:	085b      	lsrs	r3, r3, #1
 8000f28:	400b      	ands	r3, r1
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	401c      	ands	r4, r3
 8000f2e:	e7a6      	b.n	8000e7e <__aeabi_fsub+0x8a>
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fsub+0x142>
 8000f34:	e778      	b.n	8000e28 <__aeabi_fsub+0x34>
 8000f36:	e775      	b.n	8000e24 <__aeabi_fsub+0x30>
 8000f38:	2cff      	cmp	r4, #255	; 0xff
 8000f3a:	d054      	beq.n	8000fe6 <__aeabi_fsub+0x1f2>
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	4649      	mov	r1, r9
 8000f40:	04d2      	lsls	r2, r2, #19
 8000f42:	4311      	orrs	r1, r2
 8000f44:	4689      	mov	r9, r1
 8000f46:	2201      	movs	r2, #1
 8000f48:	2e1b      	cmp	r6, #27
 8000f4a:	dc09      	bgt.n	8000f60 <__aeabi_fsub+0x16c>
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	4648      	mov	r0, r9
 8000f50:	1b89      	subs	r1, r1, r6
 8000f52:	4088      	lsls	r0, r1
 8000f54:	464a      	mov	r2, r9
 8000f56:	0001      	movs	r1, r0
 8000f58:	40f2      	lsrs	r2, r6
 8000f5a:	1e48      	subs	r0, r1, #1
 8000f5c:	4181      	sbcs	r1, r0
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	1a9b      	subs	r3, r3, r2
 8000f62:	015a      	lsls	r2, r3, #5
 8000f64:	d500      	bpl.n	8000f68 <__aeabi_fsub+0x174>
 8000f66:	e773      	b.n	8000e50 <__aeabi_fsub+0x5c>
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4641      	mov	r1, r8
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	0759      	lsls	r1, r3, #29
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0x180>
 8000f72:	e789      	b.n	8000e88 <__aeabi_fsub+0x94>
 8000f74:	e011      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8000f76:	4648      	mov	r0, r9
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d158      	bne.n	800102e <__aeabi_fsub+0x23a>
 8000f7c:	2cff      	cmp	r4, #255	; 0xff
 8000f7e:	d10c      	bne.n	8000f9a <__aeabi_fsub+0x1a6>
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x194>
 8000f86:	e78c      	b.n	8000ea2 <__aeabi_fsub+0xae>
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	03c0      	lsls	r0, r0, #15
 8000f8c:	4303      	orrs	r3, r0
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	0a5b      	lsrs	r3, r3, #9
 8000f92:	24ff      	movs	r4, #255	; 0xff
 8000f94:	e787      	b.n	8000ea6 <__aeabi_fsub+0xb2>
 8000f96:	2cff      	cmp	r4, #255	; 0xff
 8000f98:	d025      	beq.n	8000fe6 <__aeabi_fsub+0x1f2>
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	2dff      	cmp	r5, #255	; 0xff
 8000f9e:	d0f0      	beq.n	8000f82 <__aeabi_fsub+0x18e>
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	0a5b      	lsrs	r3, r3, #9
 8000fa4:	b2ec      	uxtb	r4, r5
 8000fa6:	e77e      	b.n	8000ea6 <__aeabi_fsub+0xb2>
 8000fa8:	2c00      	cmp	r4, #0
 8000faa:	d04d      	beq.n	8001048 <__aeabi_fsub+0x254>
 8000fac:	28ff      	cmp	r0, #255	; 0xff
 8000fae:	d018      	beq.n	8000fe2 <__aeabi_fsub+0x1ee>
 8000fb0:	2480      	movs	r4, #128	; 0x80
 8000fb2:	04e4      	lsls	r4, r4, #19
 8000fb4:	4272      	negs	r2, r6
 8000fb6:	4323      	orrs	r3, r4
 8000fb8:	2a1b      	cmp	r2, #27
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_fsub+0x1ca>
 8000fbc:	e0c4      	b.n	8001148 <__aeabi_fsub+0x354>
 8000fbe:	001c      	movs	r4, r3
 8000fc0:	2520      	movs	r5, #32
 8000fc2:	40d4      	lsrs	r4, r2
 8000fc4:	1aaa      	subs	r2, r5, r2
 8000fc6:	4093      	lsls	r3, r2
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	4193      	sbcs	r3, r2
 8000fcc:	4323      	orrs	r3, r4
 8000fce:	464a      	mov	r2, r9
 8000fd0:	0005      	movs	r5, r0
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4688      	mov	r8, r1
 8000fd6:	e738      	b.n	8000e4a <__aeabi_fsub+0x56>
 8000fd8:	1c72      	adds	r2, r6, #1
 8000fda:	d0f8      	beq.n	8000fce <__aeabi_fsub+0x1da>
 8000fdc:	43f2      	mvns	r2, r6
 8000fde:	28ff      	cmp	r0, #255	; 0xff
 8000fe0:	d1ea      	bne.n	8000fb8 <__aeabi_fsub+0x1c4>
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	25ff      	movs	r5, #255	; 0xff
 8000fe8:	e7d7      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8000fea:	019b      	lsls	r3, r3, #6
 8000fec:	0a5b      	lsrs	r3, r3, #9
 8000fee:	e75a      	b.n	8000ea6 <__aeabi_fsub+0xb2>
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d141      	bne.n	8001078 <__aeabi_fsub+0x284>
 8000ff4:	1c65      	adds	r5, r4, #1
 8000ff6:	b2e9      	uxtb	r1, r5
 8000ff8:	2901      	cmp	r1, #1
 8000ffa:	dd45      	ble.n	8001088 <__aeabi_fsub+0x294>
 8000ffc:	2dff      	cmp	r5, #255	; 0xff
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x20e>
 8001000:	e74f      	b.n	8000ea2 <__aeabi_fsub+0xae>
 8001002:	2407      	movs	r4, #7
 8001004:	444b      	add	r3, r9
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	401c      	ands	r4, r3
 800100a:	e738      	b.n	8000e7e <__aeabi_fsub+0x8a>
 800100c:	2207      	movs	r2, #7
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <__aeabi_fsub+0x384>)
 8001010:	1a2d      	subs	r5, r5, r0
 8001012:	4023      	ands	r3, r4
 8001014:	4014      	ands	r4, r2
 8001016:	e732      	b.n	8000e7e <__aeabi_fsub+0x8a>
 8001018:	2c00      	cmp	r4, #0
 800101a:	d11d      	bne.n	8001058 <__aeabi_fsub+0x264>
 800101c:	2b00      	cmp	r3, #0
 800101e:	d17a      	bne.n	8001116 <__aeabi_fsub+0x322>
 8001020:	464b      	mov	r3, r9
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x234>
 8001026:	e091      	b.n	800114c <__aeabi_fsub+0x358>
 8001028:	000a      	movs	r2, r1
 800102a:	2500      	movs	r5, #0
 800102c:	e7b5      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 800102e:	3e01      	subs	r6, #1
 8001030:	2e00      	cmp	r6, #0
 8001032:	d119      	bne.n	8001068 <__aeabi_fsub+0x274>
 8001034:	444b      	add	r3, r9
 8001036:	e76c      	b.n	8000f12 <__aeabi_fsub+0x11e>
 8001038:	2cff      	cmp	r4, #255	; 0xff
 800103a:	d184      	bne.n	8000f46 <__aeabi_fsub+0x152>
 800103c:	25ff      	movs	r5, #255	; 0xff
 800103e:	e7ac      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8001040:	464a      	mov	r2, r9
 8001042:	4688      	mov	r8, r1
 8001044:	1ad4      	subs	r4, r2, r3
 8001046:	e705      	b.n	8000e54 <__aeabi_fsub+0x60>
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1c5      	bne.n	8000fd8 <__aeabi_fsub+0x1e4>
 800104c:	000a      	movs	r2, r1
 800104e:	28ff      	cmp	r0, #255	; 0xff
 8001050:	d0c8      	beq.n	8000fe4 <__aeabi_fsub+0x1f0>
 8001052:	0005      	movs	r5, r0
 8001054:	464b      	mov	r3, r9
 8001056:	e7a0      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d149      	bne.n	80010f0 <__aeabi_fsub+0x2fc>
 800105c:	464b      	mov	r3, r9
 800105e:	2b00      	cmp	r3, #0
 8001060:	d077      	beq.n	8001152 <__aeabi_fsub+0x35e>
 8001062:	000a      	movs	r2, r1
 8001064:	25ff      	movs	r5, #255	; 0xff
 8001066:	e798      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8001068:	2cff      	cmp	r4, #255	; 0xff
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x27a>
 800106c:	e743      	b.n	8000ef6 <__aeabi_fsub+0x102>
 800106e:	e787      	b.n	8000f80 <__aeabi_fsub+0x18c>
 8001070:	000a      	movs	r2, r1
 8001072:	24ff      	movs	r4, #255	; 0xff
 8001074:	2300      	movs	r3, #0
 8001076:	e716      	b.n	8000ea6 <__aeabi_fsub+0xb2>
 8001078:	2c00      	cmp	r4, #0
 800107a:	d115      	bne.n	80010a8 <__aeabi_fsub+0x2b4>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d157      	bne.n	8001130 <__aeabi_fsub+0x33c>
 8001080:	28ff      	cmp	r0, #255	; 0xff
 8001082:	d1e6      	bne.n	8001052 <__aeabi_fsub+0x25e>
 8001084:	464b      	mov	r3, r9
 8001086:	e77b      	b.n	8000f80 <__aeabi_fsub+0x18c>
 8001088:	2c00      	cmp	r4, #0
 800108a:	d120      	bne.n	80010ce <__aeabi_fsub+0x2da>
 800108c:	2b00      	cmp	r3, #0
 800108e:	d057      	beq.n	8001140 <__aeabi_fsub+0x34c>
 8001090:	4649      	mov	r1, r9
 8001092:	2900      	cmp	r1, #0
 8001094:	d053      	beq.n	800113e <__aeabi_fsub+0x34a>
 8001096:	444b      	add	r3, r9
 8001098:	015a      	lsls	r2, r3, #5
 800109a:	d568      	bpl.n	800116e <__aeabi_fsub+0x37a>
 800109c:	2407      	movs	r4, #7
 800109e:	4a36      	ldr	r2, [pc, #216]	; (8001178 <__aeabi_fsub+0x384>)
 80010a0:	401c      	ands	r4, r3
 80010a2:	2501      	movs	r5, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	e6ea      	b.n	8000e7e <__aeabi_fsub+0x8a>
 80010a8:	28ff      	cmp	r0, #255	; 0xff
 80010aa:	d0eb      	beq.n	8001084 <__aeabi_fsub+0x290>
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	04d2      	lsls	r2, r2, #19
 80010b0:	4276      	negs	r6, r6
 80010b2:	4313      	orrs	r3, r2
 80010b4:	2e1b      	cmp	r6, #27
 80010b6:	dc53      	bgt.n	8001160 <__aeabi_fsub+0x36c>
 80010b8:	2520      	movs	r5, #32
 80010ba:	1bad      	subs	r5, r5, r6
 80010bc:	001a      	movs	r2, r3
 80010be:	40ab      	lsls	r3, r5
 80010c0:	40f2      	lsrs	r2, r6
 80010c2:	1e5c      	subs	r4, r3, #1
 80010c4:	41a3      	sbcs	r3, r4
 80010c6:	4313      	orrs	r3, r2
 80010c8:	444b      	add	r3, r9
 80010ca:	0005      	movs	r5, r0
 80010cc:	e721      	b.n	8000f12 <__aeabi_fsub+0x11e>
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0d8      	beq.n	8001084 <__aeabi_fsub+0x290>
 80010d2:	4649      	mov	r1, r9
 80010d4:	2900      	cmp	r1, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x2e6>
 80010d8:	e752      	b.n	8000f80 <__aeabi_fsub+0x18c>
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	03c9      	lsls	r1, r1, #15
 80010de:	420f      	tst	r7, r1
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x2f0>
 80010e2:	e74d      	b.n	8000f80 <__aeabi_fsub+0x18c>
 80010e4:	4660      	mov	r0, ip
 80010e6:	4208      	tst	r0, r1
 80010e8:	d000      	beq.n	80010ec <__aeabi_fsub+0x2f8>
 80010ea:	e749      	b.n	8000f80 <__aeabi_fsub+0x18c>
 80010ec:	464b      	mov	r3, r9
 80010ee:	e747      	b.n	8000f80 <__aeabi_fsub+0x18c>
 80010f0:	4648      	mov	r0, r9
 80010f2:	25ff      	movs	r5, #255	; 0xff
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x306>
 80010f8:	e74f      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	4217      	tst	r7, r2
 8001100:	d004      	beq.n	800110c <__aeabi_fsub+0x318>
 8001102:	4660      	mov	r0, ip
 8001104:	4210      	tst	r0, r2
 8001106:	d101      	bne.n	800110c <__aeabi_fsub+0x318>
 8001108:	464b      	mov	r3, r9
 800110a:	4688      	mov	r8, r1
 800110c:	2201      	movs	r2, #1
 800110e:	4641      	mov	r1, r8
 8001110:	25ff      	movs	r5, #255	; 0xff
 8001112:	400a      	ands	r2, r1
 8001114:	e741      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8001116:	4648      	mov	r0, r9
 8001118:	2800      	cmp	r0, #0
 800111a:	d01f      	beq.n	800115c <__aeabi_fsub+0x368>
 800111c:	1a1a      	subs	r2, r3, r0
 800111e:	0150      	lsls	r0, r2, #5
 8001120:	d520      	bpl.n	8001164 <__aeabi_fsub+0x370>
 8001122:	464a      	mov	r2, r9
 8001124:	2407      	movs	r4, #7
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	401c      	ands	r4, r3
 800112a:	4688      	mov	r8, r1
 800112c:	2500      	movs	r5, #0
 800112e:	e6a6      	b.n	8000e7e <__aeabi_fsub+0x8a>
 8001130:	1c74      	adds	r4, r6, #1
 8001132:	d0c9      	beq.n	80010c8 <__aeabi_fsub+0x2d4>
 8001134:	43f6      	mvns	r6, r6
 8001136:	28ff      	cmp	r0, #255	; 0xff
 8001138:	d1bc      	bne.n	80010b4 <__aeabi_fsub+0x2c0>
 800113a:	464b      	mov	r3, r9
 800113c:	e720      	b.n	8000f80 <__aeabi_fsub+0x18c>
 800113e:	4699      	mov	r9, r3
 8001140:	464b      	mov	r3, r9
 8001142:	2500      	movs	r5, #0
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	e72b      	b.n	8000fa0 <__aeabi_fsub+0x1ac>
 8001148:	2301      	movs	r3, #1
 800114a:	e740      	b.n	8000fce <__aeabi_fsub+0x1da>
 800114c:	2200      	movs	r2, #0
 800114e:	2300      	movs	r3, #0
 8001150:	e6a9      	b.n	8000ea6 <__aeabi_fsub+0xb2>
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	2200      	movs	r2, #0
 8001156:	03db      	lsls	r3, r3, #15
 8001158:	24ff      	movs	r4, #255	; 0xff
 800115a:	e6a4      	b.n	8000ea6 <__aeabi_fsub+0xb2>
 800115c:	2500      	movs	r5, #0
 800115e:	e71c      	b.n	8000f9a <__aeabi_fsub+0x1a6>
 8001160:	2301      	movs	r3, #1
 8001162:	e7b1      	b.n	80010c8 <__aeabi_fsub+0x2d4>
 8001164:	2a00      	cmp	r2, #0
 8001166:	d0f1      	beq.n	800114c <__aeabi_fsub+0x358>
 8001168:	0013      	movs	r3, r2
 800116a:	2500      	movs	r5, #0
 800116c:	e6fc      	b.n	8000f68 <__aeabi_fsub+0x174>
 800116e:	2500      	movs	r5, #0
 8001170:	e6fa      	b.n	8000f68 <__aeabi_fsub+0x174>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	7dffffff 	.word	0x7dffffff
 8001178:	fbffffff 	.word	0xfbffffff

0800117c <__aeabi_fcmpun>:
 800117c:	0242      	lsls	r2, r0, #9
 800117e:	024b      	lsls	r3, r1, #9
 8001180:	0040      	lsls	r0, r0, #1
 8001182:	0049      	lsls	r1, r1, #1
 8001184:	0a52      	lsrs	r2, r2, #9
 8001186:	0a5b      	lsrs	r3, r3, #9
 8001188:	0e09      	lsrs	r1, r1, #24
 800118a:	0e00      	lsrs	r0, r0, #24
 800118c:	28ff      	cmp	r0, #255	; 0xff
 800118e:	d006      	beq.n	800119e <__aeabi_fcmpun+0x22>
 8001190:	2000      	movs	r0, #0
 8001192:	29ff      	cmp	r1, #255	; 0xff
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x20>
 8001196:	0018      	movs	r0, r3
 8001198:	1e43      	subs	r3, r0, #1
 800119a:	4198      	sbcs	r0, r3
 800119c:	4770      	bx	lr
 800119e:	38fe      	subs	r0, #254	; 0xfe
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d1fb      	bne.n	800119c <__aeabi_fcmpun+0x20>
 80011a4:	e7f4      	b.n	8001190 <__aeabi_fcmpun+0x14>
 80011a6:	46c0      	nop			; (mov r8, r8)

080011a8 <__aeabi_i2f>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d03d      	beq.n	800122a <__aeabi_i2f+0x82>
 80011ae:	17c3      	asrs	r3, r0, #31
 80011b0:	18c5      	adds	r5, r0, r3
 80011b2:	405d      	eors	r5, r3
 80011b4:	0fc4      	lsrs	r4, r0, #31
 80011b6:	0028      	movs	r0, r5
 80011b8:	f000 f916 	bl	80013e8 <__clzsi2>
 80011bc:	229e      	movs	r2, #158	; 0x9e
 80011be:	1a12      	subs	r2, r2, r0
 80011c0:	2a96      	cmp	r2, #150	; 0x96
 80011c2:	dc07      	bgt.n	80011d4 <__aeabi_i2f+0x2c>
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	2808      	cmp	r0, #8
 80011c8:	dd33      	ble.n	8001232 <__aeabi_i2f+0x8a>
 80011ca:	3808      	subs	r0, #8
 80011cc:	4085      	lsls	r5, r0
 80011ce:	0268      	lsls	r0, r5, #9
 80011d0:	0a40      	lsrs	r0, r0, #9
 80011d2:	e023      	b.n	800121c <__aeabi_i2f+0x74>
 80011d4:	2a99      	cmp	r2, #153	; 0x99
 80011d6:	dd0b      	ble.n	80011f0 <__aeabi_i2f+0x48>
 80011d8:	2305      	movs	r3, #5
 80011da:	0029      	movs	r1, r5
 80011dc:	1a1b      	subs	r3, r3, r0
 80011de:	40d9      	lsrs	r1, r3
 80011e0:	0003      	movs	r3, r0
 80011e2:	331b      	adds	r3, #27
 80011e4:	409d      	lsls	r5, r3
 80011e6:	002b      	movs	r3, r5
 80011e8:	1e5d      	subs	r5, r3, #1
 80011ea:	41ab      	sbcs	r3, r5
 80011ec:	4319      	orrs	r1, r3
 80011ee:	000d      	movs	r5, r1
 80011f0:	2805      	cmp	r0, #5
 80011f2:	dd01      	ble.n	80011f8 <__aeabi_i2f+0x50>
 80011f4:	1f43      	subs	r3, r0, #5
 80011f6:	409d      	lsls	r5, r3
 80011f8:	002b      	movs	r3, r5
 80011fa:	490f      	ldr	r1, [pc, #60]	; (8001238 <__aeabi_i2f+0x90>)
 80011fc:	400b      	ands	r3, r1
 80011fe:	076e      	lsls	r6, r5, #29
 8001200:	d009      	beq.n	8001216 <__aeabi_i2f+0x6e>
 8001202:	260f      	movs	r6, #15
 8001204:	4035      	ands	r5, r6
 8001206:	2d04      	cmp	r5, #4
 8001208:	d005      	beq.n	8001216 <__aeabi_i2f+0x6e>
 800120a:	3304      	adds	r3, #4
 800120c:	015d      	lsls	r5, r3, #5
 800120e:	d502      	bpl.n	8001216 <__aeabi_i2f+0x6e>
 8001210:	229f      	movs	r2, #159	; 0x9f
 8001212:	400b      	ands	r3, r1
 8001214:	1a12      	subs	r2, r2, r0
 8001216:	019b      	lsls	r3, r3, #6
 8001218:	0a58      	lsrs	r0, r3, #9
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	0240      	lsls	r0, r0, #9
 800121e:	05d2      	lsls	r2, r2, #23
 8001220:	0a40      	lsrs	r0, r0, #9
 8001222:	07e4      	lsls	r4, r4, #31
 8001224:	4310      	orrs	r0, r2
 8001226:	4320      	orrs	r0, r4
 8001228:	bd70      	pop	{r4, r5, r6, pc}
 800122a:	2400      	movs	r4, #0
 800122c:	2200      	movs	r2, #0
 800122e:	2000      	movs	r0, #0
 8001230:	e7f4      	b.n	800121c <__aeabi_i2f+0x74>
 8001232:	0268      	lsls	r0, r5, #9
 8001234:	0a40      	lsrs	r0, r0, #9
 8001236:	e7f1      	b.n	800121c <__aeabi_i2f+0x74>
 8001238:	fbffffff 	.word	0xfbffffff

0800123c <__aeabi_f2d>:
 800123c:	0041      	lsls	r1, r0, #1
 800123e:	0e09      	lsrs	r1, r1, #24
 8001240:	1c4b      	adds	r3, r1, #1
 8001242:	b570      	push	{r4, r5, r6, lr}
 8001244:	b2db      	uxtb	r3, r3
 8001246:	0246      	lsls	r6, r0, #9
 8001248:	0a75      	lsrs	r5, r6, #9
 800124a:	0fc4      	lsrs	r4, r0, #31
 800124c:	2b01      	cmp	r3, #1
 800124e:	dd14      	ble.n	800127a <__aeabi_f2d+0x3e>
 8001250:	23e0      	movs	r3, #224	; 0xe0
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	076d      	lsls	r5, r5, #29
 8001256:	0b36      	lsrs	r6, r6, #12
 8001258:	18cb      	adds	r3, r1, r3
 800125a:	2100      	movs	r1, #0
 800125c:	0d0a      	lsrs	r2, r1, #20
 800125e:	0028      	movs	r0, r5
 8001260:	0512      	lsls	r2, r2, #20
 8001262:	4d1c      	ldr	r5, [pc, #112]	; (80012d4 <__aeabi_f2d+0x98>)
 8001264:	4332      	orrs	r2, r6
 8001266:	055b      	lsls	r3, r3, #21
 8001268:	402a      	ands	r2, r5
 800126a:	085b      	lsrs	r3, r3, #1
 800126c:	4313      	orrs	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	07e4      	lsls	r4, r4, #31
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	4323      	orrs	r3, r4
 8001276:	0019      	movs	r1, r3
 8001278:	bd70      	pop	{r4, r5, r6, pc}
 800127a:	2900      	cmp	r1, #0
 800127c:	d114      	bne.n	80012a8 <__aeabi_f2d+0x6c>
 800127e:	2d00      	cmp	r5, #0
 8001280:	d01e      	beq.n	80012c0 <__aeabi_f2d+0x84>
 8001282:	0028      	movs	r0, r5
 8001284:	f000 f8b0 	bl	80013e8 <__clzsi2>
 8001288:	280a      	cmp	r0, #10
 800128a:	dc1c      	bgt.n	80012c6 <__aeabi_f2d+0x8a>
 800128c:	230b      	movs	r3, #11
 800128e:	002a      	movs	r2, r5
 8001290:	1a1b      	subs	r3, r3, r0
 8001292:	40da      	lsrs	r2, r3
 8001294:	0003      	movs	r3, r0
 8001296:	3315      	adds	r3, #21
 8001298:	409d      	lsls	r5, r3
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <__aeabi_f2d+0x9c>)
 800129c:	0312      	lsls	r2, r2, #12
 800129e:	1a1b      	subs	r3, r3, r0
 80012a0:	055b      	lsls	r3, r3, #21
 80012a2:	0b16      	lsrs	r6, r2, #12
 80012a4:	0d5b      	lsrs	r3, r3, #21
 80012a6:	e7d8      	b.n	800125a <__aeabi_f2d+0x1e>
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d006      	beq.n	80012ba <__aeabi_f2d+0x7e>
 80012ac:	0b32      	lsrs	r2, r6, #12
 80012ae:	2680      	movs	r6, #128	; 0x80
 80012b0:	0336      	lsls	r6, r6, #12
 80012b2:	076d      	lsls	r5, r5, #29
 80012b4:	4316      	orrs	r6, r2
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <__aeabi_f2d+0xa0>)
 80012b8:	e7cf      	b.n	800125a <__aeabi_f2d+0x1e>
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <__aeabi_f2d+0xa0>)
 80012bc:	2600      	movs	r6, #0
 80012be:	e7cc      	b.n	800125a <__aeabi_f2d+0x1e>
 80012c0:	2300      	movs	r3, #0
 80012c2:	2600      	movs	r6, #0
 80012c4:	e7c9      	b.n	800125a <__aeabi_f2d+0x1e>
 80012c6:	0003      	movs	r3, r0
 80012c8:	002a      	movs	r2, r5
 80012ca:	3b0b      	subs	r3, #11
 80012cc:	409a      	lsls	r2, r3
 80012ce:	2500      	movs	r5, #0
 80012d0:	e7e3      	b.n	800129a <__aeabi_f2d+0x5e>
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	800fffff 	.word	0x800fffff
 80012d8:	00000389 	.word	0x00000389
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_d2f>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	004c      	lsls	r4, r1, #1
 80012e4:	0d64      	lsrs	r4, r4, #21
 80012e6:	030b      	lsls	r3, r1, #12
 80012e8:	1c62      	adds	r2, r4, #1
 80012ea:	0a5b      	lsrs	r3, r3, #9
 80012ec:	0f46      	lsrs	r6, r0, #29
 80012ee:	0552      	lsls	r2, r2, #21
 80012f0:	0fc9      	lsrs	r1, r1, #31
 80012f2:	431e      	orrs	r6, r3
 80012f4:	00c5      	lsls	r5, r0, #3
 80012f6:	0d52      	lsrs	r2, r2, #21
 80012f8:	2a01      	cmp	r2, #1
 80012fa:	dd29      	ble.n	8001350 <__aeabi_d2f+0x70>
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <__aeabi_d2f+0xfc>)
 80012fe:	18e7      	adds	r7, r4, r3
 8001300:	2ffe      	cmp	r7, #254	; 0xfe
 8001302:	dc1c      	bgt.n	800133e <__aeabi_d2f+0x5e>
 8001304:	2f00      	cmp	r7, #0
 8001306:	dd3b      	ble.n	8001380 <__aeabi_d2f+0xa0>
 8001308:	0180      	lsls	r0, r0, #6
 800130a:	1e43      	subs	r3, r0, #1
 800130c:	4198      	sbcs	r0, r3
 800130e:	2207      	movs	r2, #7
 8001310:	00f3      	lsls	r3, r6, #3
 8001312:	0f6d      	lsrs	r5, r5, #29
 8001314:	4303      	orrs	r3, r0
 8001316:	432b      	orrs	r3, r5
 8001318:	401a      	ands	r2, r3
 800131a:	2a00      	cmp	r2, #0
 800131c:	d004      	beq.n	8001328 <__aeabi_d2f+0x48>
 800131e:	220f      	movs	r2, #15
 8001320:	401a      	ands	r2, r3
 8001322:	2a04      	cmp	r2, #4
 8001324:	d000      	beq.n	8001328 <__aeabi_d2f+0x48>
 8001326:	3304      	adds	r3, #4
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	04d2      	lsls	r2, r2, #19
 800132c:	401a      	ands	r2, r3
 800132e:	d024      	beq.n	800137a <__aeabi_d2f+0x9a>
 8001330:	3701      	adds	r7, #1
 8001332:	b2fa      	uxtb	r2, r7
 8001334:	2fff      	cmp	r7, #255	; 0xff
 8001336:	d002      	beq.n	800133e <__aeabi_d2f+0x5e>
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	0a58      	lsrs	r0, r3, #9
 800133c:	e001      	b.n	8001342 <__aeabi_d2f+0x62>
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	2000      	movs	r0, #0
 8001342:	0240      	lsls	r0, r0, #9
 8001344:	05d2      	lsls	r2, r2, #23
 8001346:	0a40      	lsrs	r0, r0, #9
 8001348:	07c9      	lsls	r1, r1, #31
 800134a:	4310      	orrs	r0, r2
 800134c:	4308      	orrs	r0, r1
 800134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001350:	4335      	orrs	r5, r6
 8001352:	2c00      	cmp	r4, #0
 8001354:	d104      	bne.n	8001360 <__aeabi_d2f+0x80>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d10a      	bne.n	8001370 <__aeabi_d2f+0x90>
 800135a:	2200      	movs	r2, #0
 800135c:	2000      	movs	r0, #0
 800135e:	e7f0      	b.n	8001342 <__aeabi_d2f+0x62>
 8001360:	2d00      	cmp	r5, #0
 8001362:	d0ec      	beq.n	800133e <__aeabi_d2f+0x5e>
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	03c0      	lsls	r0, r0, #15
 8001368:	4330      	orrs	r0, r6
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	e7e9      	b.n	8001342 <__aeabi_d2f+0x62>
 800136e:	2400      	movs	r4, #0
 8001370:	2300      	movs	r3, #0
 8001372:	025b      	lsls	r3, r3, #9
 8001374:	0a58      	lsrs	r0, r3, #9
 8001376:	b2e2      	uxtb	r2, r4
 8001378:	e7e3      	b.n	8001342 <__aeabi_d2f+0x62>
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	003c      	movs	r4, r7
 800137e:	e7f8      	b.n	8001372 <__aeabi_d2f+0x92>
 8001380:	003b      	movs	r3, r7
 8001382:	3317      	adds	r3, #23
 8001384:	dbf3      	blt.n	800136e <__aeabi_d2f+0x8e>
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	041b      	lsls	r3, r3, #16
 800138a:	4333      	orrs	r3, r6
 800138c:	261e      	movs	r6, #30
 800138e:	1bf6      	subs	r6, r6, r7
 8001390:	2e1f      	cmp	r6, #31
 8001392:	dd14      	ble.n	80013be <__aeabi_d2f+0xde>
 8001394:	2202      	movs	r2, #2
 8001396:	4252      	negs	r2, r2
 8001398:	1bd7      	subs	r7, r2, r7
 800139a:	001a      	movs	r2, r3
 800139c:	40fa      	lsrs	r2, r7
 800139e:	0017      	movs	r7, r2
 80013a0:	2e20      	cmp	r6, #32
 80013a2:	d004      	beq.n	80013ae <__aeabi_d2f+0xce>
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <__aeabi_d2f+0x100>)
 80013a6:	4694      	mov	ip, r2
 80013a8:	4464      	add	r4, ip
 80013aa:	40a3      	lsls	r3, r4
 80013ac:	431d      	orrs	r5, r3
 80013ae:	002b      	movs	r3, r5
 80013b0:	1e5d      	subs	r5, r3, #1
 80013b2:	41ab      	sbcs	r3, r5
 80013b4:	2207      	movs	r2, #7
 80013b6:	433b      	orrs	r3, r7
 80013b8:	401a      	ands	r2, r3
 80013ba:	2700      	movs	r7, #0
 80013bc:	e7ad      	b.n	800131a <__aeabi_d2f+0x3a>
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <__aeabi_d2f+0x104>)
 80013c0:	0028      	movs	r0, r5
 80013c2:	18a2      	adds	r2, r4, r2
 80013c4:	4095      	lsls	r5, r2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	1e6c      	subs	r4, r5, #1
 80013ca:	41a5      	sbcs	r5, r4
 80013cc:	40f0      	lsrs	r0, r6
 80013ce:	2207      	movs	r2, #7
 80013d0:	432b      	orrs	r3, r5
 80013d2:	4303      	orrs	r3, r0
 80013d4:	401a      	ands	r2, r3
 80013d6:	2700      	movs	r7, #0
 80013d8:	e79f      	b.n	800131a <__aeabi_d2f+0x3a>
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	fffffc80 	.word	0xfffffc80
 80013e0:	fffffca2 	.word	0xfffffca2
 80013e4:	fffffc82 	.word	0xfffffc82

080013e8 <__clzsi2>:
 80013e8:	211c      	movs	r1, #28
 80013ea:	2301      	movs	r3, #1
 80013ec:	041b      	lsls	r3, r3, #16
 80013ee:	4298      	cmp	r0, r3
 80013f0:	d301      	bcc.n	80013f6 <__clzsi2+0xe>
 80013f2:	0c00      	lsrs	r0, r0, #16
 80013f4:	3910      	subs	r1, #16
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	4298      	cmp	r0, r3
 80013fa:	d301      	bcc.n	8001400 <__clzsi2+0x18>
 80013fc:	0a00      	lsrs	r0, r0, #8
 80013fe:	3908      	subs	r1, #8
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	4298      	cmp	r0, r3
 8001404:	d301      	bcc.n	800140a <__clzsi2+0x22>
 8001406:	0900      	lsrs	r0, r0, #4
 8001408:	3904      	subs	r1, #4
 800140a:	a202      	add	r2, pc, #8	; (adr r2, 8001414 <__clzsi2+0x2c>)
 800140c:	5c10      	ldrb	r0, [r2, r0]
 800140e:	1840      	adds	r0, r0, r1
 8001410:	4770      	bx	lr
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	02020304 	.word	0x02020304
 8001418:	01010101 	.word	0x01010101
	...

08001424 <__clzdi2>:
 8001424:	b510      	push	{r4, lr}
 8001426:	2900      	cmp	r1, #0
 8001428:	d103      	bne.n	8001432 <__clzdi2+0xe>
 800142a:	f7ff ffdd 	bl	80013e8 <__clzsi2>
 800142e:	3020      	adds	r0, #32
 8001430:	e002      	b.n	8001438 <__clzdi2+0x14>
 8001432:	1c08      	adds	r0, r1, #0
 8001434:	f7ff ffd8 	bl	80013e8 <__clzsi2>
 8001438:	bd10      	pop	{r4, pc}
 800143a:	46c0      	nop			; (mov r8, r8)

0800143c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001440:	f000 fa9e 	bl	8001980 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001444:	f000 f81c 	bl	8001480 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_RTC_Init();
 8001448:	f000 f88a 	bl	8001560 <MX_RTC_Init>
	 RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
	 Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
	 ==> WakeUpCounter = ~10ms/0.0005s = 20 = 0x14
	 */

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x20, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <main+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	0018      	movs	r0, r3
 8001454:	f001 fc08 	bl	8002c68 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d001      	beq.n	8001460 <main+0x24>
			!= HAL_OK) {
		Error_Handler();
 800145c:	f000 f91c 	bl	8001698 <Error_Handler>
	}

	/*** Suspend the systick before going into stop mode ****/
	HAL_SuspendTick();
 8001460:	f000 fafe 	bl	8001a60 <HAL_SuspendTick>

	/*** enable sleep on exit for interrupt only operations ****/
	HAL_PWR_EnableSleepOnExit();
 8001464:	f000 fc52 	bl	8001d0c <HAL_PWR_EnableSleepOnExit>

	/*** ENTER THE STOP MODE ****/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001468:	2101      	movs	r1, #1
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fbf2 	bl	8001c54 <HAL_PWR_EnterSTOPMode>

	/*** wake up from stop mode ****/

	// disable the RTC wakeup
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <main+0x40>)
 8001472:	0018      	movs	r0, r3
 8001474:	f001 fcbe 	bl	8002df4 <HAL_RTCEx_DeactivateWakeUpTimer>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8001478:	e7fe      	b.n	8001478 <main+0x3c>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	200000d4 	.word	0x200000d4

08001480 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b09b      	sub	sp, #108	; 0x6c
 8001484:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001486:	2434      	movs	r4, #52	; 0x34
 8001488:	193b      	adds	r3, r7, r4
 800148a:	0018      	movs	r0, r3
 800148c:	2334      	movs	r3, #52	; 0x34
 800148e:	001a      	movs	r2, r3
 8001490:	2100      	movs	r1, #0
 8001492:	f001 fd65 	bl	8002f60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001496:	2320      	movs	r3, #32
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	0018      	movs	r0, r3
 800149c:	2314      	movs	r3, #20
 800149e:	001a      	movs	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	f001 fd5d 	bl	8002f60 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80014a6:	003b      	movs	r3, r7
 80014a8:	0018      	movs	r0, r3
 80014aa:	2320      	movs	r3, #32
 80014ac:	001a      	movs	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	f001 fd56 	bl	8002f60 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <SystemClock_Config+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <SystemClock_Config+0xdc>)
 80014ba:	401a      	ands	r2, r3
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <SystemClock_Config+0xd8>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0109      	lsls	r1, r1, #4
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80014c6:	0021      	movs	r1, r4
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2218      	movs	r2, #24
 80014cc:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2201      	movs	r2, #1
 80014d2:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2201      	movs	r2, #1
 80014d8:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	22a0      	movs	r2, #160	; 0xa0
 80014e4:	0212      	lsls	r2, r2, #8
 80014e6:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	0018      	movs	r0, r3
 80014f2:	f000 fc19 	bl	8001d28 <HAL_RCC_OscConfig>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x7e>
		Error_Handler();
 80014fa:	f000 f8cd 	bl	8001698 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014fe:	2120      	movs	r1, #32
 8001500:	187b      	adds	r3, r7, r1
 8001502:	220f      	movs	r2, #15
 8001504:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2100      	movs	r1, #0
 8001522:	0018      	movs	r0, r3
 8001524:	f000 ff80 	bl	8002428 <HAL_RCC_ClockConfig>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0xb0>
		Error_Handler();
 800152c:	f000 f8b4 	bl	8001698 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001530:	003b      	movs	r3, r7
 8001532:	2220      	movs	r2, #32
 8001534:	601a      	str	r2, [r3, #0]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001536:	003b      	movs	r3, r7
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	0292      	lsls	r2, r2, #10
 800153c:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800153e:	003b      	movs	r3, r7
 8001540:	0018      	movs	r0, r3
 8001542:	f001 f95b 	bl	80027fc <HAL_RCCEx_PeriphCLKConfig>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xce>
		Error_Handler();
 800154a:	f000 f8a5 	bl	8001698 <Error_Handler>
	}
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b01b      	add	sp, #108	; 0x6c
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	40007000 	.word	0x40007000
 800155c:	ffffe7ff 	.word	0xffffe7ff

08001560 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_RTC_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_RTC_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_RTC_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_RTC_Init+0x4c>)
 8001572:	227f      	movs	r2, #127	; 0x7f
 8001574:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_RTC_Init+0x4c>)
 8001578:	22ff      	movs	r2, #255	; 0xff
 800157a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_RTC_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_RTC_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_RTC_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_RTC_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <MX_RTC_Init+0x4c>)
 8001596:	0018      	movs	r0, r3
 8001598:	f001 fa76 	bl	8002a88 <HAL_RTC_Init>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <MX_RTC_Init+0x44>
		Error_Handler();
 80015a0:	f000 f87a 	bl	8001698 <Error_Handler>
//  }
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	200000d4 	.word	0x200000d4
 80015b0:	40002800 	.word	0x40002800

080015b4 <my_pridictor>:
 * @info Naive_Bayes Predictor : This function will predict the class/index with which the given inputs should belong
 * @input : float x : first feature of the object
 * @input : float y : second feature of the object
 * @output : returns the index with which the object belongs based on its features and trained model data
 */
uint32_t my_pridictor(float x, float y) {
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b08b      	sub	sp, #44	; 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	/* Result of the classifier */
	float32_t result[NB_OF_CLASSES];
	float32_t maxProba;
	uint32_t index;

	S.vectorDimension = VECTOR_DIMENSION;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <my_pridictor+0x64>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
	S.numberOfClasses = NB_OF_CLASSES;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <my_pridictor+0x64>)
 80015c6:	2203      	movs	r2, #3
 80015c8:	605a      	str	r2, [r3, #4]
	S.theta = theta;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <my_pridictor+0x64>)
 80015cc:	4a13      	ldr	r2, [pc, #76]	; (800161c <my_pridictor+0x68>)
 80015ce:	609a      	str	r2, [r3, #8]
	S.sigma = sigma;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <my_pridictor+0x64>)
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <my_pridictor+0x6c>)
 80015d4:	60da      	str	r2, [r3, #12]
	S.classPriors = classPriors;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <my_pridictor+0x64>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <my_pridictor+0x70>)
 80015da:	611a      	str	r2, [r3, #16]
	S.epsilon = 4.328939296523643e-09f;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <my_pridictor+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <my_pridictor+0x74>)
 80015e0:	615a      	str	r2, [r3, #20]

	in[0] = x;
 80015e2:	2120      	movs	r1, #32
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
	in[1] = y;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	605a      	str	r2, [r3, #4]

	arm_gaussian_naive_bayes_predict_f32(&S, in, result);
 80015f0:	2414      	movs	r4, #20
 80015f2:	193a      	adds	r2, r7, r4
 80015f4:	1879      	adds	r1, r7, r1
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <my_pridictor+0x64>)
 80015f8:	0018      	movs	r0, r3
 80015fa:	f000 f8d9 	bl	80017b0 <arm_gaussian_naive_bayes_predict_f32>

	arm_max_f32(result, NB_OF_CLASSES, &maxProba, &index);
 80015fe:	230c      	movs	r3, #12
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2210      	movs	r2, #16
 8001604:	18ba      	adds	r2, r7, r2
 8001606:	1938      	adds	r0, r7, r4
 8001608:	2103      	movs	r1, #3
 800160a:	f000 f985 	bl	8001918 <arm_max_f32>

	return index;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b00b      	add	sp, #44	; 0x2c
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	200000bc 	.word	0x200000bc
 800161c:	080033b8 	.word	0x080033b8
 8001620:	080033d0 	.word	0x080033d0
 8001624:	080033e8 	.word	0x080033e8
 8001628:	3194bdc1 	.word	0x3194bdc1

0800162c <my_test_task>:
 * 			Predict the output based on the given input
 * 			Here the test a pseudo test. A more random test can be generated using ADC for generating Random numbers
 * @input : None
 * @output : None
 */
void my_test_task(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	uint32_t output_cluster_index = my_pridictor(
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <my_test_task+0x48>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <my_test_task+0x4c>)
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	58d0      	ldr	r0, [r2, r3]
			input_test_array[index_counter],
			input_test_array[index_counter + 1]);
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <my_test_task+0x48>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
	uint32_t output_cluster_index = my_pridictor(
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <my_test_task+0x4c>)
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	58d3      	ldr	r3, [r2, r3]
 8001648:	1c19      	adds	r1, r3, #0
 800164a:	f7ff ffb3 	bl	80015b4 <my_pridictor>
 800164e:	0003      	movs	r3, r0
 8001650:	607b      	str	r3, [r7, #4]
	if (index_counter > 9) {
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <my_test_task+0x48>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b09      	cmp	r3, #9
 8001658:	dd03      	ble.n	8001662 <my_test_task+0x36>
		index_counter = 0;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <my_test_task+0x48>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
	} else {
		index_counter += 2;
	}
}
 8001660:	e004      	b.n	800166c <my_test_task+0x40>
		index_counter += 2;
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <my_test_task+0x48>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1c9a      	adds	r2, r3, #2
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <my_test_task+0x48>)
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200000b8 	.word	0x200000b8
 8001678:	20000000 	.word	0x20000000

0800167c <HAL_RTCEx_WakeUpTimerEventCallback>:
/*
 * @info : Callback function for RTC - this routine will be executed every time the controller wakes from low power mode
 *
 */

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8001684:	f7ff fefc 	bl	8001480 <SystemClock_Config>
	HAL_ResumeTick();
 8001688:	f000 f9f8 	bl	8001a7c <HAL_ResumeTick>
	my_test_task();
 800168c:	f7ff ffce 	bl	800162c <my_test_task>
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}

08001698 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800169e:	e7fe      	b.n	800169e <Error_Handler+0x6>

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_MspInit+0x24>)
 80016a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x24>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	430a      	orrs	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_MspInit+0x24>)
 80016b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_MspInit+0x24>)
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	0549      	lsls	r1, r1, #21
 80016ba:	430a      	orrs	r2, r1
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_RTC_MspInit+0x38>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10e      	bne.n	80016f8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RTC_MspInit+0x3c>)
 80016dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RTC_MspInit+0x3c>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	02c9      	lsls	r1, r1, #11
 80016e4:	430a      	orrs	r2, r1
 80016e6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2002      	movs	r0, #2
 80016ee:	f000 fa7f 	bl	8001bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80016f2:	2002      	movs	r0, #2
 80016f4:	f000 fa91 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40002800 	.word	0x40002800
 8001704:	40021000 	.word	0x40021000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f97c 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <RTC_IRQHandler+0x14>)
 800173e:	0018      	movs	r0, r3
 8001740:	f001 fbba 	bl	8002eb8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	200000d4 	.word	0x200000d4

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800175e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0b      	ldr	r4, [pc, #44]	; (80017a8 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001786:	f7ff ffe3 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f001 fbc5 	bl	8002f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff fe55 	bl	800143c <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
   ldr   r0, =_estack
 8001794:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80017a0:	08003424 	.word	0x08003424
  ldr r2, =_sbss
 80017a4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80017a8:	200000fc 	.word	0x200000fc

080017ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_COMP_IRQHandler>
	...

080017b0 <arm_gaussian_naive_bayes_predict_f32>:
 * @return The predicted class
 *
 */
uint32_t arm_gaussian_naive_bayes_predict_f32(
		const arm_gaussian_naive_bayes_instance_f32 *S, const float32_t *in,
		float32_t *pBuffer) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b093      	sub	sp, #76	; 0x4c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	uint32_t nbClass;
	uint32_t nbDim;
	const float32_t *pPrior = S->classPriors;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	const float32_t *pTheta = S->theta;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
	const float32_t *pSigma = S->sigma;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
	float32_t *buffer = pBuffer;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
	const float32_t *pIn = in;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t sigma;
	float32_t tmp;
	float32_t acc1, acc2;
	uint32_t index;

	pTheta = S->theta;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
	pSigma = S->sigma;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34

	for (nbClass = 0; nbClass < S->numberOfClasses; nbClass++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
 80017e6:	e080      	b.n	80018ea <arm_gaussian_naive_bayes_predict_f32+0x13a>

		pIn = in;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		tmp = 0.0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
		acc1 = 0.0f;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
		acc2 = 0.0f;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
		for (nbDim = 0; nbDim < S->vectorDimension; nbDim++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	643b      	str	r3, [r7, #64]	; 0x40
 80017fc:	e047      	b.n	800188e <arm_gaussian_naive_bayes_predict_f32+0xde>
			sigma = *pSigma + S->epsilon;
 80017fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	1c19      	adds	r1, r3, #0
 8001808:	1c10      	adds	r0, r2, #0
 800180a:	f7fe fe4f 	bl	80004ac <__aeabi_fadd>
 800180e:	1c03      	adds	r3, r0, #0
 8001810:	61fb      	str	r3, [r7, #28]
			acc1 += logf(2.0f * PI_F * sigma);
 8001812:	4940      	ldr	r1, [pc, #256]	; (8001914 <arm_gaussian_naive_bayes_predict_f32+0x164>)
 8001814:	69f8      	ldr	r0, [r7, #28]
 8001816:	f7ff f9bb 	bl	8000b90 <__aeabi_fmul>
 800181a:	1c03      	adds	r3, r0, #0
 800181c:	1c18      	adds	r0, r3, #0
 800181e:	f001 fba7 	bl	8002f70 <logf>
 8001822:	1c03      	adds	r3, r0, #0
 8001824:	1c19      	adds	r1, r3, #0
 8001826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001828:	f7fe fe40 	bl	80004ac <__aeabi_fadd>
 800182c:	1c03      	adds	r3, r0, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
			acc2 += (*pIn - *pTheta) * (*pIn - *pTheta) / sigma;
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	1c19      	adds	r1, r3, #0
 800183a:	1c10      	adds	r0, r2, #0
 800183c:	f7ff fada 	bl	8000df4 <__aeabi_fsub>
 8001840:	1c03      	adds	r3, r0, #0
 8001842:	1c1c      	adds	r4, r3, #0
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	1c19      	adds	r1, r3, #0
 800184e:	1c10      	adds	r0, r2, #0
 8001850:	f7ff fad0 	bl	8000df4 <__aeabi_fsub>
 8001854:	1c03      	adds	r3, r0, #0
 8001856:	1c19      	adds	r1, r3, #0
 8001858:	1c20      	adds	r0, r4, #0
 800185a:	f7ff f999 	bl	8000b90 <__aeabi_fmul>
 800185e:	1c03      	adds	r3, r0, #0
 8001860:	69f9      	ldr	r1, [r7, #28]
 8001862:	1c18      	adds	r0, r3, #0
 8001864:	f7fe ffbc 	bl	80007e0 <__aeabi_fdiv>
 8001868:	1c03      	adds	r3, r0, #0
 800186a:	1c19      	adds	r1, r3, #0
 800186c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800186e:	f7fe fe1d 	bl	80004ac <__aeabi_fadd>
 8001872:	1c03      	adds	r3, r0, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24

			pIn++;
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	3304      	adds	r3, #4
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
			pTheta++;
 800187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187e:	3304      	adds	r3, #4
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
			pSigma++;
 8001882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001884:	3304      	adds	r3, #4
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
		for (nbDim = 0; nbDim < S->vectorDimension; nbDim++) {
 8001888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800188a:	3301      	adds	r3, #1
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001894:	429a      	cmp	r2, r3
 8001896:	d3b2      	bcc.n	80017fe <arm_gaussian_naive_bayes_predict_f32+0x4e>
		}

		tmp = -0.5f * acc1;
 8001898:	21bf      	movs	r1, #191	; 0xbf
 800189a:	0609      	lsls	r1, r1, #24
 800189c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800189e:	f7ff f977 	bl	8000b90 <__aeabi_fmul>
 80018a2:	1c03      	adds	r3, r0, #0
 80018a4:	623b      	str	r3, [r7, #32]
		tmp -= 0.5f * acc2;
 80018a6:	21fc      	movs	r1, #252	; 0xfc
 80018a8:	0589      	lsls	r1, r1, #22
 80018aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ac:	f7ff f970 	bl	8000b90 <__aeabi_fmul>
 80018b0:	1c03      	adds	r3, r0, #0
 80018b2:	1c19      	adds	r1, r3, #0
 80018b4:	6a38      	ldr	r0, [r7, #32]
 80018b6:	f7ff fa9d 	bl	8000df4 <__aeabi_fsub>
 80018ba:	1c03      	adds	r3, r0, #0
 80018bc:	623b      	str	r3, [r7, #32]

		*buffer = tmp + logf(*pPrior++);
 80018be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c0:	1d1a      	adds	r2, r3, #4
 80018c2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1c18      	adds	r0, r3, #0
 80018c8:	f001 fb52 	bl	8002f70 <logf>
 80018cc:	1c03      	adds	r3, r0, #0
 80018ce:	6a39      	ldr	r1, [r7, #32]
 80018d0:	1c18      	adds	r0, r3, #0
 80018d2:	f7fe fdeb 	bl	80004ac <__aeabi_fadd>
 80018d6:	1c03      	adds	r3, r0, #0
 80018d8:	1c1a      	adds	r2, r3, #0
 80018da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018dc:	601a      	str	r2, [r3, #0]
		buffer++;
 80018de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e0:	3304      	adds	r3, #4
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
	for (nbClass = 0; nbClass < S->numberOfClasses; nbClass++) {
 80018e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e6:	3301      	adds	r3, #1
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d200      	bcs.n	80018f6 <arm_gaussian_naive_bayes_predict_f32+0x146>
 80018f4:	e778      	b.n	80017e8 <arm_gaussian_naive_bayes_predict_f32+0x38>
	}

	arm_max_f32(pBuffer, S->numberOfClasses, &result, &index);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	2314      	movs	r3, #20
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2218      	movs	r2, #24
 8001900:	18ba      	adds	r2, r7, r2
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f808 	bl	8001918 <arm_max_f32>

	return (index);
 8001908:	697b      	ldr	r3, [r7, #20]
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b013      	add	sp, #76	; 0x4c
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40c90fdb 	.word	0x40c90fdb

08001918 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1d1a      	adds	r2, r3, #4
 800192e:	60fa      	str	r2, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3b01      	subs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800193a:	e013      	b.n	8001964 <arm_max_f32+0x4c>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	60fa      	str	r2, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 8001946:	6939      	ldr	r1, [r7, #16]
 8001948:	69f8      	ldr	r0, [r7, #28]
 800194a:	f7fe fc7b 	bl	8000244 <__aeabi_fcmplt>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d005      	beq.n	800195e <arm_max_f32+0x46>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	3b01      	subs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e8      	bne.n	800193c <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b008      	add	sp, #32
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x3c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Init+0x3c>)
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001998:	2000      	movs	r0, #0
 800199a:	f000 f811 	bl	80019c0 <HAL_InitTick>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d003      	beq.n	80019aa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e001      	b.n	80019ae <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019aa:	f7ff fe79 	bl	80016a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_InitTick+0x5c>)
 80019ca:	681c      	ldr	r4, [r3, #0]
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_InitTick+0x60>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	0019      	movs	r1, r3
 80019d2:	23fa      	movs	r3, #250	; 0xfa
 80019d4:	0098      	lsls	r0, r3, #2
 80019d6:	f7fe fb97 	bl	8000108 <__udivsi3>
 80019da:	0003      	movs	r3, r0
 80019dc:	0019      	movs	r1, r3
 80019de:	0020      	movs	r0, r4
 80019e0:	f7fe fb92 	bl	8000108 <__udivsi3>
 80019e4:	0003      	movs	r3, r0
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 f927 	bl	8001c3a <HAL_SYSTICK_Config>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e00f      	b.n	8001a14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d80b      	bhi.n	8001a12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	2301      	movs	r3, #1
 80019fe:	425b      	negs	r3, r3
 8001a00:	2200      	movs	r2, #0
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 f8f4 	bl	8001bf0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_InitTick+0x64>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b003      	add	sp, #12
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	20000028 	.word	0x20000028
 8001a20:	20000030 	.word	0x20000030
 8001a24:	2000002c 	.word	0x2000002c

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_IncTick+0x1c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	001a      	movs	r2, r3
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x20>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	18d2      	adds	r2, r2, r3
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_IncTick+0x20>)
 8001a3a:	601a      	str	r2, [r3, #0]
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	20000030 	.word	0x20000030
 8001a48:	200000f8 	.word	0x200000f8

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_GetTick+0x10>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	200000f8 	.word	0x200000f8

08001a60 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_SuspendTick+0x18>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_SuspendTick+0x18>)
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_ResumeTick+0x18>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_ResumeTick+0x18>)
 8001a86:	2102      	movs	r1, #2
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	1dfb      	adds	r3, r7, #7
 8001aa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aaa:	d809      	bhi.n	8001ac0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	231f      	movs	r3, #31
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_EnableIRQ+0x30>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4091      	lsls	r1, r2
 8001abc:	000a      	movs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
  }
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae0:	d828      	bhi.n	8001b34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae2:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <__NVIC_SetPriority+0xd4>)
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	33c0      	adds	r3, #192	; 0xc0
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	589b      	ldr	r3, [r3, r2]
 8001af2:	1dfa      	adds	r2, r7, #7
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	0011      	movs	r1, r2
 8001af8:	2203      	movs	r2, #3
 8001afa:	400a      	ands	r2, r1
 8001afc:	00d2      	lsls	r2, r2, #3
 8001afe:	21ff      	movs	r1, #255	; 0xff
 8001b00:	4091      	lsls	r1, r2
 8001b02:	000a      	movs	r2, r1
 8001b04:	43d2      	mvns	r2, r2
 8001b06:	401a      	ands	r2, r3
 8001b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	22ff      	movs	r2, #255	; 0xff
 8001b10:	401a      	ands	r2, r3
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	0018      	movs	r0, r3
 8001b18:	2303      	movs	r3, #3
 8001b1a:	4003      	ands	r3, r0
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b20:	481f      	ldr	r0, [pc, #124]	; (8001ba0 <__NVIC_SetPriority+0xd4>)
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	33c0      	adds	r3, #192	; 0xc0
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b32:	e031      	b.n	8001b98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b34:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <__NVIC_SetPriority+0xd8>)
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	400b      	ands	r3, r1
 8001b40:	3b08      	subs	r3, #8
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3306      	adds	r3, #6
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1dfa      	adds	r2, r7, #7
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	0011      	movs	r1, r2
 8001b54:	2203      	movs	r2, #3
 8001b56:	400a      	ands	r2, r1
 8001b58:	00d2      	lsls	r2, r2, #3
 8001b5a:	21ff      	movs	r1, #255	; 0xff
 8001b5c:	4091      	lsls	r1, r2
 8001b5e:	000a      	movs	r2, r1
 8001b60:	43d2      	mvns	r2, r2
 8001b62:	401a      	ands	r2, r3
 8001b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	0018      	movs	r0, r3
 8001b74:	2303      	movs	r3, #3
 8001b76:	4003      	ands	r3, r0
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <__NVIC_SetPriority+0xd8>)
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	001c      	movs	r4, r3
 8001b84:	230f      	movs	r3, #15
 8001b86:	4023      	ands	r3, r4
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	3306      	adds	r3, #6
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	18c3      	adds	r3, r0, r3
 8001b94:	3304      	adds	r3, #4
 8001b96:	601a      	str	r2, [r3, #0]
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <SysTick_Config+0x40>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e010      	b.n	8001be0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <SysTick_Config+0x44>)
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	3a01      	subs	r2, #1
 8001bc4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	2103      	movs	r1, #3
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff ff7d 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SysTick_Config+0x44>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x44>)
 8001bda:	2207      	movs	r2, #7
 8001bdc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	00ffffff 	.word	0x00ffffff
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	1c02      	adds	r2, r0, #0
 8001c00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff ff5d 	bl	8001acc <__NVIC_SetPriority>
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	0002      	movs	r2, r0
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff ff33 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff ffaf 	bl	8001ba8 <SysTick_Config>
 8001c4a:	0003      	movs	r3, r0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	1cfb      	adds	r3, r7, #3
 8001c60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_PWR_EnterSTOPMode+0xac>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_PWR_EnterSTOPMode+0x40>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c8e:	491d      	ldr	r1, [pc, #116]	; (8001d04 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001cbc:	1cfb      	adds	r3, r7, #3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001cc4:	bf30      	wfi
 8001cc6:	e002      	b.n	8001cce <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001cc8:	bf40      	sev
    __WFE();
 8001cca:	bf20      	wfe
    __WFE();
 8001ccc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	438a      	bics	r2, r1
 8001cd8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <HAL_PWR_EnterSTOPMode+0xa0>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0089      	lsls	r1, r1, #2
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
  }
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b006      	add	sp, #24
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	fffffdff 	.word	0xfffffdff
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001d16:	2102      	movs	r1, #2
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	611a      	str	r2, [r3, #16]
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f000 fb70 	bl	800241c <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3c:	4bc9      	ldr	r3, [pc, #804]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	220c      	movs	r2, #12
 8001d42:	4013      	ands	r3, r2
 8001d44:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d46:	4bc7      	ldr	r3, [pc, #796]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCC_OscConfig+0x36>
 8001d5c:	e07d      	b.n	8001e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d007      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d112      	bne.n	8001d90 <HAL_RCC_OscConfig+0x68>
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d10d      	bne.n	8001d90 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	4bbb      	ldr	r3, [pc, #748]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5a>
 8001d80:	e06a      	b.n	8001e58 <HAL_RCC_OscConfig+0x130>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d166      	bne.n	8001e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f000 fb46 	bl	800241c <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	025b      	lsls	r3, r3, #9
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x84>
 8001d9c:	4bb1      	ldr	r3, [pc, #708]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4bb0      	ldr	r3, [pc, #704]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	0249      	lsls	r1, r1, #9
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e027      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	23a0      	movs	r3, #160	; 0xa0
 8001db2:	02db      	lsls	r3, r3, #11
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10e      	bne.n	8001dd6 <HAL_RCC_OscConfig+0xae>
 8001db8:	4baa      	ldr	r3, [pc, #680]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4ba9      	ldr	r3, [pc, #676]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	02c9      	lsls	r1, r1, #11
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	4ba7      	ldr	r3, [pc, #668]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4ba6      	ldr	r3, [pc, #664]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0249      	lsls	r1, r1, #9
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e012      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001dd6:	4ba3      	ldr	r3, [pc, #652]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4ba2      	ldr	r3, [pc, #648]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001ddc:	49a2      	ldr	r1, [pc, #648]	; (8002068 <HAL_RCC_OscConfig+0x340>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	4ba0      	ldr	r3, [pc, #640]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	025b      	lsls	r3, r3, #9
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4b9c      	ldr	r3, [pc, #624]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b9b      	ldr	r3, [pc, #620]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001df6:	499d      	ldr	r1, [pc, #628]	; (800206c <HAL_RCC_OscConfig+0x344>)
 8001df8:	400a      	ands	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d014      	beq.n	8001e2e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fe22 	bl	8001a4c <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fe1d 	bl	8001a4c <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e2fd      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e20:	4b90      	ldr	r3, [pc, #576]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	029b      	lsls	r3, r3, #10
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0xe6>
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fe0d 	bl	8001a4c <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fe08 	bl	8001a4c <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e2e8      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e4a:	4b86      	ldr	r3, [pc, #536]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	029b      	lsls	r3, r3, #10
 8001e52:	4013      	ands	r3, r2
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x110>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d100      	bne.n	8001e66 <HAL_RCC_OscConfig+0x13e>
 8001e64:	e09a      	b.n	8001f9c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2220      	movs	r2, #32
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e74:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	2220      	movs	r2, #32
 8001e84:	4393      	bics	r3, r2
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d13f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1ec>
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d004      	beq.n	8001eae <HAL_RCC_OscConfig+0x186>
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e2b6      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b6d      	ldr	r3, [pc, #436]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a6f      	ldr	r2, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x348>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	021a      	lsls	r2, r3, #8
 8001ebe:	4b69      	ldr	r3, [pc, #420]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ec4:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2209      	movs	r2, #9
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	4b65      	ldr	r3, [pc, #404]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ed6:	f000 fbef 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8001eda:	0001      	movs	r1, r0
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_RCC_OscConfig+0x34c>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	000a      	movs	r2, r1
 8001eec:	40da      	lsrs	r2, r3
 8001eee:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCC_OscConfig+0x350>)
 8001ef0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ef2:	4b62      	ldr	r3, [pc, #392]	; (800207c <HAL_RCC_OscConfig+0x354>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2513      	movs	r5, #19
 8001ef8:	197c      	adds	r4, r7, r5
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff fd60 	bl	80019c0 <HAL_InitTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f04:	197b      	adds	r3, r7, r5
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d047      	beq.n	8001f9c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001f0c:	2313      	movs	r3, #19
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	e283      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d027      	beq.n	8001f6a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f1a:	4b52      	ldr	r3, [pc, #328]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2209      	movs	r2, #9
 8001f20:	4393      	bics	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fd8e 	bl	8001a4c <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fd89 	bl	8001a4c <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e269      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0f1      	beq.n	8001f36 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x348>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	021a      	lsls	r2, r3, #8
 8001f62:	4b40      	ldr	r3, [pc, #256]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fd69 	bl	8001a4c <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff fd64 	bl	8001a4c <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e244      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2204      	movs	r2, #4
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d1f1      	bne.n	8001f80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d100      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x280>
 8001fa6:	e0a2      	b.n	80020ee <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d141      	bne.n	8002032 <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x29e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e22a      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <HAL_RCC_OscConfig+0x358>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	0a19      	lsrs	r1, r3, #8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	061a      	lsls	r2, r3, #24
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	0b5b      	lsrs	r3, r3, #13
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	0212      	lsls	r2, r2, #8
 8001ffa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	210f      	movs	r1, #15
 8002004:	400b      	ands	r3, r1
 8002006:	491b      	ldr	r1, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x34c>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_OscConfig+0x350>)
 800200e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_RCC_OscConfig+0x354>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2513      	movs	r5, #19
 8002016:	197c      	adds	r4, r7, r5
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff fcd1 	bl	80019c0 <HAL_InitTick>
 800201e:	0003      	movs	r3, r0
 8002020:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002022:	197b      	adds	r3, r7, r5
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d061      	beq.n	80020ee <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800202a:	2313      	movs	r3, #19
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	e1f4      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03f      	beq.n	80020ba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_OscConfig+0x33c>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0049      	lsls	r1, r1, #1
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fd00 	bl	8001a4c <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002050:	e018      	b.n	8002084 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002052:	f7ff fcfb 	bl	8001a4c <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d911      	bls.n	8002084 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1db      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
 8002064:	40021000 	.word	0x40021000
 8002068:	fffeffff 	.word	0xfffeffff
 800206c:	fffbffff 	.word	0xfffbffff
 8002070:	ffffe0ff 	.word	0xffffe0ff
 8002074:	080033f4 	.word	0x080033f4
 8002078:	20000028 	.word	0x20000028
 800207c:	2000002c 	.word	0x2000002c
 8002080:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002084:	4bca      	ldr	r3, [pc, #808]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d0e0      	beq.n	8002052 <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	4bc7      	ldr	r3, [pc, #796]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4ac7      	ldr	r2, [pc, #796]	; (80023b4 <HAL_RCC_OscConfig+0x68c>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	4bc4      	ldr	r3, [pc, #784]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a4:	4bc2      	ldr	r3, [pc, #776]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	0a19      	lsrs	r1, r3, #8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	061a      	lsls	r2, r3, #24
 80020b2:	4bbf      	ldr	r3, [pc, #764]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	e019      	b.n	80020ee <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ba:	4bbd      	ldr	r3, [pc, #756]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4bbc      	ldr	r3, [pc, #752]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80020c0:	49bd      	ldr	r1, [pc, #756]	; (80023b8 <HAL_RCC_OscConfig+0x690>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff fcc1 	bl	8001a4c <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d0:	f7ff fcbc 	bl	8001a4c <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e19c      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020e2:	4bb3      	ldr	r3, [pc, #716]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2208      	movs	r2, #8
 80020f4:	4013      	ands	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d019      	beq.n	8002134 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002100:	4bab      	ldr	r3, [pc, #684]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002104:	4baa      	ldr	r3, [pc, #680]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002106:	2101      	movs	r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210c:	f7ff fc9e 	bl	8001a4c <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002116:	f7ff fc99 	bl	8001a4c <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e179      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002128:	4ba1      	ldr	r3, [pc, #644]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d0f1      	beq.n	8002116 <HAL_RCC_OscConfig+0x3ee>
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002134:	4b9e      	ldr	r3, [pc, #632]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002138:	4b9d      	ldr	r3, [pc, #628]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002140:	f7ff fc84 	bl	8001a4c <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff fc7f 	bl	8001a4c <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e15f      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800215c:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	2202      	movs	r2, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d1f1      	bne.n	800214a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2204      	movs	r2, #4
 800216c:	4013      	ands	r3, r2
 800216e:	d100      	bne.n	8002172 <HAL_RCC_OscConfig+0x44a>
 8002170:	e0af      	b.n	80022d2 <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2323      	movs	r3, #35	; 0x23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800217c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	055b      	lsls	r3, r3, #21
 8002182:	4013      	ands	r3, r2
 8002184:	d10a      	bne.n	800219c <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b8a      	ldr	r3, [pc, #552]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800218a:	4b89      	ldr	r3, [pc, #548]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0549      	lsls	r1, r1, #21
 8002190:	430a      	orrs	r2, r1
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002194:	2323      	movs	r3, #35	; 0x23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b87      	ldr	r3, [pc, #540]	; (80023bc <HAL_RCC_OscConfig+0x694>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4013      	ands	r3, r2
 80021a6:	d11a      	bne.n	80021de <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a8:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0x694>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b83      	ldr	r3, [pc, #524]	; (80023bc <HAL_RCC_OscConfig+0x694>)
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	0049      	lsls	r1, r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fc49 	bl	8001a4c <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7ff fc44 	bl	8001a4c <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e124      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b7a      	ldr	r3, [pc, #488]	; (80023bc <HAL_RCC_OscConfig+0x694>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_OscConfig+0x4d2>
 80021ea:	4b71      	ldr	r3, [pc, #452]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	0049      	lsls	r1, r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	651a      	str	r2, [r3, #80]	; 0x50
 80021f8:	e031      	b.n	800225e <HAL_RCC_OscConfig+0x536>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x4f4>
 8002202:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002206:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002208:	496b      	ldr	r1, [pc, #428]	; (80023b8 <HAL_RCC_OscConfig+0x690>)
 800220a:	400a      	ands	r2, r1
 800220c:	651a      	str	r2, [r3, #80]	; 0x50
 800220e:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002212:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002214:	496a      	ldr	r1, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x698>)
 8002216:	400a      	ands	r2, r1
 8002218:	651a      	str	r2, [r3, #80]	; 0x50
 800221a:	e020      	b.n	800225e <HAL_RCC_OscConfig+0x536>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	23a0      	movs	r3, #160	; 0xa0
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	429a      	cmp	r2, r3
 8002226:	d10e      	bne.n	8002246 <HAL_RCC_OscConfig+0x51e>
 8002228:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800222a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800222c:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	00c9      	lsls	r1, r1, #3
 8002232:	430a      	orrs	r2, r1
 8002234:	651a      	str	r2, [r3, #80]	; 0x50
 8002236:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223a:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0049      	lsls	r1, r1, #1
 8002240:	430a      	orrs	r2, r1
 8002242:	651a      	str	r2, [r3, #80]	; 0x50
 8002244:	e00b      	b.n	800225e <HAL_RCC_OscConfig+0x536>
 8002246:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800224a:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800224c:	495a      	ldr	r1, [pc, #360]	; (80023b8 <HAL_RCC_OscConfig+0x690>)
 800224e:	400a      	ands	r2, r1
 8002250:	651a      	str	r2, [r3, #80]	; 0x50
 8002252:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002256:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002258:	4959      	ldr	r1, [pc, #356]	; (80023c0 <HAL_RCC_OscConfig+0x698>)
 800225a:	400a      	ands	r2, r1
 800225c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d015      	beq.n	8002292 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7ff fbf1 	bl	8001a4c <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800226e:	e009      	b.n	8002284 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff fbec 	bl	8001a4c <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	4a52      	ldr	r2, [pc, #328]	; (80023c4 <HAL_RCC_OscConfig+0x69c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0cb      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002284:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d0ef      	beq.n	8002270 <HAL_RCC_OscConfig+0x548>
 8002290:	e014      	b.n	80022bc <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7ff fbdb 	bl	8001a4c <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800229a:	e009      	b.n	80022b0 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7ff fbd6 	bl	8001a4c <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	4a47      	ldr	r2, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x69c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0b5      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80022b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d1ef      	bne.n	800229c <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022bc:	2323      	movs	r3, #35	; 0x23
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80022c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80022cc:	493e      	ldr	r1, [pc, #248]	; (80023c8 <HAL_RCC_OscConfig+0x6a0>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d100      	bne.n	80022dc <HAL_RCC_OscConfig+0x5b4>
 80022da:	e09e      	b.n	800241a <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d100      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5bc>
 80022e2:	e077      	b.n	80023d4 <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d145      	bne.n	8002378 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80022f2:	4936      	ldr	r1, [pc, #216]	; (80023cc <HAL_RCC_OscConfig+0x6a4>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fba8 	bl	8001a4c <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff fba3 	bl	8001a4c <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e083      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	049b      	lsls	r3, r3, #18
 800231c:	4013      	ands	r3, r2
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <HAL_RCC_OscConfig+0x6a8>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	431a      	orrs	r2, r3
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 8002346:	2180      	movs	r1, #128	; 0x80
 8002348:	0449      	lsls	r1, r1, #17
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7ff fb7d 	bl	8001a4c <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff fb78 	bl	8001a4c <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e058      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	049b      	lsls	r3, r3, #18
 8002372:	4013      	ands	r3, r2
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x630>
 8002376:	e050      	b.n	800241a <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 800237e:	4913      	ldr	r1, [pc, #76]	; (80023cc <HAL_RCC_OscConfig+0x6a4>)
 8002380:	400a      	ands	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fb62 	bl	8001a4c <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff fb5d 	bl	8001a4c <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e03d      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_RCC_OscConfig+0x688>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	049b      	lsls	r3, r3, #18
 80023a8:	4013      	ands	r3, r2
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x666>
 80023ac:	e035      	b.n	800241a <HAL_RCC_OscConfig+0x6f2>
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	ffff1fff 	.word	0xffff1fff
 80023b8:	fffffeff 	.word	0xfffffeff
 80023bc:	40007000 	.word	0x40007000
 80023c0:	fffffbff 	.word	0xfffffbff
 80023c4:	00001388 	.word	0x00001388
 80023c8:	efffffff 	.word	0xefffffff
 80023cc:	feffffff 	.word	0xfeffffff
 80023d0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x6fc>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10f      	bne.n	8002416 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	23f0      	movs	r3, #240	; 0xf0
 80023fa:	039b      	lsls	r3, r3, #14
 80023fc:	401a      	ands	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	23c0      	movs	r3, #192	; 0xc0
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	401a      	ands	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b00a      	add	sp, #40	; 0x28
 8002422:	bdb0      	pop	{r4, r5, r7, pc}
 8002424:	40021000 	.word	0x40021000

08002428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e129      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b96      	ldr	r3, [pc, #600]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d91e      	bls.n	8002488 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b93      	ldr	r3, [pc, #588]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	4393      	bics	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	4b90      	ldr	r3, [pc, #576]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800245c:	f7ff faf6 	bl	8001a4c <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002464:	e009      	b.n	800247a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002466:	f7ff faf1 	bl	8001a4c <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4a8a      	ldr	r2, [pc, #552]	; (800269c <HAL_RCC_ClockConfig+0x274>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e10a      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b87      	ldr	r3, [pc, #540]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	4013      	ands	r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2202      	movs	r2, #2
 800248e:	4013      	ands	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002492:	4b83      	ldr	r3, [pc, #524]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	22f0      	movs	r2, #240	; 0xf0
 8002498:	4393      	bics	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d100      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x8a>
 80024b0:	e089      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ba:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	029b      	lsls	r3, r3, #10
 80024c2:	4013      	ands	r3, r2
 80024c4:	d120      	bne.n	8002508 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0e2      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024d2:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	049b      	lsls	r3, r3, #18
 80024da:	4013      	ands	r3, r2
 80024dc:	d114      	bne.n	8002508 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0d6      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	d109      	bne.n	8002508 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0cb      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0c3      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002508:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2203      	movs	r2, #3
 800250e:	4393      	bics	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4b62      	ldr	r3, [pc, #392]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7ff fa96 	bl	8001a4c <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d111      	bne.n	8002550 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800252c:	e009      	b.n	8002542 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252e:	f7ff fa8d 	bl	8001a4c <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x274>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0a6      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	220c      	movs	r2, #12
 8002548:	4013      	ands	r3, r2
 800254a:	2b08      	cmp	r3, #8
 800254c:	d1ef      	bne.n	800252e <HAL_RCC_ClockConfig+0x106>
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d111      	bne.n	800257c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	e009      	b.n	800256e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255a:	f7ff fa77 	bl	8001a4c <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4a4d      	ldr	r2, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x274>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e090      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	220c      	movs	r2, #12
 8002574:	4013      	ands	r3, r2
 8002576:	2b0c      	cmp	r3, #12
 8002578:	d1ef      	bne.n	800255a <HAL_RCC_ClockConfig+0x132>
 800257a:	e024      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d11b      	bne.n	80025bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002584:	e009      	b.n	800259a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002586:	f7ff fa61 	bl	8001a4c <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	4a42      	ldr	r2, [pc, #264]	; (800269c <HAL_RCC_ClockConfig+0x274>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e07a      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	220c      	movs	r2, #12
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d1ef      	bne.n	8002586 <HAL_RCC_ClockConfig+0x15e>
 80025a6:	e00e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7ff fa50 	bl	8001a4c <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	4a3a      	ldr	r2, [pc, #232]	; (800269c <HAL_RCC_ClockConfig+0x274>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e069      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025bc:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	220c      	movs	r2, #12
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d21e      	bcs.n	8002612 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	4393      	bics	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025e6:	f7ff fa31 	bl	8001a4c <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	e009      	b.n	8002604 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7ff fa2c 	bl	8001a4c <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <HAL_RCC_ClockConfig+0x274>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e045      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_ClockConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	4013      	ands	r3, r2
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d1ee      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2204      	movs	r2, #4
 8002618:	4013      	ands	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_RCC_ClockConfig+0x27c>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2208      	movs	r2, #8
 8002636:	4013      	ands	r3, r2
 8002638:	d00a      	beq.n	8002650 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_RCC_ClockConfig+0x280>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00da      	lsls	r2, r3, #3
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 800264c:	430a      	orrs	r2, r1
 800264e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002650:	f000 f832 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002654:	0001      	movs	r1, r0
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x278>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	220f      	movs	r2, #15
 800265e:	4013      	ands	r3, r2
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x284>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	000a      	movs	r2, r1
 8002666:	40da      	lsrs	r2, r3
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_ClockConfig+0x288>)
 800266a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_ClockConfig+0x28c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	250b      	movs	r5, #11
 8002672:	197c      	adds	r4, r7, r5
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff f9a3 	bl	80019c0 <HAL_InitTick>
 800267a:	0003      	movs	r3, r0
 800267c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800267e:	197b      	adds	r3, r7, r5
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8002686:	230b      	movs	r3, #11
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	e000      	b.n	8002690 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bdb0      	pop	{r4, r5, r7, pc}
 8002698:	40022000 	.word	0x40022000
 800269c:	00001388 	.word	0x00001388
 80026a0:	40021000 	.word	0x40021000
 80026a4:	fffff8ff 	.word	0xfffff8ff
 80026a8:	ffffc7ff 	.word	0xffffc7ff
 80026ac:	080033f4 	.word	0x080033f4
 80026b0:	20000028 	.word	0x20000028
 80026b4:	2000002c 	.word	0x2000002c

080026b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ba:	b08f      	sub	sp, #60	; 0x3c
 80026bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x130>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c6:	230c      	movs	r3, #12
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d00f      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x36>
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d010      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x3c>
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d000      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x20>
 80026d6:	e073      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026d8:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x130>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	4013      	ands	r3, r2
 80026e0:	d002      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_RCC_GetSysClockFreq+0x134>)
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80026e6:	e079      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026ec:	e076      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026f2:	e073      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	0c9a      	lsrs	r2, r3, #18
 80026f8:	230f      	movs	r3, #15
 80026fa:	401a      	ands	r2, r3
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80026fe:	5c9b      	ldrb	r3, [r3, r2]
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	0d9a      	lsrs	r2, r3, #22
 8002706:	2303      	movs	r3, #3
 8002708:	4013      	ands	r3, r2
 800270a:	3301      	adds	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	025b      	lsls	r3, r3, #9
 8002716:	4013      	ands	r3, r2
 8002718:	d019      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002724:	2300      	movs	r3, #0
 8002726:	69b8      	ldr	r0, [r7, #24]
 8002728:	69f9      	ldr	r1, [r7, #28]
 800272a:	f7fd fdd3 	bl	80002d4 <__aeabi_lmul>
 800272e:	0003      	movs	r3, r0
 8002730:	000c      	movs	r4, r1
 8002732:	0018      	movs	r0, r3
 8002734:	0021      	movs	r1, r4
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f7fd fda7 	bl	8000294 <__aeabi_uldivmod>
 8002746:	0003      	movs	r3, r0
 8002748:	000c      	movs	r4, r1
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
 800274c:	e035      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2210      	movs	r2, #16
 8002754:	4013      	ands	r3, r2
 8002756:	d019      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	4a22      	ldr	r2, [pc, #136]	; (80027ec <HAL_RCC_GetSysClockFreq+0x134>)
 8002762:	2300      	movs	r3, #0
 8002764:	68b8      	ldr	r0, [r7, #8]
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	f7fd fdb4 	bl	80002d4 <__aeabi_lmul>
 800276c:	0003      	movs	r3, r0
 800276e:	000c      	movs	r4, r1
 8002770:	0018      	movs	r0, r3
 8002772:	0021      	movs	r1, r4
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f7fd fd88 	bl	8000294 <__aeabi_uldivmod>
 8002784:	0003      	movs	r3, r0
 8002786:	000c      	movs	r4, r1
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
 800278a:	e016      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	0018      	movs	r0, r3
 8002790:	2300      	movs	r3, #0
 8002792:	0019      	movs	r1, r3
 8002794:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002796:	2300      	movs	r3, #0
 8002798:	f7fd fd9c 	bl	80002d4 <__aeabi_lmul>
 800279c:	0003      	movs	r3, r0
 800279e:	000c      	movs	r4, r1
 80027a0:	0018      	movs	r0, r3
 80027a2:	0021      	movs	r1, r4
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	001d      	movs	r5, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	001e      	movs	r6, r3
 80027ac:	002a      	movs	r2, r5
 80027ae:	0033      	movs	r3, r6
 80027b0:	f7fd fd70 	bl	8000294 <__aeabi_uldivmod>
 80027b4:	0003      	movs	r3, r0
 80027b6:	000c      	movs	r4, r1
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027be:	e00d      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x130>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0b5b      	lsrs	r3, r3, #13
 80027c6:	2207      	movs	r2, #7
 80027c8:	4013      	ands	r3, r2
 80027ca:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	3301      	adds	r3, #1
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	0212      	lsls	r2, r2, #8
 80027d4:	409a      	lsls	r2, r3
 80027d6:	0013      	movs	r3, r2
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b00f      	add	sp, #60	; 0x3c
 80027e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40021000 	.word	0x40021000
 80027ec:	003d0900 	.word	0x003d0900
 80027f0:	00f42400 	.word	0x00f42400
 80027f4:	007a1200 	.word	0x007a1200
 80027f8:	08003404 	.word	0x08003404

080027fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002804:	2317      	movs	r3, #23
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2220      	movs	r2, #32
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002816:	e0c3      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002818:	4b91      	ldr	r3, [pc, #580]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800281a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	055b      	lsls	r3, r3, #21
 8002820:	4013      	ands	r3, r2
 8002822:	d10a      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	4b8e      	ldr	r3, [pc, #568]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002828:	4b8d      	ldr	r3, [pc, #564]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	0549      	lsls	r1, r1, #21
 800282e:	430a      	orrs	r2, r1
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002832:	2317      	movs	r3, #23
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b8a      	ldr	r3, [pc, #552]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4013      	ands	r3, r2
 8002844:	d11a      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b87      	ldr	r3, [pc, #540]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b86      	ldr	r3, [pc, #536]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	0049      	lsls	r1, r1, #1
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002854:	f7ff f8fa 	bl	8001a4c <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	e008      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7ff f8f5 	bl	8001a4c <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0f3      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d0f0      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800287c:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	23c0      	movs	r3, #192	; 0xc0
 8002882:	039b      	lsls	r3, r3, #14
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	23c0      	movs	r3, #192	; 0xc0
 800288e:	039b      	lsls	r3, r3, #14
 8002890:	4013      	ands	r3, r2
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d013      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	23c0      	movs	r3, #192	; 0xc0
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	401a      	ands	r2, r3
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	029b      	lsls	r3, r3, #10
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10a      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80028aa:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	029b      	lsls	r3, r3, #10
 80028b2:	401a      	ands	r2, r3
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	029b      	lsls	r3, r3, #10
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d101      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0cb      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80028c0:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c4:	23c0      	movs	r3, #192	; 0xc0
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d03b      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	23c0      	movs	r3, #192	; 0xc0
 80028d8:	029b      	lsls	r3, r3, #10
 80028da:	4013      	ands	r3, r2
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d033      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2220      	movs	r2, #32
 80028e8:	4013      	ands	r3, r2
 80028ea:	d02e      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80028ec:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	4a5d      	ldr	r2, [pc, #372]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028f6:	4b5a      	ldr	r3, [pc, #360]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028fa:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	0309      	lsls	r1, r1, #12
 8002900:	430a      	orrs	r2, r1
 8002902:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002904:	4b56      	ldr	r3, [pc, #344]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290a:	4958      	ldr	r1, [pc, #352]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800290c:	400a      	ands	r2, r1
 800290e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4013      	ands	r3, r2
 800291e:	d014      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff f894 	bl	8001a4c <HAL_GetTick>
 8002924:	0003      	movs	r3, r0
 8002926:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002928:	e009      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7ff f88f 	bl	8001a4c <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	4a4e      	ldr	r2, [pc, #312]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e08c      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800293e:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4013      	ands	r3, r2
 8002948:	d0ef      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	401a      	ands	r2, r3
 8002954:	23c0      	movs	r3, #192	; 0xc0
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	429a      	cmp	r2, r3
 800295a:	d10c      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800295c:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a44      	ldr	r2, [pc, #272]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002962:	4013      	ands	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	23c0      	movs	r3, #192	; 0xc0
 800296c:	039b      	lsls	r3, r3, #14
 800296e:	401a      	ands	r2, r3
 8002970:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002978:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	401a      	ands	r2, r3
 8002984:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002986:	430a      	orrs	r2, r1
 8002988:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800298a:	2317      	movs	r3, #23
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002998:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800299a:	4937      	ldr	r1, [pc, #220]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800299c:	400a      	ands	r2, r1
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	2203      	movs	r2, #3
 80029b0:	4393      	bics	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	220c      	movs	r2, #12
 80029ce:	4393      	bics	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2204      	movs	r2, #4
 80029e2:	4013      	ands	r3, r2
 80029e4:	d009      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029f6:	430a      	orrs	r2, r1
 80029f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2208      	movs	r2, #8
 8002a00:	4013      	ands	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a14:	430a      	orrs	r2, r1
 8002a16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b006      	add	sp, #24
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	fffcffff 	.word	0xfffcffff
 8002a6c:	fff7ffff 	.word	0xfff7ffff
 8002a70:	00001388 	.word	0x00001388
 8002a74:	ffcfffff 	.word	0xffcfffff
 8002a78:	efffffff 	.word	0xefffffff
 8002a7c:	fffff3ff 	.word	0xfffff3ff
 8002a80:	ffffcfff 	.word	0xffffcfff
 8002a84:	fff3ffff 	.word	0xfff3ffff

08002a88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e08e      	b.n	8002bb8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fe fe09 	bl	80016c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	2102      	movs	r1, #2
 8002abc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	22ca      	movs	r2, #202	; 0xca
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2253      	movs	r2, #83	; 0x53
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f89e 	bl	8002c12 <RTC_EnterInitMode>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	22ff      	movs	r2, #255	; 0xff
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2221      	movs	r2, #33	; 0x21
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e064      	b.n	8002bb8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4931      	ldr	r1, [pc, #196]	; (8002bc0 <HAL_RTC_Init+0x138>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68d2      	ldr	r2, [r2, #12]
 8002b24:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6919      	ldr	r1, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	438a      	bics	r2, r1
 8002b48:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2103      	movs	r1, #3
 8002b56:	438a      	bics	r2, r1
 8002b58:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d113      	bne.n	8002ba6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f81f 	bl	8002bc4 <HAL_RTC_WaitForSynchro>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d00d      	beq.n	8002ba6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2221      	movs	r2, #33	; 0x21
 8002b96:	2104      	movs	r1, #4
 8002b98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e008      	b.n	8002bb8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2221      	movs	r2, #33	; 0x21
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
  }
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	ff8fffbf 	.word	0xff8fffbf

08002bc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	21a0      	movs	r1, #160	; 0xa0
 8002bd8:	438a      	bics	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bdc:	f7fe ff36 	bl	8001a4c <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002be4:	e00a      	b.n	8002bfc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002be6:	f7fe ff31 	bl	8001a4c <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad2      	subs	r2, r2, r3
 8002bf0:	23fa      	movs	r3, #250	; 0xfa
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d901      	bls.n	8002bfc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e006      	b.n	8002c0a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	4013      	ands	r3, r2
 8002c06:	d0ee      	beq.n	8002be6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b004      	add	sp, #16
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2240      	movs	r2, #64	; 0x40
 8002c22:	4013      	ands	r3, r2
 8002c24:	d11a      	bne.n	8002c5c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4252      	negs	r2, r2
 8002c2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c30:	f7fe ff0c 	bl	8001a4c <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c38:	e00a      	b.n	8002c50 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002c3a:	f7fe ff07 	bl	8001a4c <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	23fa      	movs	r3, #250	; 0xfa
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d901      	bls.n	8002c50 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e006      	b.n	8002c5e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0ee      	beq.n	8002c3a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	5c9b      	ldrb	r3, [r3, r2]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e0ad      	b.n	8002dde <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2221      	movs	r2, #33	; 0x21
 8002c8e:	2102      	movs	r1, #2
 8002c90:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	22ca      	movs	r2, #202	; 0xca
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2253      	movs	r2, #83	; 0x53
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4013      	ands	r3, r2
 8002cae:	d021      	beq.n	8002cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fecc 	bl	8001a4c <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002cb8:	e016      	b.n	8002ce8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cba:	f7fe fec7 	bl	8001a4c <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	23fa      	movs	r3, #250	; 0xfa
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d90d      	bls.n	8002ce8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	22ff      	movs	r2, #255	; 0xff
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2221      	movs	r2, #33	; 0x21
 8002cd8:	2103      	movs	r1, #3
 8002cda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e07a      	b.n	8002dde <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d1e2      	bne.n	8002cba <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	493a      	ldr	r1, [pc, #232]	; (8002de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	22ff      	movs	r2, #255	; 0xff
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4936      	ldr	r1, [pc, #216]	; (8002dec <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002d18:	f7fe fe98 	bl	8001a4c <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d20:	e016      	b.n	8002d50 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d22:	f7fe fe93 	bl	8001a4c <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1ad2      	subs	r2, r2, r3
 8002d2c:	23fa      	movs	r3, #250	; 0xfa
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d90d      	bls.n	8002d50 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2221      	movs	r2, #33	; 0x21
 8002d40:	2103      	movs	r1, #3
 8002d42:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e046      	b.n	8002dde <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d0e2      	beq.n	8002d22 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2107      	movs	r1, #7
 8002d70:	438a      	bics	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	0349      	lsls	r1, r1, #13
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	0349      	lsls	r1, r1, #13
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	01c9      	lsls	r1, r1, #7
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	00c9      	lsls	r1, r1, #3
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2221      	movs	r2, #33	; 0x21
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b006      	add	sp, #24
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	fffffbff 	.word	0xfffffbff
 8002dec:	fffffb7f 	.word	0xfffffb7f
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e04e      	b.n	8002ea8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2221      	movs	r2, #33	; 0x21
 8002e16:	2102      	movs	r1, #2
 8002e18:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	22ca      	movs	r2, #202	; 0xca
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2253      	movs	r2, #83	; 0x53
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	491e      	ldr	r1, [pc, #120]	; (8002eb0 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8002e36:	400a      	ands	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	491b      	ldr	r1, [pc, #108]	; (8002eb4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002e4a:	f7fe fdff 	bl	8001a4c <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002e52:	e016      	b.n	8002e82 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e54:	f7fe fdfa 	bl	8001a4c <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad2      	subs	r2, r2, r3
 8002e5e:	23fa      	movs	r3, #250	; 0xfa
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d90d      	bls.n	8002e82 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	22ff      	movs	r2, #255	; 0xff
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2221      	movs	r2, #33	; 0x21
 8002e72:	2103      	movs	r1, #3
 8002e74:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e012      	b.n	8002ea8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2204      	movs	r2, #4
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d0e2      	beq.n	8002e54 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2221      	movs	r2, #33	; 0x21
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b004      	add	sp, #16
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	fffffbff 	.word	0xfffffbff
 8002eb4:	ffffbfff 	.word	0xffffbfff

08002eb8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d00d      	beq.n	8002eea <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fe fbd3 	bl	800167c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4907      	ldr	r1, [pc, #28]	; (8002f04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	0352      	lsls	r2, r2, #13
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2221      	movs	r2, #33	; 0x21
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	fffffb7f 	.word	0xfffffb7f
 8002f08:	40010400 	.word	0x40010400

08002f0c <__errno>:
 8002f0c:	4b01      	ldr	r3, [pc, #4]	; (8002f14 <__errno+0x8>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	4770      	bx	lr
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	20000034 	.word	0x20000034

08002f18 <__libc_init_array>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	2600      	movs	r6, #0
 8002f1c:	4d0c      	ldr	r5, [pc, #48]	; (8002f50 <__libc_init_array+0x38>)
 8002f1e:	4c0d      	ldr	r4, [pc, #52]	; (8002f54 <__libc_init_array+0x3c>)
 8002f20:	1b64      	subs	r4, r4, r5
 8002f22:	10a4      	asrs	r4, r4, #2
 8002f24:	42a6      	cmp	r6, r4
 8002f26:	d109      	bne.n	8002f3c <__libc_init_array+0x24>
 8002f28:	2600      	movs	r6, #0
 8002f2a:	f000 f9d9 	bl	80032e0 <_init>
 8002f2e:	4d0a      	ldr	r5, [pc, #40]	; (8002f58 <__libc_init_array+0x40>)
 8002f30:	4c0a      	ldr	r4, [pc, #40]	; (8002f5c <__libc_init_array+0x44>)
 8002f32:	1b64      	subs	r4, r4, r5
 8002f34:	10a4      	asrs	r4, r4, #2
 8002f36:	42a6      	cmp	r6, r4
 8002f38:	d105      	bne.n	8002f46 <__libc_init_array+0x2e>
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	00b3      	lsls	r3, r6, #2
 8002f3e:	58eb      	ldr	r3, [r5, r3]
 8002f40:	4798      	blx	r3
 8002f42:	3601      	adds	r6, #1
 8002f44:	e7ee      	b.n	8002f24 <__libc_init_array+0xc>
 8002f46:	00b3      	lsls	r3, r6, #2
 8002f48:	58eb      	ldr	r3, [r5, r3]
 8002f4a:	4798      	blx	r3
 8002f4c:	3601      	adds	r6, #1
 8002f4e:	e7f2      	b.n	8002f36 <__libc_init_array+0x1e>
 8002f50:	0800341c 	.word	0x0800341c
 8002f54:	0800341c 	.word	0x0800341c
 8002f58:	0800341c 	.word	0x0800341c
 8002f5c:	08003420 	.word	0x08003420

08002f60 <memset>:
 8002f60:	0003      	movs	r3, r0
 8002f62:	1812      	adds	r2, r2, r0
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d100      	bne.n	8002f6a <memset+0xa>
 8002f68:	4770      	bx	lr
 8002f6a:	7019      	strb	r1, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	e7f9      	b.n	8002f64 <memset+0x4>

08002f70 <logf>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	2500      	movs	r5, #0
 8002f74:	b08c      	sub	sp, #48	; 0x30
 8002f76:	1c04      	adds	r4, r0, #0
 8002f78:	f000 f872 	bl	8003060 <__ieee754_logf>
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <logf+0xdc>)
 8002f7e:	1c06      	adds	r6, r0, #0
 8002f80:	575d      	ldrsb	r5, [r3, r5]
 8002f82:	1c6b      	adds	r3, r5, #1
 8002f84:	d05e      	beq.n	8003044 <logf+0xd4>
 8002f86:	1c21      	adds	r1, r4, #0
 8002f88:	1c20      	adds	r0, r4, #0
 8002f8a:	f7fe f8f7 	bl	800117c <__aeabi_fcmpun>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d158      	bne.n	8003044 <logf+0xd4>
 8002f92:	2100      	movs	r1, #0
 8002f94:	1c20      	adds	r0, r4, #0
 8002f96:	f7fd f969 	bl	800026c <__aeabi_fcmpgt>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d152      	bne.n	8003044 <logf+0xd4>
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <logf+0xe0>)
 8002fa0:	900a      	str	r0, [sp, #40]	; 0x28
 8002fa2:	1c20      	adds	r0, r4, #0
 8002fa4:	9303      	str	r3, [sp, #12]
 8002fa6:	f7fe f949 	bl	800123c <__aeabi_f2d>
 8002faa:	9006      	str	r0, [sp, #24]
 8002fac:	9107      	str	r1, [sp, #28]
 8002fae:	9004      	str	r0, [sp, #16]
 8002fb0:	9105      	str	r1, [sp, #20]
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	d113      	bne.n	8002fde <logf+0x6e>
 8002fb6:	22e0      	movs	r2, #224	; 0xe0
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <logf+0xe4>)
 8002fba:	0612      	lsls	r2, r2, #24
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	1c20      	adds	r0, r4, #0
 8002fc0:	9208      	str	r2, [sp, #32]
 8002fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8002fc4:	f7fd f938 	bl	8000238 <__aeabi_fcmpeq>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d126      	bne.n	800301a <logf+0xaa>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	2d02      	cmp	r5, #2
 8002fd2:	d117      	bne.n	8003004 <logf+0x94>
 8002fd4:	f7ff ff9a 	bl	8002f0c <__errno>
 8002fd8:	2321      	movs	r3, #33	; 0x21
 8002fda:	6003      	str	r3, [r0, #0]
 8002fdc:	e017      	b.n	800300e <logf+0x9e>
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <logf+0xe8>)
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	1c20      	adds	r0, r4, #0
 8002fe6:	9208      	str	r2, [sp, #32]
 8002fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8002fea:	f7fd f925 	bl	8000238 <__aeabi_fcmpeq>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d0ec      	beq.n	8002fcc <logf+0x5c>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	429d      	cmp	r5, r3
 8002ff8:	d111      	bne.n	800301e <logf+0xae>
 8002ffa:	f7ff ff87 	bl	8002f0c <__errno>
 8002ffe:	2322      	movs	r3, #34	; 0x22
 8003000:	6003      	str	r3, [r0, #0]
 8003002:	e011      	b.n	8003028 <logf+0xb8>
 8003004:	a802      	add	r0, sp, #8
 8003006:	f000 f963 	bl	80032d0 <matherr>
 800300a:	2800      	cmp	r0, #0
 800300c:	d0e2      	beq.n	8002fd4 <logf+0x64>
 800300e:	4813      	ldr	r0, [pc, #76]	; (800305c <logf+0xec>)
 8003010:	f000 f960 	bl	80032d4 <nan>
 8003014:	9008      	str	r0, [sp, #32]
 8003016:	9109      	str	r1, [sp, #36]	; 0x24
 8003018:	e006      	b.n	8003028 <logf+0xb8>
 800301a:	2302      	movs	r3, #2
 800301c:	9302      	str	r3, [sp, #8]
 800301e:	a802      	add	r0, sp, #8
 8003020:	f000 f956 	bl	80032d0 <matherr>
 8003024:	2800      	cmp	r0, #0
 8003026:	d0e8      	beq.n	8002ffa <logf+0x8a>
 8003028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <logf+0xca>
 8003030:	f7ff ff6c 	bl	8002f0c <__errno>
 8003034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	6003      	str	r3, [r0, #0]
 800303a:	9808      	ldr	r0, [sp, #32]
 800303c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800303e:	f7fe f94f 	bl	80012e0 <__aeabi_d2f>
 8003042:	1c06      	adds	r6, r0, #0
 8003044:	1c30      	adds	r0, r6, #0
 8003046:	b00c      	add	sp, #48	; 0x30
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	20000098 	.word	0x20000098
 8003050:	0800340d 	.word	0x0800340d
 8003054:	c7efffff 	.word	0xc7efffff
 8003058:	fff00000 	.word	0xfff00000
 800305c:	08003411 	.word	0x08003411

08003060 <__ieee754_logf>:
 8003060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003062:	0003      	movs	r3, r0
 8003064:	b085      	sub	sp, #20
 8003066:	0042      	lsls	r2, r0, #1
 8003068:	d106      	bne.n	8003078 <__ieee754_logf+0x18>
 800306a:	20cc      	movs	r0, #204	; 0xcc
 800306c:	2100      	movs	r1, #0
 800306e:	0600      	lsls	r0, r0, #24
 8003070:	f7fd fbb6 	bl	80007e0 <__aeabi_fdiv>
 8003074:	b005      	add	sp, #20
 8003076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003078:	2800      	cmp	r0, #0
 800307a:	da04      	bge.n	8003086 <__ieee754_logf+0x26>
 800307c:	1c01      	adds	r1, r0, #0
 800307e:	f7fd feb9 	bl	8000df4 <__aeabi_fsub>
 8003082:	2100      	movs	r1, #0
 8003084:	e7f4      	b.n	8003070 <__ieee754_logf+0x10>
 8003086:	4a83      	ldr	r2, [pc, #524]	; (8003294 <__ieee754_logf+0x234>)
 8003088:	1c01      	adds	r1, r0, #0
 800308a:	4290      	cmp	r0, r2
 800308c:	dc3d      	bgt.n	800310a <__ieee754_logf+0xaa>
 800308e:	4982      	ldr	r1, [pc, #520]	; (8003298 <__ieee754_logf+0x238>)
 8003090:	2200      	movs	r2, #0
 8003092:	4288      	cmp	r0, r1
 8003094:	dc06      	bgt.n	80030a4 <__ieee754_logf+0x44>
 8003096:	2198      	movs	r1, #152	; 0x98
 8003098:	05c9      	lsls	r1, r1, #23
 800309a:	f7fd fd79 	bl	8000b90 <__aeabi_fmul>
 800309e:	2219      	movs	r2, #25
 80030a0:	0003      	movs	r3, r0
 80030a2:	4252      	negs	r2, r2
 80030a4:	15dd      	asrs	r5, r3, #23
 80030a6:	3d7f      	subs	r5, #127	; 0x7f
 80030a8:	18ad      	adds	r5, r5, r2
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	4a7b      	ldr	r2, [pc, #492]	; (800329c <__ieee754_logf+0x23c>)
 80030ae:	0a5b      	lsrs	r3, r3, #9
 80030b0:	1898      	adds	r0, r3, r2
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	4003      	ands	r3, r0
 80030ba:	20fe      	movs	r0, #254	; 0xfe
 80030bc:	21fe      	movs	r1, #254	; 0xfe
 80030be:	0580      	lsls	r0, r0, #22
 80030c0:	15da      	asrs	r2, r3, #23
 80030c2:	4058      	eors	r0, r3
 80030c4:	9b00      	ldr	r3, [sp, #0]
 80030c6:	0589      	lsls	r1, r1, #22
 80030c8:	4318      	orrs	r0, r3
 80030ca:	1955      	adds	r5, r2, r5
 80030cc:	f7fd fe92 	bl	8000df4 <__aeabi_fsub>
 80030d0:	9b00      	ldr	r3, [sp, #0]
 80030d2:	1c04      	adds	r4, r0, #0
 80030d4:	330f      	adds	r3, #15
 80030d6:	025b      	lsls	r3, r3, #9
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	dc47      	bgt.n	800316e <__ieee754_logf+0x10e>
 80030de:	2100      	movs	r1, #0
 80030e0:	f7fd f8aa 	bl	8000238 <__aeabi_fcmpeq>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d013      	beq.n	8003110 <__ieee754_logf+0xb0>
 80030e8:	2000      	movs	r0, #0
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	d0c2      	beq.n	8003074 <__ieee754_logf+0x14>
 80030ee:	0028      	movs	r0, r5
 80030f0:	f7fe f85a 	bl	80011a8 <__aeabi_i2f>
 80030f4:	496a      	ldr	r1, [pc, #424]	; (80032a0 <__ieee754_logf+0x240>)
 80030f6:	1c04      	adds	r4, r0, #0
 80030f8:	f7fd fd4a 	bl	8000b90 <__aeabi_fmul>
 80030fc:	4969      	ldr	r1, [pc, #420]	; (80032a4 <__ieee754_logf+0x244>)
 80030fe:	1c05      	adds	r5, r0, #0
 8003100:	1c20      	adds	r0, r4, #0
 8003102:	f7fd fd45 	bl	8000b90 <__aeabi_fmul>
 8003106:	1c01      	adds	r1, r0, #0
 8003108:	1c28      	adds	r0, r5, #0
 800310a:	f7fd f9cf 	bl	80004ac <__aeabi_fadd>
 800310e:	e7b1      	b.n	8003074 <__ieee754_logf+0x14>
 8003110:	4965      	ldr	r1, [pc, #404]	; (80032a8 <__ieee754_logf+0x248>)
 8003112:	1c20      	adds	r0, r4, #0
 8003114:	f7fd fd3c 	bl	8000b90 <__aeabi_fmul>
 8003118:	1c01      	adds	r1, r0, #0
 800311a:	20fc      	movs	r0, #252	; 0xfc
 800311c:	0580      	lsls	r0, r0, #22
 800311e:	f7fd fe69 	bl	8000df4 <__aeabi_fsub>
 8003122:	1c21      	adds	r1, r4, #0
 8003124:	1c06      	adds	r6, r0, #0
 8003126:	1c20      	adds	r0, r4, #0
 8003128:	f7fd fd32 	bl	8000b90 <__aeabi_fmul>
 800312c:	1c01      	adds	r1, r0, #0
 800312e:	1c30      	adds	r0, r6, #0
 8003130:	f7fd fd2e 	bl	8000b90 <__aeabi_fmul>
 8003134:	1c06      	adds	r6, r0, #0
 8003136:	2d00      	cmp	r5, #0
 8003138:	d101      	bne.n	800313e <__ieee754_logf+0xde>
 800313a:	1c31      	adds	r1, r6, #0
 800313c:	e07c      	b.n	8003238 <__ieee754_logf+0x1d8>
 800313e:	0028      	movs	r0, r5
 8003140:	f7fe f832 	bl	80011a8 <__aeabi_i2f>
 8003144:	4956      	ldr	r1, [pc, #344]	; (80032a0 <__ieee754_logf+0x240>)
 8003146:	1c05      	adds	r5, r0, #0
 8003148:	f7fd fd22 	bl	8000b90 <__aeabi_fmul>
 800314c:	4955      	ldr	r1, [pc, #340]	; (80032a4 <__ieee754_logf+0x244>)
 800314e:	1c07      	adds	r7, r0, #0
 8003150:	1c28      	adds	r0, r5, #0
 8003152:	f7fd fd1d 	bl	8000b90 <__aeabi_fmul>
 8003156:	1c01      	adds	r1, r0, #0
 8003158:	1c30      	adds	r0, r6, #0
 800315a:	f7fd fe4b 	bl	8000df4 <__aeabi_fsub>
 800315e:	1c21      	adds	r1, r4, #0
 8003160:	f7fd fe48 	bl	8000df4 <__aeabi_fsub>
 8003164:	1c01      	adds	r1, r0, #0
 8003166:	1c38      	adds	r0, r7, #0
 8003168:	f7fd fe44 	bl	8000df4 <__aeabi_fsub>
 800316c:	e782      	b.n	8003074 <__ieee754_logf+0x14>
 800316e:	2180      	movs	r1, #128	; 0x80
 8003170:	05c9      	lsls	r1, r1, #23
 8003172:	f7fd f99b 	bl	80004ac <__aeabi_fadd>
 8003176:	1c01      	adds	r1, r0, #0
 8003178:	1c20      	adds	r0, r4, #0
 800317a:	f7fd fb31 	bl	80007e0 <__aeabi_fdiv>
 800317e:	9001      	str	r0, [sp, #4]
 8003180:	0028      	movs	r0, r5
 8003182:	f7fe f811 	bl	80011a8 <__aeabi_i2f>
 8003186:	9901      	ldr	r1, [sp, #4]
 8003188:	9002      	str	r0, [sp, #8]
 800318a:	1c08      	adds	r0, r1, #0
 800318c:	f7fd fd00 	bl	8000b90 <__aeabi_fmul>
 8003190:	4a46      	ldr	r2, [pc, #280]	; (80032ac <__ieee754_logf+0x24c>)
 8003192:	9b00      	ldr	r3, [sp, #0]
 8003194:	4694      	mov	ip, r2
 8003196:	1c01      	adds	r1, r0, #0
 8003198:	4463      	add	r3, ip
 800319a:	9303      	str	r3, [sp, #12]
 800319c:	1c07      	adds	r7, r0, #0
 800319e:	f7fd fcf7 	bl	8000b90 <__aeabi_fmul>
 80031a2:	4943      	ldr	r1, [pc, #268]	; (80032b0 <__ieee754_logf+0x250>)
 80031a4:	1c06      	adds	r6, r0, #0
 80031a6:	f7fd fcf3 	bl	8000b90 <__aeabi_fmul>
 80031aa:	4942      	ldr	r1, [pc, #264]	; (80032b4 <__ieee754_logf+0x254>)
 80031ac:	f7fd f97e 	bl	80004ac <__aeabi_fadd>
 80031b0:	1c31      	adds	r1, r6, #0
 80031b2:	f7fd fced 	bl	8000b90 <__aeabi_fmul>
 80031b6:	4940      	ldr	r1, [pc, #256]	; (80032b8 <__ieee754_logf+0x258>)
 80031b8:	f7fd f978 	bl	80004ac <__aeabi_fadd>
 80031bc:	1c31      	adds	r1, r6, #0
 80031be:	f7fd fce7 	bl	8000b90 <__aeabi_fmul>
 80031c2:	493e      	ldr	r1, [pc, #248]	; (80032bc <__ieee754_logf+0x25c>)
 80031c4:	f7fd f972 	bl	80004ac <__aeabi_fadd>
 80031c8:	1c39      	adds	r1, r7, #0
 80031ca:	f7fd fce1 	bl	8000b90 <__aeabi_fmul>
 80031ce:	493c      	ldr	r1, [pc, #240]	; (80032c0 <__ieee754_logf+0x260>)
 80031d0:	1c07      	adds	r7, r0, #0
 80031d2:	1c30      	adds	r0, r6, #0
 80031d4:	f7fd fcdc 	bl	8000b90 <__aeabi_fmul>
 80031d8:	493a      	ldr	r1, [pc, #232]	; (80032c4 <__ieee754_logf+0x264>)
 80031da:	f7fd f967 	bl	80004ac <__aeabi_fadd>
 80031de:	1c31      	adds	r1, r6, #0
 80031e0:	f7fd fcd6 	bl	8000b90 <__aeabi_fmul>
 80031e4:	4938      	ldr	r1, [pc, #224]	; (80032c8 <__ieee754_logf+0x268>)
 80031e6:	f7fd f961 	bl	80004ac <__aeabi_fadd>
 80031ea:	1c31      	adds	r1, r6, #0
 80031ec:	f7fd fcd0 	bl	8000b90 <__aeabi_fmul>
 80031f0:	1c01      	adds	r1, r0, #0
 80031f2:	1c38      	adds	r0, r7, #0
 80031f4:	f7fd f95a 	bl	80004ac <__aeabi_fadd>
 80031f8:	9b00      	ldr	r3, [sp, #0]
 80031fa:	1c07      	adds	r7, r0, #0
 80031fc:	4833      	ldr	r0, [pc, #204]	; (80032cc <__ieee754_logf+0x26c>)
 80031fe:	1ac0      	subs	r0, r0, r3
 8003200:	9b03      	ldr	r3, [sp, #12]
 8003202:	4318      	orrs	r0, r3
 8003204:	2800      	cmp	r0, #0
 8003206:	dd2f      	ble.n	8003268 <__ieee754_logf+0x208>
 8003208:	21fc      	movs	r1, #252	; 0xfc
 800320a:	1c20      	adds	r0, r4, #0
 800320c:	0589      	lsls	r1, r1, #22
 800320e:	f7fd fcbf 	bl	8000b90 <__aeabi_fmul>
 8003212:	1c21      	adds	r1, r4, #0
 8003214:	f7fd fcbc 	bl	8000b90 <__aeabi_fmul>
 8003218:	1c01      	adds	r1, r0, #0
 800321a:	1c06      	adds	r6, r0, #0
 800321c:	1c38      	adds	r0, r7, #0
 800321e:	f7fd f945 	bl	80004ac <__aeabi_fadd>
 8003222:	9901      	ldr	r1, [sp, #4]
 8003224:	f7fd fcb4 	bl	8000b90 <__aeabi_fmul>
 8003228:	1c07      	adds	r7, r0, #0
 800322a:	2d00      	cmp	r5, #0
 800322c:	d106      	bne.n	800323c <__ieee754_logf+0x1dc>
 800322e:	1c01      	adds	r1, r0, #0
 8003230:	1c30      	adds	r0, r6, #0
 8003232:	f7fd fddf 	bl	8000df4 <__aeabi_fsub>
 8003236:	1c01      	adds	r1, r0, #0
 8003238:	1c20      	adds	r0, r4, #0
 800323a:	e795      	b.n	8003168 <__ieee754_logf+0x108>
 800323c:	4918      	ldr	r1, [pc, #96]	; (80032a0 <__ieee754_logf+0x240>)
 800323e:	9802      	ldr	r0, [sp, #8]
 8003240:	f7fd fca6 	bl	8000b90 <__aeabi_fmul>
 8003244:	4917      	ldr	r1, [pc, #92]	; (80032a4 <__ieee754_logf+0x244>)
 8003246:	1c05      	adds	r5, r0, #0
 8003248:	9802      	ldr	r0, [sp, #8]
 800324a:	f7fd fca1 	bl	8000b90 <__aeabi_fmul>
 800324e:	1c39      	adds	r1, r7, #0
 8003250:	f7fd f92c 	bl	80004ac <__aeabi_fadd>
 8003254:	1c01      	adds	r1, r0, #0
 8003256:	1c30      	adds	r0, r6, #0
 8003258:	f7fd fdcc 	bl	8000df4 <__aeabi_fsub>
 800325c:	1c21      	adds	r1, r4, #0
 800325e:	f7fd fdc9 	bl	8000df4 <__aeabi_fsub>
 8003262:	1c01      	adds	r1, r0, #0
 8003264:	1c28      	adds	r0, r5, #0
 8003266:	e77f      	b.n	8003168 <__ieee754_logf+0x108>
 8003268:	1c39      	adds	r1, r7, #0
 800326a:	1c20      	adds	r0, r4, #0
 800326c:	f7fd fdc2 	bl	8000df4 <__aeabi_fsub>
 8003270:	9901      	ldr	r1, [sp, #4]
 8003272:	f7fd fc8d 	bl	8000b90 <__aeabi_fmul>
 8003276:	1c06      	adds	r6, r0, #0
 8003278:	2d00      	cmp	r5, #0
 800327a:	d100      	bne.n	800327e <__ieee754_logf+0x21e>
 800327c:	e75d      	b.n	800313a <__ieee754_logf+0xda>
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <__ieee754_logf+0x240>)
 8003280:	9802      	ldr	r0, [sp, #8]
 8003282:	f7fd fc85 	bl	8000b90 <__aeabi_fmul>
 8003286:	4907      	ldr	r1, [pc, #28]	; (80032a4 <__ieee754_logf+0x244>)
 8003288:	1c05      	adds	r5, r0, #0
 800328a:	9802      	ldr	r0, [sp, #8]
 800328c:	f7fd fc80 	bl	8000b90 <__aeabi_fmul>
 8003290:	e7e0      	b.n	8003254 <__ieee754_logf+0x1f4>
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	7f7fffff 	.word	0x7f7fffff
 8003298:	007fffff 	.word	0x007fffff
 800329c:	004afb20 	.word	0x004afb20
 80032a0:	3f317180 	.word	0x3f317180
 80032a4:	3717f7d1 	.word	0x3717f7d1
 80032a8:	3eaaaaab 	.word	0x3eaaaaab
 80032ac:	ffcf5c30 	.word	0xffcf5c30
 80032b0:	3e178897 	.word	0x3e178897
 80032b4:	3e3a3325 	.word	0x3e3a3325
 80032b8:	3e924925 	.word	0x3e924925
 80032bc:	3f2aaaab 	.word	0x3f2aaaab
 80032c0:	3e1cd04f 	.word	0x3e1cd04f
 80032c4:	3e638e29 	.word	0x3e638e29
 80032c8:	3ecccccd 	.word	0x3ecccccd
 80032cc:	0035c288 	.word	0x0035c288

080032d0 <matherr>:
 80032d0:	2000      	movs	r0, #0
 80032d2:	4770      	bx	lr

080032d4 <nan>:
 80032d4:	2000      	movs	r0, #0
 80032d6:	4901      	ldr	r1, [pc, #4]	; (80032dc <nan+0x8>)
 80032d8:	4770      	bx	lr
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	7ff80000 	.word	0x7ff80000

080032e0 <_init>:
 80032e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e6:	bc08      	pop	{r3}
 80032e8:	469e      	mov	lr, r3
 80032ea:	4770      	bx	lr

080032ec <_fini>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr
