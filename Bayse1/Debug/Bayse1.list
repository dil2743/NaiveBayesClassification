
Bayse1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08002d7c  08002d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee0  08002ee0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002ee0  08002ee0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ee0  08002ee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000074  08002f5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002f5c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b302  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018ea  00000000  00000000  0002b39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002d728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bce6  00000000  00000000  0002e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009729  00000000  00000000  00049dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b4fa7  00000000  00000000  000534ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001084a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  00108524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002d64 	.word	0x08002d64

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08002d64 	.word	0x08002d64

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	1c08      	adds	r0, r1, #0
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 fb55 	bl	80008d4 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 fad7 	bl	80007e8 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb47 	bl	80008d4 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fb3d 	bl	80008d4 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fae5 	bl	8000838 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fadb 	bl	8000838 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fadd>:
 8000290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000292:	4647      	mov	r7, r8
 8000294:	46ce      	mov	lr, r9
 8000296:	0243      	lsls	r3, r0, #9
 8000298:	0a5b      	lsrs	r3, r3, #9
 800029a:	0044      	lsls	r4, r0, #1
 800029c:	0fc2      	lsrs	r2, r0, #31
 800029e:	469c      	mov	ip, r3
 80002a0:	0048      	lsls	r0, r1, #1
 80002a2:	00dd      	lsls	r5, r3, #3
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	0e24      	lsrs	r4, r4, #24
 80002a8:	0a5b      	lsrs	r3, r3, #9
 80002aa:	0e00      	lsrs	r0, r0, #24
 80002ac:	b580      	push	{r7, lr}
 80002ae:	4698      	mov	r8, r3
 80002b0:	0026      	movs	r6, r4
 80002b2:	4691      	mov	r9, r2
 80002b4:	0fc9      	lsrs	r1, r1, #31
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	1a27      	subs	r7, r4, r0
 80002ba:	428a      	cmp	r2, r1
 80002bc:	d029      	beq.n	8000312 <__aeabi_fadd+0x82>
 80002be:	2f00      	cmp	r7, #0
 80002c0:	dd15      	ble.n	80002ee <__aeabi_fadd+0x5e>
 80002c2:	2800      	cmp	r0, #0
 80002c4:	d14a      	bne.n	800035c <__aeabi_fadd+0xcc>
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d000      	beq.n	80002cc <__aeabi_fadd+0x3c>
 80002ca:	e095      	b.n	80003f8 <__aeabi_fadd+0x168>
 80002cc:	08ed      	lsrs	r5, r5, #3
 80002ce:	2cff      	cmp	r4, #255	; 0xff
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fadd+0x44>
 80002d2:	e088      	b.n	80003e6 <__aeabi_fadd+0x156>
 80002d4:	026b      	lsls	r3, r5, #9
 80002d6:	0a5b      	lsrs	r3, r3, #9
 80002d8:	b2e6      	uxtb	r6, r4
 80002da:	025b      	lsls	r3, r3, #9
 80002dc:	05f6      	lsls	r6, r6, #23
 80002de:	0a58      	lsrs	r0, r3, #9
 80002e0:	4330      	orrs	r0, r6
 80002e2:	07d2      	lsls	r2, r2, #31
 80002e4:	4310      	orrs	r0, r2
 80002e6:	bc0c      	pop	{r2, r3}
 80002e8:	4690      	mov	r8, r2
 80002ea:	4699      	mov	r9, r3
 80002ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d000      	beq.n	80002f4 <__aeabi_fadd+0x64>
 80002f2:	e087      	b.n	8000404 <__aeabi_fadd+0x174>
 80002f4:	1c60      	adds	r0, r4, #1
 80002f6:	b2c0      	uxtb	r0, r0
 80002f8:	2801      	cmp	r0, #1
 80002fa:	dc00      	bgt.n	80002fe <__aeabi_fadd+0x6e>
 80002fc:	e0b6      	b.n	800046c <__aeabi_fadd+0x1dc>
 80002fe:	1aee      	subs	r6, r5, r3
 8000300:	0172      	lsls	r2, r6, #5
 8000302:	d500      	bpl.n	8000306 <__aeabi_fadd+0x76>
 8000304:	e0c5      	b.n	8000492 <__aeabi_fadd+0x202>
 8000306:	2e00      	cmp	r6, #0
 8000308:	d13d      	bne.n	8000386 <__aeabi_fadd+0xf6>
 800030a:	2200      	movs	r2, #0
 800030c:	2600      	movs	r6, #0
 800030e:	2300      	movs	r3, #0
 8000310:	e7e3      	b.n	80002da <__aeabi_fadd+0x4a>
 8000312:	2f00      	cmp	r7, #0
 8000314:	dc00      	bgt.n	8000318 <__aeabi_fadd+0x88>
 8000316:	e096      	b.n	8000446 <__aeabi_fadd+0x1b6>
 8000318:	2800      	cmp	r0, #0
 800031a:	d05d      	beq.n	80003d8 <__aeabi_fadd+0x148>
 800031c:	2cff      	cmp	r4, #255	; 0xff
 800031e:	d060      	beq.n	80003e2 <__aeabi_fadd+0x152>
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	04d2      	lsls	r2, r2, #19
 8000324:	4313      	orrs	r3, r2
 8000326:	2f1b      	cmp	r7, #27
 8000328:	dd00      	ble.n	800032c <__aeabi_fadd+0x9c>
 800032a:	e0ec      	b.n	8000506 <__aeabi_fadd+0x276>
 800032c:	2220      	movs	r2, #32
 800032e:	1bd2      	subs	r2, r2, r7
 8000330:	0018      	movs	r0, r3
 8000332:	4093      	lsls	r3, r2
 8000334:	40f8      	lsrs	r0, r7
 8000336:	1e5a      	subs	r2, r3, #1
 8000338:	4193      	sbcs	r3, r2
 800033a:	4303      	orrs	r3, r0
 800033c:	18ed      	adds	r5, r5, r3
 800033e:	016b      	lsls	r3, r5, #5
 8000340:	d57b      	bpl.n	800043a <__aeabi_fadd+0x1aa>
 8000342:	3401      	adds	r4, #1
 8000344:	2cff      	cmp	r4, #255	; 0xff
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0xba>
 8000348:	e0b7      	b.n	80004ba <__aeabi_fadd+0x22a>
 800034a:	2201      	movs	r2, #1
 800034c:	2607      	movs	r6, #7
 800034e:	402a      	ands	r2, r5
 8000350:	086b      	lsrs	r3, r5, #1
 8000352:	4d9a      	ldr	r5, [pc, #616]	; (80005bc <__aeabi_fadd+0x32c>)
 8000354:	401d      	ands	r5, r3
 8000356:	4315      	orrs	r5, r2
 8000358:	402e      	ands	r6, r5
 800035a:	e029      	b.n	80003b0 <__aeabi_fadd+0x120>
 800035c:	2cff      	cmp	r4, #255	; 0xff
 800035e:	d0b5      	beq.n	80002cc <__aeabi_fadd+0x3c>
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	04d2      	lsls	r2, r2, #19
 8000364:	4313      	orrs	r3, r2
 8000366:	2f1b      	cmp	r7, #27
 8000368:	dd00      	ble.n	800036c <__aeabi_fadd+0xdc>
 800036a:	e0b2      	b.n	80004d2 <__aeabi_fadd+0x242>
 800036c:	2220      	movs	r2, #32
 800036e:	1bd2      	subs	r2, r2, r7
 8000370:	0019      	movs	r1, r3
 8000372:	4093      	lsls	r3, r2
 8000374:	40f9      	lsrs	r1, r7
 8000376:	1e5a      	subs	r2, r3, #1
 8000378:	4193      	sbcs	r3, r2
 800037a:	430b      	orrs	r3, r1
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	016b      	lsls	r3, r5, #5
 8000380:	d55b      	bpl.n	800043a <__aeabi_fadd+0x1aa>
 8000382:	01ad      	lsls	r5, r5, #6
 8000384:	09ae      	lsrs	r6, r5, #6
 8000386:	0030      	movs	r0, r6
 8000388:	f000 ff20 	bl	80011cc <__clzsi2>
 800038c:	3805      	subs	r0, #5
 800038e:	4086      	lsls	r6, r0
 8000390:	4284      	cmp	r4, r0
 8000392:	dc65      	bgt.n	8000460 <__aeabi_fadd+0x1d0>
 8000394:	1b04      	subs	r4, r0, r4
 8000396:	0033      	movs	r3, r6
 8000398:	2020      	movs	r0, #32
 800039a:	3401      	adds	r4, #1
 800039c:	40e3      	lsrs	r3, r4
 800039e:	1b04      	subs	r4, r0, r4
 80003a0:	40a6      	lsls	r6, r4
 80003a2:	1e75      	subs	r5, r6, #1
 80003a4:	41ae      	sbcs	r6, r5
 80003a6:	4333      	orrs	r3, r6
 80003a8:	2607      	movs	r6, #7
 80003aa:	001d      	movs	r5, r3
 80003ac:	2400      	movs	r4, #0
 80003ae:	401e      	ands	r6, r3
 80003b0:	2201      	movs	r2, #1
 80003b2:	464b      	mov	r3, r9
 80003b4:	401a      	ands	r2, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d004      	beq.n	80003c4 <__aeabi_fadd+0x134>
 80003ba:	230f      	movs	r3, #15
 80003bc:	402b      	ands	r3, r5
 80003be:	2b04      	cmp	r3, #4
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fadd+0x134>
 80003c2:	3504      	adds	r5, #4
 80003c4:	016b      	lsls	r3, r5, #5
 80003c6:	d400      	bmi.n	80003ca <__aeabi_fadd+0x13a>
 80003c8:	e780      	b.n	80002cc <__aeabi_fadd+0x3c>
 80003ca:	3401      	adds	r4, #1
 80003cc:	b2e6      	uxtb	r6, r4
 80003ce:	2cff      	cmp	r4, #255	; 0xff
 80003d0:	d12f      	bne.n	8000432 <__aeabi_fadd+0x1a2>
 80003d2:	26ff      	movs	r6, #255	; 0xff
 80003d4:	2300      	movs	r3, #0
 80003d6:	e780      	b.n	80002da <__aeabi_fadd+0x4a>
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d152      	bne.n	8000482 <__aeabi_fadd+0x1f2>
 80003dc:	2cff      	cmp	r4, #255	; 0xff
 80003de:	d000      	beq.n	80003e2 <__aeabi_fadd+0x152>
 80003e0:	e774      	b.n	80002cc <__aeabi_fadd+0x3c>
 80003e2:	000a      	movs	r2, r1
 80003e4:	08ed      	lsrs	r5, r5, #3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0f3      	beq.n	80003d2 <__aeabi_fadd+0x142>
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	03db      	lsls	r3, r3, #15
 80003ee:	432b      	orrs	r3, r5
 80003f0:	025b      	lsls	r3, r3, #9
 80003f2:	0a5b      	lsrs	r3, r3, #9
 80003f4:	26ff      	movs	r6, #255	; 0xff
 80003f6:	e770      	b.n	80002da <__aeabi_fadd+0x4a>
 80003f8:	3f01      	subs	r7, #1
 80003fa:	2f00      	cmp	r7, #0
 80003fc:	d0be      	beq.n	800037c <__aeabi_fadd+0xec>
 80003fe:	2cff      	cmp	r4, #255	; 0xff
 8000400:	d1b1      	bne.n	8000366 <__aeabi_fadd+0xd6>
 8000402:	e763      	b.n	80002cc <__aeabi_fadd+0x3c>
 8000404:	2c00      	cmp	r4, #0
 8000406:	d047      	beq.n	8000498 <__aeabi_fadd+0x208>
 8000408:	28ff      	cmp	r0, #255	; 0xff
 800040a:	d069      	beq.n	80004e0 <__aeabi_fadd+0x250>
 800040c:	2480      	movs	r4, #128	; 0x80
 800040e:	04e4      	lsls	r4, r4, #19
 8000410:	427a      	negs	r2, r7
 8000412:	4325      	orrs	r5, r4
 8000414:	2a1b      	cmp	r2, #27
 8000416:	dd00      	ble.n	800041a <__aeabi_fadd+0x18a>
 8000418:	e0c5      	b.n	80005a6 <__aeabi_fadd+0x316>
 800041a:	002c      	movs	r4, r5
 800041c:	2620      	movs	r6, #32
 800041e:	40d4      	lsrs	r4, r2
 8000420:	1ab2      	subs	r2, r6, r2
 8000422:	4095      	lsls	r5, r2
 8000424:	1e6a      	subs	r2, r5, #1
 8000426:	4195      	sbcs	r5, r2
 8000428:	4325      	orrs	r5, r4
 800042a:	1b5d      	subs	r5, r3, r5
 800042c:	0004      	movs	r4, r0
 800042e:	4689      	mov	r9, r1
 8000430:	e7a5      	b.n	800037e <__aeabi_fadd+0xee>
 8000432:	01ab      	lsls	r3, r5, #6
 8000434:	0a5b      	lsrs	r3, r3, #9
 8000436:	e750      	b.n	80002da <__aeabi_fadd+0x4a>
 8000438:	2400      	movs	r4, #0
 800043a:	2201      	movs	r2, #1
 800043c:	464b      	mov	r3, r9
 800043e:	401a      	ands	r2, r3
 8000440:	076b      	lsls	r3, r5, #29
 8000442:	d1ba      	bne.n	80003ba <__aeabi_fadd+0x12a>
 8000444:	e742      	b.n	80002cc <__aeabi_fadd+0x3c>
 8000446:	2f00      	cmp	r7, #0
 8000448:	d13b      	bne.n	80004c2 <__aeabi_fadd+0x232>
 800044a:	3401      	adds	r4, #1
 800044c:	b2e0      	uxtb	r0, r4
 800044e:	2801      	cmp	r0, #1
 8000450:	dd4a      	ble.n	80004e8 <__aeabi_fadd+0x258>
 8000452:	2cff      	cmp	r4, #255	; 0xff
 8000454:	d0bd      	beq.n	80003d2 <__aeabi_fadd+0x142>
 8000456:	2607      	movs	r6, #7
 8000458:	18ed      	adds	r5, r5, r3
 800045a:	086d      	lsrs	r5, r5, #1
 800045c:	402e      	ands	r6, r5
 800045e:	e7a7      	b.n	80003b0 <__aeabi_fadd+0x120>
 8000460:	2307      	movs	r3, #7
 8000462:	4d57      	ldr	r5, [pc, #348]	; (80005c0 <__aeabi_fadd+0x330>)
 8000464:	1a24      	subs	r4, r4, r0
 8000466:	4035      	ands	r5, r6
 8000468:	401e      	ands	r6, r3
 800046a:	e7a1      	b.n	80003b0 <__aeabi_fadd+0x120>
 800046c:	2c00      	cmp	r4, #0
 800046e:	d11b      	bne.n	80004a8 <__aeabi_fadd+0x218>
 8000470:	2d00      	cmp	r5, #0
 8000472:	d16e      	bne.n	8000552 <__aeabi_fadd+0x2c2>
 8000474:	2b00      	cmp	r3, #0
 8000476:	d100      	bne.n	800047a <__aeabi_fadd+0x1ea>
 8000478:	e09a      	b.n	80005b0 <__aeabi_fadd+0x320>
 800047a:	000a      	movs	r2, r1
 800047c:	001d      	movs	r5, r3
 800047e:	003c      	movs	r4, r7
 8000480:	e724      	b.n	80002cc <__aeabi_fadd+0x3c>
 8000482:	3f01      	subs	r7, #1
 8000484:	2f00      	cmp	r7, #0
 8000486:	d100      	bne.n	800048a <__aeabi_fadd+0x1fa>
 8000488:	e758      	b.n	800033c <__aeabi_fadd+0xac>
 800048a:	2cff      	cmp	r4, #255	; 0xff
 800048c:	d000      	beq.n	8000490 <__aeabi_fadd+0x200>
 800048e:	e74a      	b.n	8000326 <__aeabi_fadd+0x96>
 8000490:	e7a7      	b.n	80003e2 <__aeabi_fadd+0x152>
 8000492:	1b5e      	subs	r6, r3, r5
 8000494:	4689      	mov	r9, r1
 8000496:	e776      	b.n	8000386 <__aeabi_fadd+0xf6>
 8000498:	2d00      	cmp	r5, #0
 800049a:	d11c      	bne.n	80004d6 <__aeabi_fadd+0x246>
 800049c:	000a      	movs	r2, r1
 800049e:	28ff      	cmp	r0, #255	; 0xff
 80004a0:	d01f      	beq.n	80004e2 <__aeabi_fadd+0x252>
 80004a2:	0004      	movs	r4, r0
 80004a4:	001d      	movs	r5, r3
 80004a6:	e711      	b.n	80002cc <__aeabi_fadd+0x3c>
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	d15d      	bne.n	8000568 <__aeabi_fadd+0x2d8>
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d117      	bne.n	80004e0 <__aeabi_fadd+0x250>
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	2200      	movs	r2, #0
 80004b4:	03db      	lsls	r3, r3, #15
 80004b6:	26ff      	movs	r6, #255	; 0xff
 80004b8:	e70f      	b.n	80002da <__aeabi_fadd+0x4a>
 80004ba:	000a      	movs	r2, r1
 80004bc:	26ff      	movs	r6, #255	; 0xff
 80004be:	2300      	movs	r3, #0
 80004c0:	e70b      	b.n	80002da <__aeabi_fadd+0x4a>
 80004c2:	2c00      	cmp	r4, #0
 80004c4:	d121      	bne.n	800050a <__aeabi_fadd+0x27a>
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d166      	bne.n	8000598 <__aeabi_fadd+0x308>
 80004ca:	28ff      	cmp	r0, #255	; 0xff
 80004cc:	d1e9      	bne.n	80004a2 <__aeabi_fadd+0x212>
 80004ce:	001d      	movs	r5, r3
 80004d0:	e787      	b.n	80003e2 <__aeabi_fadd+0x152>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e752      	b.n	800037c <__aeabi_fadd+0xec>
 80004d6:	1c7a      	adds	r2, r7, #1
 80004d8:	d0a7      	beq.n	800042a <__aeabi_fadd+0x19a>
 80004da:	43fa      	mvns	r2, r7
 80004dc:	28ff      	cmp	r0, #255	; 0xff
 80004de:	d199      	bne.n	8000414 <__aeabi_fadd+0x184>
 80004e0:	000a      	movs	r2, r1
 80004e2:	001d      	movs	r5, r3
 80004e4:	24ff      	movs	r4, #255	; 0xff
 80004e6:	e6f1      	b.n	80002cc <__aeabi_fadd+0x3c>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d121      	bne.n	8000530 <__aeabi_fadd+0x2a0>
 80004ec:	2d00      	cmp	r5, #0
 80004ee:	d04f      	beq.n	8000590 <__aeabi_fadd+0x300>
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d04c      	beq.n	800058e <__aeabi_fadd+0x2fe>
 80004f4:	18ed      	adds	r5, r5, r3
 80004f6:	016b      	lsls	r3, r5, #5
 80004f8:	d59e      	bpl.n	8000438 <__aeabi_fadd+0x1a8>
 80004fa:	4b31      	ldr	r3, [pc, #196]	; (80005c0 <__aeabi_fadd+0x330>)
 80004fc:	3607      	adds	r6, #7
 80004fe:	402e      	ands	r6, r5
 8000500:	2401      	movs	r4, #1
 8000502:	401d      	ands	r5, r3
 8000504:	e754      	b.n	80003b0 <__aeabi_fadd+0x120>
 8000506:	2301      	movs	r3, #1
 8000508:	e718      	b.n	800033c <__aeabi_fadd+0xac>
 800050a:	28ff      	cmp	r0, #255	; 0xff
 800050c:	d0df      	beq.n	80004ce <__aeabi_fadd+0x23e>
 800050e:	2480      	movs	r4, #128	; 0x80
 8000510:	04e4      	lsls	r4, r4, #19
 8000512:	427f      	negs	r7, r7
 8000514:	4325      	orrs	r5, r4
 8000516:	2f1b      	cmp	r7, #27
 8000518:	dc4d      	bgt.n	80005b6 <__aeabi_fadd+0x326>
 800051a:	2620      	movs	r6, #32
 800051c:	1bf6      	subs	r6, r6, r7
 800051e:	002c      	movs	r4, r5
 8000520:	40b5      	lsls	r5, r6
 8000522:	40fc      	lsrs	r4, r7
 8000524:	1e6a      	subs	r2, r5, #1
 8000526:	4195      	sbcs	r5, r2
 8000528:	4325      	orrs	r5, r4
 800052a:	18ed      	adds	r5, r5, r3
 800052c:	0004      	movs	r4, r0
 800052e:	e706      	b.n	800033e <__aeabi_fadd+0xae>
 8000530:	2d00      	cmp	r5, #0
 8000532:	d0cc      	beq.n	80004ce <__aeabi_fadd+0x23e>
 8000534:	2b00      	cmp	r3, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2aa>
 8000538:	e753      	b.n	80003e2 <__aeabi_fadd+0x152>
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4660      	mov	r0, ip
 800053e:	03c9      	lsls	r1, r1, #15
 8000540:	4208      	tst	r0, r1
 8000542:	d003      	beq.n	800054c <__aeabi_fadd+0x2bc>
 8000544:	4640      	mov	r0, r8
 8000546:	4208      	tst	r0, r1
 8000548:	d100      	bne.n	800054c <__aeabi_fadd+0x2bc>
 800054a:	001d      	movs	r5, r3
 800054c:	2101      	movs	r1, #1
 800054e:	4011      	ands	r1, r2
 8000550:	e747      	b.n	80003e2 <__aeabi_fadd+0x152>
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x2c8>
 8000556:	e6b9      	b.n	80002cc <__aeabi_fadd+0x3c>
 8000558:	1aea      	subs	r2, r5, r3
 800055a:	0150      	lsls	r0, r2, #5
 800055c:	d525      	bpl.n	80005aa <__aeabi_fadd+0x31a>
 800055e:	2607      	movs	r6, #7
 8000560:	1b5d      	subs	r5, r3, r5
 8000562:	402e      	ands	r6, r5
 8000564:	4689      	mov	r9, r1
 8000566:	e723      	b.n	80003b0 <__aeabi_fadd+0x120>
 8000568:	24ff      	movs	r4, #255	; 0xff
 800056a:	2b00      	cmp	r3, #0
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x2e0>
 800056e:	e6ad      	b.n	80002cc <__aeabi_fadd+0x3c>
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	4660      	mov	r0, ip
 8000574:	03d2      	lsls	r2, r2, #15
 8000576:	4210      	tst	r0, r2
 8000578:	d004      	beq.n	8000584 <__aeabi_fadd+0x2f4>
 800057a:	4640      	mov	r0, r8
 800057c:	4210      	tst	r0, r2
 800057e:	d101      	bne.n	8000584 <__aeabi_fadd+0x2f4>
 8000580:	001d      	movs	r5, r3
 8000582:	4689      	mov	r9, r1
 8000584:	2201      	movs	r2, #1
 8000586:	464b      	mov	r3, r9
 8000588:	24ff      	movs	r4, #255	; 0xff
 800058a:	401a      	ands	r2, r3
 800058c:	e69e      	b.n	80002cc <__aeabi_fadd+0x3c>
 800058e:	002b      	movs	r3, r5
 8000590:	08dd      	lsrs	r5, r3, #3
 8000592:	000a      	movs	r2, r1
 8000594:	2400      	movs	r4, #0
 8000596:	e69d      	b.n	80002d4 <__aeabi_fadd+0x44>
 8000598:	1c7a      	adds	r2, r7, #1
 800059a:	d0c6      	beq.n	800052a <__aeabi_fadd+0x29a>
 800059c:	43ff      	mvns	r7, r7
 800059e:	28ff      	cmp	r0, #255	; 0xff
 80005a0:	d1b9      	bne.n	8000516 <__aeabi_fadd+0x286>
 80005a2:	001d      	movs	r5, r3
 80005a4:	e71d      	b.n	80003e2 <__aeabi_fadd+0x152>
 80005a6:	2501      	movs	r5, #1
 80005a8:	e73f      	b.n	800042a <__aeabi_fadd+0x19a>
 80005aa:	1e15      	subs	r5, r2, #0
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x320>
 80005ae:	e744      	b.n	800043a <__aeabi_fadd+0x1aa>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	e691      	b.n	80002da <__aeabi_fadd+0x4a>
 80005b6:	2501      	movs	r5, #1
 80005b8:	e7b7      	b.n	800052a <__aeabi_fadd+0x29a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	7dffffff 	.word	0x7dffffff
 80005c0:	fbffffff 	.word	0xfbffffff

080005c4 <__aeabi_fdiv>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	0244      	lsls	r4, r0, #9
 80005d0:	b5e0      	push	{r5, r6, r7, lr}
 80005d2:	0046      	lsls	r6, r0, #1
 80005d4:	4688      	mov	r8, r1
 80005d6:	0a64      	lsrs	r4, r4, #9
 80005d8:	0e36      	lsrs	r6, r6, #24
 80005da:	0fc7      	lsrs	r7, r0, #31
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d063      	beq.n	80006a8 <__aeabi_fdiv+0xe4>
 80005e0:	2eff      	cmp	r6, #255	; 0xff
 80005e2:	d024      	beq.n	800062e <__aeabi_fdiv+0x6a>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	00e4      	lsls	r4, r4, #3
 80005e8:	04db      	lsls	r3, r3, #19
 80005ea:	431c      	orrs	r4, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	4699      	mov	r9, r3
 80005f0:	469b      	mov	fp, r3
 80005f2:	3e7f      	subs	r6, #127	; 0x7f
 80005f4:	4643      	mov	r3, r8
 80005f6:	4642      	mov	r2, r8
 80005f8:	025d      	lsls	r5, r3, #9
 80005fa:	0fd2      	lsrs	r2, r2, #31
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	0a6d      	lsrs	r5, r5, #9
 8000600:	0e1b      	lsrs	r3, r3, #24
 8000602:	4690      	mov	r8, r2
 8000604:	4692      	mov	sl, r2
 8000606:	d065      	beq.n	80006d4 <__aeabi_fdiv+0x110>
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d055      	beq.n	80006b8 <__aeabi_fdiv+0xf4>
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	2100      	movs	r1, #0
 8000610:	00ed      	lsls	r5, r5, #3
 8000612:	04d2      	lsls	r2, r2, #19
 8000614:	3b7f      	subs	r3, #127	; 0x7f
 8000616:	4315      	orrs	r5, r2
 8000618:	1af6      	subs	r6, r6, r3
 800061a:	4643      	mov	r3, r8
 800061c:	464a      	mov	r2, r9
 800061e:	407b      	eors	r3, r7
 8000620:	2a0f      	cmp	r2, #15
 8000622:	d900      	bls.n	8000626 <__aeabi_fdiv+0x62>
 8000624:	e08d      	b.n	8000742 <__aeabi_fdiv+0x17e>
 8000626:	486d      	ldr	r0, [pc, #436]	; (80007dc <__aeabi_fdiv+0x218>)
 8000628:	0092      	lsls	r2, r2, #2
 800062a:	5882      	ldr	r2, [r0, r2]
 800062c:	4697      	mov	pc, r2
 800062e:	2c00      	cmp	r4, #0
 8000630:	d154      	bne.n	80006dc <__aeabi_fdiv+0x118>
 8000632:	2308      	movs	r3, #8
 8000634:	4699      	mov	r9, r3
 8000636:	3b06      	subs	r3, #6
 8000638:	26ff      	movs	r6, #255	; 0xff
 800063a:	469b      	mov	fp, r3
 800063c:	e7da      	b.n	80005f4 <__aeabi_fdiv+0x30>
 800063e:	2500      	movs	r5, #0
 8000640:	4653      	mov	r3, sl
 8000642:	2902      	cmp	r1, #2
 8000644:	d01b      	beq.n	800067e <__aeabi_fdiv+0xba>
 8000646:	2903      	cmp	r1, #3
 8000648:	d100      	bne.n	800064c <__aeabi_fdiv+0x88>
 800064a:	e0bf      	b.n	80007cc <__aeabi_fdiv+0x208>
 800064c:	2901      	cmp	r1, #1
 800064e:	d028      	beq.n	80006a2 <__aeabi_fdiv+0xde>
 8000650:	0030      	movs	r0, r6
 8000652:	307f      	adds	r0, #127	; 0x7f
 8000654:	2800      	cmp	r0, #0
 8000656:	dd20      	ble.n	800069a <__aeabi_fdiv+0xd6>
 8000658:	076a      	lsls	r2, r5, #29
 800065a:	d004      	beq.n	8000666 <__aeabi_fdiv+0xa2>
 800065c:	220f      	movs	r2, #15
 800065e:	402a      	ands	r2, r5
 8000660:	2a04      	cmp	r2, #4
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0xa2>
 8000664:	3504      	adds	r5, #4
 8000666:	012a      	lsls	r2, r5, #4
 8000668:	d503      	bpl.n	8000672 <__aeabi_fdiv+0xae>
 800066a:	0030      	movs	r0, r6
 800066c:	4a5c      	ldr	r2, [pc, #368]	; (80007e0 <__aeabi_fdiv+0x21c>)
 800066e:	3080      	adds	r0, #128	; 0x80
 8000670:	4015      	ands	r5, r2
 8000672:	28fe      	cmp	r0, #254	; 0xfe
 8000674:	dc03      	bgt.n	800067e <__aeabi_fdiv+0xba>
 8000676:	01ac      	lsls	r4, r5, #6
 8000678:	0a64      	lsrs	r4, r4, #9
 800067a:	b2c2      	uxtb	r2, r0
 800067c:	e001      	b.n	8000682 <__aeabi_fdiv+0xbe>
 800067e:	22ff      	movs	r2, #255	; 0xff
 8000680:	2400      	movs	r4, #0
 8000682:	0264      	lsls	r4, r4, #9
 8000684:	05d2      	lsls	r2, r2, #23
 8000686:	0a60      	lsrs	r0, r4, #9
 8000688:	07db      	lsls	r3, r3, #31
 800068a:	4310      	orrs	r0, r2
 800068c:	4318      	orrs	r0, r3
 800068e:	bc3c      	pop	{r2, r3, r4, r5}
 8000690:	4690      	mov	r8, r2
 8000692:	4699      	mov	r9, r3
 8000694:	46a2      	mov	sl, r4
 8000696:	46ab      	mov	fp, r5
 8000698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800069a:	2201      	movs	r2, #1
 800069c:	1a10      	subs	r0, r2, r0
 800069e:	281b      	cmp	r0, #27
 80006a0:	dd7c      	ble.n	800079c <__aeabi_fdiv+0x1d8>
 80006a2:	2200      	movs	r2, #0
 80006a4:	2400      	movs	r4, #0
 80006a6:	e7ec      	b.n	8000682 <__aeabi_fdiv+0xbe>
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d11d      	bne.n	80006e8 <__aeabi_fdiv+0x124>
 80006ac:	2304      	movs	r3, #4
 80006ae:	4699      	mov	r9, r3
 80006b0:	3b03      	subs	r3, #3
 80006b2:	2600      	movs	r6, #0
 80006b4:	469b      	mov	fp, r3
 80006b6:	e79d      	b.n	80005f4 <__aeabi_fdiv+0x30>
 80006b8:	3eff      	subs	r6, #255	; 0xff
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d120      	bne.n	8000700 <__aeabi_fdiv+0x13c>
 80006be:	2102      	movs	r1, #2
 80006c0:	4643      	mov	r3, r8
 80006c2:	464a      	mov	r2, r9
 80006c4:	407b      	eors	r3, r7
 80006c6:	430a      	orrs	r2, r1
 80006c8:	2a0f      	cmp	r2, #15
 80006ca:	d8d8      	bhi.n	800067e <__aeabi_fdiv+0xba>
 80006cc:	4845      	ldr	r0, [pc, #276]	; (80007e4 <__aeabi_fdiv+0x220>)
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	5882      	ldr	r2, [r0, r2]
 80006d2:	4697      	mov	pc, r2
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d119      	bne.n	800070c <__aeabi_fdiv+0x148>
 80006d8:	2101      	movs	r1, #1
 80006da:	e7f1      	b.n	80006c0 <__aeabi_fdiv+0xfc>
 80006dc:	230c      	movs	r3, #12
 80006de:	4699      	mov	r9, r3
 80006e0:	3b09      	subs	r3, #9
 80006e2:	26ff      	movs	r6, #255	; 0xff
 80006e4:	469b      	mov	fp, r3
 80006e6:	e785      	b.n	80005f4 <__aeabi_fdiv+0x30>
 80006e8:	0020      	movs	r0, r4
 80006ea:	f000 fd6f 	bl	80011cc <__clzsi2>
 80006ee:	2676      	movs	r6, #118	; 0x76
 80006f0:	1f43      	subs	r3, r0, #5
 80006f2:	409c      	lsls	r4, r3
 80006f4:	2300      	movs	r3, #0
 80006f6:	4276      	negs	r6, r6
 80006f8:	1a36      	subs	r6, r6, r0
 80006fa:	4699      	mov	r9, r3
 80006fc:	469b      	mov	fp, r3
 80006fe:	e779      	b.n	80005f4 <__aeabi_fdiv+0x30>
 8000700:	464a      	mov	r2, r9
 8000702:	2303      	movs	r3, #3
 8000704:	431a      	orrs	r2, r3
 8000706:	4691      	mov	r9, r2
 8000708:	2103      	movs	r1, #3
 800070a:	e786      	b.n	800061a <__aeabi_fdiv+0x56>
 800070c:	0028      	movs	r0, r5
 800070e:	f000 fd5d 	bl	80011cc <__clzsi2>
 8000712:	1f43      	subs	r3, r0, #5
 8000714:	1836      	adds	r6, r6, r0
 8000716:	409d      	lsls	r5, r3
 8000718:	3676      	adds	r6, #118	; 0x76
 800071a:	2100      	movs	r1, #0
 800071c:	e77d      	b.n	800061a <__aeabi_fdiv+0x56>
 800071e:	2480      	movs	r4, #128	; 0x80
 8000720:	2300      	movs	r3, #0
 8000722:	03e4      	lsls	r4, r4, #15
 8000724:	22ff      	movs	r2, #255	; 0xff
 8000726:	e7ac      	b.n	8000682 <__aeabi_fdiv+0xbe>
 8000728:	2500      	movs	r5, #0
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	03db      	lsls	r3, r3, #15
 800072e:	421c      	tst	r4, r3
 8000730:	d028      	beq.n	8000784 <__aeabi_fdiv+0x1c0>
 8000732:	421d      	tst	r5, r3
 8000734:	d126      	bne.n	8000784 <__aeabi_fdiv+0x1c0>
 8000736:	432b      	orrs	r3, r5
 8000738:	025c      	lsls	r4, r3, #9
 800073a:	0a64      	lsrs	r4, r4, #9
 800073c:	4643      	mov	r3, r8
 800073e:	22ff      	movs	r2, #255	; 0xff
 8000740:	e79f      	b.n	8000682 <__aeabi_fdiv+0xbe>
 8000742:	0162      	lsls	r2, r4, #5
 8000744:	016c      	lsls	r4, r5, #5
 8000746:	42a2      	cmp	r2, r4
 8000748:	d224      	bcs.n	8000794 <__aeabi_fdiv+0x1d0>
 800074a:	211b      	movs	r1, #27
 800074c:	2500      	movs	r5, #0
 800074e:	3e01      	subs	r6, #1
 8000750:	2701      	movs	r7, #1
 8000752:	0010      	movs	r0, r2
 8000754:	006d      	lsls	r5, r5, #1
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	2800      	cmp	r0, #0
 800075a:	db01      	blt.n	8000760 <__aeabi_fdiv+0x19c>
 800075c:	4294      	cmp	r4, r2
 800075e:	d801      	bhi.n	8000764 <__aeabi_fdiv+0x1a0>
 8000760:	1b12      	subs	r2, r2, r4
 8000762:	433d      	orrs	r5, r7
 8000764:	3901      	subs	r1, #1
 8000766:	2900      	cmp	r1, #0
 8000768:	d1f3      	bne.n	8000752 <__aeabi_fdiv+0x18e>
 800076a:	0014      	movs	r4, r2
 800076c:	1e62      	subs	r2, r4, #1
 800076e:	4194      	sbcs	r4, r2
 8000770:	4325      	orrs	r5, r4
 8000772:	e76d      	b.n	8000650 <__aeabi_fdiv+0x8c>
 8000774:	46ba      	mov	sl, r7
 8000776:	4659      	mov	r1, fp
 8000778:	0025      	movs	r5, r4
 800077a:	4653      	mov	r3, sl
 800077c:	2902      	cmp	r1, #2
 800077e:	d000      	beq.n	8000782 <__aeabi_fdiv+0x1be>
 8000780:	e761      	b.n	8000646 <__aeabi_fdiv+0x82>
 8000782:	e77c      	b.n	800067e <__aeabi_fdiv+0xba>
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	03db      	lsls	r3, r3, #15
 8000788:	431c      	orrs	r4, r3
 800078a:	0264      	lsls	r4, r4, #9
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	003b      	movs	r3, r7
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	e776      	b.n	8000682 <__aeabi_fdiv+0xbe>
 8000794:	1b12      	subs	r2, r2, r4
 8000796:	211a      	movs	r1, #26
 8000798:	2501      	movs	r5, #1
 800079a:	e7d9      	b.n	8000750 <__aeabi_fdiv+0x18c>
 800079c:	369e      	adds	r6, #158	; 0x9e
 800079e:	002a      	movs	r2, r5
 80007a0:	40b5      	lsls	r5, r6
 80007a2:	002c      	movs	r4, r5
 80007a4:	40c2      	lsrs	r2, r0
 80007a6:	1e65      	subs	r5, r4, #1
 80007a8:	41ac      	sbcs	r4, r5
 80007aa:	4314      	orrs	r4, r2
 80007ac:	0762      	lsls	r2, r4, #29
 80007ae:	d004      	beq.n	80007ba <__aeabi_fdiv+0x1f6>
 80007b0:	220f      	movs	r2, #15
 80007b2:	4022      	ands	r2, r4
 80007b4:	2a04      	cmp	r2, #4
 80007b6:	d000      	beq.n	80007ba <__aeabi_fdiv+0x1f6>
 80007b8:	3404      	adds	r4, #4
 80007ba:	0162      	lsls	r2, r4, #5
 80007bc:	d403      	bmi.n	80007c6 <__aeabi_fdiv+0x202>
 80007be:	01a4      	lsls	r4, r4, #6
 80007c0:	0a64      	lsrs	r4, r4, #9
 80007c2:	2200      	movs	r2, #0
 80007c4:	e75d      	b.n	8000682 <__aeabi_fdiv+0xbe>
 80007c6:	2201      	movs	r2, #1
 80007c8:	2400      	movs	r4, #0
 80007ca:	e75a      	b.n	8000682 <__aeabi_fdiv+0xbe>
 80007cc:	2480      	movs	r4, #128	; 0x80
 80007ce:	03e4      	lsls	r4, r4, #15
 80007d0:	432c      	orrs	r4, r5
 80007d2:	0264      	lsls	r4, r4, #9
 80007d4:	0a64      	lsrs	r4, r4, #9
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	e753      	b.n	8000682 <__aeabi_fdiv+0xbe>
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	08002d7c 	.word	0x08002d7c
 80007e0:	f7ffffff 	.word	0xf7ffffff
 80007e4:	08002dbc 	.word	0x08002dbc

080007e8 <__eqsf2>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	0042      	lsls	r2, r0, #1
 80007ec:	024e      	lsls	r6, r1, #9
 80007ee:	004c      	lsls	r4, r1, #1
 80007f0:	0245      	lsls	r5, r0, #9
 80007f2:	0a6d      	lsrs	r5, r5, #9
 80007f4:	0e12      	lsrs	r2, r2, #24
 80007f6:	0fc3      	lsrs	r3, r0, #31
 80007f8:	0a76      	lsrs	r6, r6, #9
 80007fa:	0e24      	lsrs	r4, r4, #24
 80007fc:	0fc9      	lsrs	r1, r1, #31
 80007fe:	2aff      	cmp	r2, #255	; 0xff
 8000800:	d00f      	beq.n	8000822 <__eqsf2+0x3a>
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d011      	beq.n	800082a <__eqsf2+0x42>
 8000806:	2001      	movs	r0, #1
 8000808:	42a2      	cmp	r2, r4
 800080a:	d000      	beq.n	800080e <__eqsf2+0x26>
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	42b5      	cmp	r5, r6
 8000810:	d1fc      	bne.n	800080c <__eqsf2+0x24>
 8000812:	428b      	cmp	r3, r1
 8000814:	d00d      	beq.n	8000832 <__eqsf2+0x4a>
 8000816:	2a00      	cmp	r2, #0
 8000818:	d1f8      	bne.n	800080c <__eqsf2+0x24>
 800081a:	0028      	movs	r0, r5
 800081c:	1e45      	subs	r5, r0, #1
 800081e:	41a8      	sbcs	r0, r5
 8000820:	e7f4      	b.n	800080c <__eqsf2+0x24>
 8000822:	2001      	movs	r0, #1
 8000824:	2d00      	cmp	r5, #0
 8000826:	d1f1      	bne.n	800080c <__eqsf2+0x24>
 8000828:	e7eb      	b.n	8000802 <__eqsf2+0x1a>
 800082a:	2001      	movs	r0, #1
 800082c:	2e00      	cmp	r6, #0
 800082e:	d1ed      	bne.n	800080c <__eqsf2+0x24>
 8000830:	e7e9      	b.n	8000806 <__eqsf2+0x1e>
 8000832:	2000      	movs	r0, #0
 8000834:	e7ea      	b.n	800080c <__eqsf2+0x24>
 8000836:	46c0      	nop			; (mov r8, r8)

08000838 <__gesf2>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	004a      	lsls	r2, r1, #1
 800083c:	024e      	lsls	r6, r1, #9
 800083e:	0245      	lsls	r5, r0, #9
 8000840:	0044      	lsls	r4, r0, #1
 8000842:	0a6d      	lsrs	r5, r5, #9
 8000844:	0e24      	lsrs	r4, r4, #24
 8000846:	0fc3      	lsrs	r3, r0, #31
 8000848:	0a76      	lsrs	r6, r6, #9
 800084a:	0e12      	lsrs	r2, r2, #24
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d015      	beq.n	800087e <__gesf2+0x46>
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d00e      	beq.n	8000874 <__gesf2+0x3c>
 8000856:	2c00      	cmp	r4, #0
 8000858:	d115      	bne.n	8000886 <__gesf2+0x4e>
 800085a:	2a00      	cmp	r2, #0
 800085c:	d101      	bne.n	8000862 <__gesf2+0x2a>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d01c      	beq.n	800089c <__gesf2+0x64>
 8000862:	2d00      	cmp	r5, #0
 8000864:	d014      	beq.n	8000890 <__gesf2+0x58>
 8000866:	428b      	cmp	r3, r1
 8000868:	d027      	beq.n	80008ba <__gesf2+0x82>
 800086a:	2002      	movs	r0, #2
 800086c:	3b01      	subs	r3, #1
 800086e:	4018      	ands	r0, r3
 8000870:	3801      	subs	r0, #1
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	2e00      	cmp	r6, #0
 8000876:	d0ee      	beq.n	8000856 <__gesf2+0x1e>
 8000878:	2002      	movs	r0, #2
 800087a:	4240      	negs	r0, r0
 800087c:	e7f9      	b.n	8000872 <__gesf2+0x3a>
 800087e:	2d00      	cmp	r5, #0
 8000880:	d1fa      	bne.n	8000878 <__gesf2+0x40>
 8000882:	2aff      	cmp	r2, #255	; 0xff
 8000884:	d00e      	beq.n	80008a4 <__gesf2+0x6c>
 8000886:	2a00      	cmp	r2, #0
 8000888:	d10e      	bne.n	80008a8 <__gesf2+0x70>
 800088a:	2e00      	cmp	r6, #0
 800088c:	d0ed      	beq.n	800086a <__gesf2+0x32>
 800088e:	e00b      	b.n	80008a8 <__gesf2+0x70>
 8000890:	2301      	movs	r3, #1
 8000892:	3901      	subs	r1, #1
 8000894:	4399      	bics	r1, r3
 8000896:	0008      	movs	r0, r1
 8000898:	3001      	adds	r0, #1
 800089a:	e7ea      	b.n	8000872 <__gesf2+0x3a>
 800089c:	2000      	movs	r0, #0
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d0e7      	beq.n	8000872 <__gesf2+0x3a>
 80008a2:	e7e2      	b.n	800086a <__gesf2+0x32>
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	d1e7      	bne.n	8000878 <__gesf2+0x40>
 80008a8:	428b      	cmp	r3, r1
 80008aa:	d1de      	bne.n	800086a <__gesf2+0x32>
 80008ac:	4294      	cmp	r4, r2
 80008ae:	dd05      	ble.n	80008bc <__gesf2+0x84>
 80008b0:	2102      	movs	r1, #2
 80008b2:	1e58      	subs	r0, r3, #1
 80008b4:	4008      	ands	r0, r1
 80008b6:	3801      	subs	r0, #1
 80008b8:	e7db      	b.n	8000872 <__gesf2+0x3a>
 80008ba:	2400      	movs	r4, #0
 80008bc:	42a2      	cmp	r2, r4
 80008be:	dc04      	bgt.n	80008ca <__gesf2+0x92>
 80008c0:	42b5      	cmp	r5, r6
 80008c2:	d8d2      	bhi.n	800086a <__gesf2+0x32>
 80008c4:	2000      	movs	r0, #0
 80008c6:	42b5      	cmp	r5, r6
 80008c8:	d2d3      	bcs.n	8000872 <__gesf2+0x3a>
 80008ca:	1e58      	subs	r0, r3, #1
 80008cc:	2301      	movs	r3, #1
 80008ce:	4398      	bics	r0, r3
 80008d0:	3001      	adds	r0, #1
 80008d2:	e7ce      	b.n	8000872 <__gesf2+0x3a>

080008d4 <__lesf2>:
 80008d4:	b530      	push	{r4, r5, lr}
 80008d6:	0042      	lsls	r2, r0, #1
 80008d8:	0244      	lsls	r4, r0, #9
 80008da:	024d      	lsls	r5, r1, #9
 80008dc:	0fc3      	lsrs	r3, r0, #31
 80008de:	0048      	lsls	r0, r1, #1
 80008e0:	0a64      	lsrs	r4, r4, #9
 80008e2:	0e12      	lsrs	r2, r2, #24
 80008e4:	0a6d      	lsrs	r5, r5, #9
 80008e6:	0e00      	lsrs	r0, r0, #24
 80008e8:	0fc9      	lsrs	r1, r1, #31
 80008ea:	2aff      	cmp	r2, #255	; 0xff
 80008ec:	d012      	beq.n	8000914 <__lesf2+0x40>
 80008ee:	28ff      	cmp	r0, #255	; 0xff
 80008f0:	d00c      	beq.n	800090c <__lesf2+0x38>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d112      	bne.n	800091c <__lesf2+0x48>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d119      	bne.n	800092e <__lesf2+0x5a>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d117      	bne.n	800092e <__lesf2+0x5a>
 80008fe:	2c00      	cmp	r4, #0
 8000900:	d02b      	beq.n	800095a <__lesf2+0x86>
 8000902:	2002      	movs	r0, #2
 8000904:	3b01      	subs	r3, #1
 8000906:	4018      	ands	r0, r3
 8000908:	3801      	subs	r0, #1
 800090a:	e026      	b.n	800095a <__lesf2+0x86>
 800090c:	2d00      	cmp	r5, #0
 800090e:	d0f0      	beq.n	80008f2 <__lesf2+0x1e>
 8000910:	2002      	movs	r0, #2
 8000912:	e022      	b.n	800095a <__lesf2+0x86>
 8000914:	2c00      	cmp	r4, #0
 8000916:	d1fb      	bne.n	8000910 <__lesf2+0x3c>
 8000918:	28ff      	cmp	r0, #255	; 0xff
 800091a:	d01f      	beq.n	800095c <__lesf2+0x88>
 800091c:	2800      	cmp	r0, #0
 800091e:	d11f      	bne.n	8000960 <__lesf2+0x8c>
 8000920:	2d00      	cmp	r5, #0
 8000922:	d11d      	bne.n	8000960 <__lesf2+0x8c>
 8000924:	2002      	movs	r0, #2
 8000926:	3b01      	subs	r3, #1
 8000928:	4018      	ands	r0, r3
 800092a:	3801      	subs	r0, #1
 800092c:	e015      	b.n	800095a <__lesf2+0x86>
 800092e:	2c00      	cmp	r4, #0
 8000930:	d00e      	beq.n	8000950 <__lesf2+0x7c>
 8000932:	428b      	cmp	r3, r1
 8000934:	d1e5      	bne.n	8000902 <__lesf2+0x2e>
 8000936:	2200      	movs	r2, #0
 8000938:	4290      	cmp	r0, r2
 800093a:	dc04      	bgt.n	8000946 <__lesf2+0x72>
 800093c:	42ac      	cmp	r4, r5
 800093e:	d8e0      	bhi.n	8000902 <__lesf2+0x2e>
 8000940:	2000      	movs	r0, #0
 8000942:	42ac      	cmp	r4, r5
 8000944:	d209      	bcs.n	800095a <__lesf2+0x86>
 8000946:	1e58      	subs	r0, r3, #1
 8000948:	2301      	movs	r3, #1
 800094a:	4398      	bics	r0, r3
 800094c:	3001      	adds	r0, #1
 800094e:	e004      	b.n	800095a <__lesf2+0x86>
 8000950:	2301      	movs	r3, #1
 8000952:	3901      	subs	r1, #1
 8000954:	4399      	bics	r1, r3
 8000956:	0008      	movs	r0, r1
 8000958:	3001      	adds	r0, #1
 800095a:	bd30      	pop	{r4, r5, pc}
 800095c:	2d00      	cmp	r5, #0
 800095e:	d1d7      	bne.n	8000910 <__lesf2+0x3c>
 8000960:	428b      	cmp	r3, r1
 8000962:	d1ce      	bne.n	8000902 <__lesf2+0x2e>
 8000964:	4282      	cmp	r2, r0
 8000966:	dde7      	ble.n	8000938 <__lesf2+0x64>
 8000968:	2102      	movs	r1, #2
 800096a:	1e58      	subs	r0, r3, #1
 800096c:	4008      	ands	r0, r1
 800096e:	3801      	subs	r0, #1
 8000970:	e7f3      	b.n	800095a <__lesf2+0x86>
 8000972:	46c0      	nop			; (mov r8, r8)

08000974 <__aeabi_fmul>:
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	464e      	mov	r6, r9
 8000978:	4657      	mov	r7, sl
 800097a:	4645      	mov	r5, r8
 800097c:	46de      	mov	lr, fp
 800097e:	b5e0      	push	{r5, r6, r7, lr}
 8000980:	0243      	lsls	r3, r0, #9
 8000982:	0a5b      	lsrs	r3, r3, #9
 8000984:	0045      	lsls	r5, r0, #1
 8000986:	b083      	sub	sp, #12
 8000988:	1c0f      	adds	r7, r1, #0
 800098a:	4699      	mov	r9, r3
 800098c:	0e2d      	lsrs	r5, r5, #24
 800098e:	0fc6      	lsrs	r6, r0, #31
 8000990:	2d00      	cmp	r5, #0
 8000992:	d057      	beq.n	8000a44 <__aeabi_fmul+0xd0>
 8000994:	2dff      	cmp	r5, #255	; 0xff
 8000996:	d024      	beq.n	80009e2 <__aeabi_fmul+0x6e>
 8000998:	2080      	movs	r0, #128	; 0x80
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	04c0      	lsls	r0, r0, #19
 800099e:	4318      	orrs	r0, r3
 80009a0:	2300      	movs	r3, #0
 80009a2:	4681      	mov	r9, r0
 80009a4:	469a      	mov	sl, r3
 80009a6:	469b      	mov	fp, r3
 80009a8:	3d7f      	subs	r5, #127	; 0x7f
 80009aa:	027c      	lsls	r4, r7, #9
 80009ac:	007a      	lsls	r2, r7, #1
 80009ae:	0ffb      	lsrs	r3, r7, #31
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	0e12      	lsrs	r2, r2, #24
 80009b4:	4698      	mov	r8, r3
 80009b6:	d023      	beq.n	8000a00 <__aeabi_fmul+0x8c>
 80009b8:	2aff      	cmp	r2, #255	; 0xff
 80009ba:	d04b      	beq.n	8000a54 <__aeabi_fmul+0xe0>
 80009bc:	00e3      	lsls	r3, r4, #3
 80009be:	2480      	movs	r4, #128	; 0x80
 80009c0:	2000      	movs	r0, #0
 80009c2:	04e4      	lsls	r4, r4, #19
 80009c4:	3a7f      	subs	r2, #127	; 0x7f
 80009c6:	431c      	orrs	r4, r3
 80009c8:	18ad      	adds	r5, r5, r2
 80009ca:	1c6b      	adds	r3, r5, #1
 80009cc:	4647      	mov	r7, r8
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	4653      	mov	r3, sl
 80009d2:	4077      	eors	r7, r6
 80009d4:	003a      	movs	r2, r7
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d848      	bhi.n	8000a6c <__aeabi_fmul+0xf8>
 80009da:	497d      	ldr	r1, [pc, #500]	; (8000bd0 <__aeabi_fmul+0x25c>)
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	58cb      	ldr	r3, [r1, r3]
 80009e0:	469f      	mov	pc, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fmul+0x74>
 80009e6:	e085      	b.n	8000af4 <__aeabi_fmul+0x180>
 80009e8:	3308      	adds	r3, #8
 80009ea:	469a      	mov	sl, r3
 80009ec:	3b06      	subs	r3, #6
 80009ee:	469b      	mov	fp, r3
 80009f0:	027c      	lsls	r4, r7, #9
 80009f2:	007a      	lsls	r2, r7, #1
 80009f4:	0ffb      	lsrs	r3, r7, #31
 80009f6:	25ff      	movs	r5, #255	; 0xff
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	0e12      	lsrs	r2, r2, #24
 80009fc:	4698      	mov	r8, r3
 80009fe:	d1db      	bne.n	80009b8 <__aeabi_fmul+0x44>
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	d000      	beq.n	8000a06 <__aeabi_fmul+0x92>
 8000a04:	e090      	b.n	8000b28 <__aeabi_fmul+0x1b4>
 8000a06:	4652      	mov	r2, sl
 8000a08:	2301      	movs	r3, #1
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	4692      	mov	sl, r2
 8000a0e:	2001      	movs	r0, #1
 8000a10:	e7db      	b.n	80009ca <__aeabi_fmul+0x56>
 8000a12:	464c      	mov	r4, r9
 8000a14:	4658      	mov	r0, fp
 8000a16:	0017      	movs	r7, r2
 8000a18:	2802      	cmp	r0, #2
 8000a1a:	d024      	beq.n	8000a66 <__aeabi_fmul+0xf2>
 8000a1c:	2803      	cmp	r0, #3
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_fmul+0xae>
 8000a20:	e0cf      	b.n	8000bc2 <__aeabi_fmul+0x24e>
 8000a22:	2200      	movs	r2, #0
 8000a24:	2300      	movs	r3, #0
 8000a26:	2801      	cmp	r0, #1
 8000a28:	d14d      	bne.n	8000ac6 <__aeabi_fmul+0x152>
 8000a2a:	0258      	lsls	r0, r3, #9
 8000a2c:	05d2      	lsls	r2, r2, #23
 8000a2e:	0a40      	lsrs	r0, r0, #9
 8000a30:	07ff      	lsls	r7, r7, #31
 8000a32:	4310      	orrs	r0, r2
 8000a34:	4338      	orrs	r0, r7
 8000a36:	b003      	add	sp, #12
 8000a38:	bc3c      	pop	{r2, r3, r4, r5}
 8000a3a:	4690      	mov	r8, r2
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	46a2      	mov	sl, r4
 8000a40:	46ab      	mov	fp, r5
 8000a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d15b      	bne.n	8000b00 <__aeabi_fmul+0x18c>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2500      	movs	r5, #0
 8000a50:	469b      	mov	fp, r3
 8000a52:	e7aa      	b.n	80009aa <__aeabi_fmul+0x36>
 8000a54:	35ff      	adds	r5, #255	; 0xff
 8000a56:	2c00      	cmp	r4, #0
 8000a58:	d160      	bne.n	8000b1c <__aeabi_fmul+0x1a8>
 8000a5a:	4652      	mov	r2, sl
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	4692      	mov	sl, r2
 8000a62:	2002      	movs	r0, #2
 8000a64:	e7b1      	b.n	80009ca <__aeabi_fmul+0x56>
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e7de      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	469c      	mov	ip, r3
 8000a72:	464b      	mov	r3, r9
 8000a74:	0426      	lsls	r6, r4, #16
 8000a76:	0c36      	lsrs	r6, r6, #16
 8000a78:	0418      	lsls	r0, r3, #16
 8000a7a:	4661      	mov	r1, ip
 8000a7c:	0033      	movs	r3, r6
 8000a7e:	0c22      	lsrs	r2, r4, #16
 8000a80:	4664      	mov	r4, ip
 8000a82:	0c00      	lsrs	r0, r0, #16
 8000a84:	4343      	muls	r3, r0
 8000a86:	434e      	muls	r6, r1
 8000a88:	4350      	muls	r0, r2
 8000a8a:	4354      	muls	r4, r2
 8000a8c:	1980      	adds	r0, r0, r6
 8000a8e:	0c1a      	lsrs	r2, r3, #16
 8000a90:	1812      	adds	r2, r2, r0
 8000a92:	4296      	cmp	r6, r2
 8000a94:	d903      	bls.n	8000a9e <__aeabi_fmul+0x12a>
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	0249      	lsls	r1, r1, #9
 8000a9a:	468c      	mov	ip, r1
 8000a9c:	4464      	add	r4, ip
 8000a9e:	041b      	lsls	r3, r3, #16
 8000aa0:	0c1b      	lsrs	r3, r3, #16
 8000aa2:	0410      	lsls	r0, r2, #16
 8000aa4:	18c0      	adds	r0, r0, r3
 8000aa6:	0183      	lsls	r3, r0, #6
 8000aa8:	1e5e      	subs	r6, r3, #1
 8000aaa:	41b3      	sbcs	r3, r6
 8000aac:	0e80      	lsrs	r0, r0, #26
 8000aae:	4318      	orrs	r0, r3
 8000ab0:	0c13      	lsrs	r3, r2, #16
 8000ab2:	191b      	adds	r3, r3, r4
 8000ab4:	019b      	lsls	r3, r3, #6
 8000ab6:	4303      	orrs	r3, r0
 8000ab8:	001c      	movs	r4, r3
 8000aba:	0123      	lsls	r3, r4, #4
 8000abc:	d579      	bpl.n	8000bb2 <__aeabi_fmul+0x23e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	0862      	lsrs	r2, r4, #1
 8000ac2:	401c      	ands	r4, r3
 8000ac4:	4314      	orrs	r4, r2
 8000ac6:	9a01      	ldr	r2, [sp, #4]
 8000ac8:	327f      	adds	r2, #127	; 0x7f
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	dd4d      	ble.n	8000b6a <__aeabi_fmul+0x1f6>
 8000ace:	0763      	lsls	r3, r4, #29
 8000ad0:	d004      	beq.n	8000adc <__aeabi_fmul+0x168>
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	4023      	ands	r3, r4
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d000      	beq.n	8000adc <__aeabi_fmul+0x168>
 8000ada:	3404      	adds	r4, #4
 8000adc:	0123      	lsls	r3, r4, #4
 8000ade:	d503      	bpl.n	8000ae8 <__aeabi_fmul+0x174>
 8000ae0:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <__aeabi_fmul+0x260>)
 8000ae2:	9a01      	ldr	r2, [sp, #4]
 8000ae4:	401c      	ands	r4, r3
 8000ae6:	3280      	adds	r2, #128	; 0x80
 8000ae8:	2afe      	cmp	r2, #254	; 0xfe
 8000aea:	dcbc      	bgt.n	8000a66 <__aeabi_fmul+0xf2>
 8000aec:	01a3      	lsls	r3, r4, #6
 8000aee:	0a5b      	lsrs	r3, r3, #9
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	e79a      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000af4:	230c      	movs	r3, #12
 8000af6:	469a      	mov	sl, r3
 8000af8:	3b09      	subs	r3, #9
 8000afa:	25ff      	movs	r5, #255	; 0xff
 8000afc:	469b      	mov	fp, r3
 8000afe:	e754      	b.n	80009aa <__aeabi_fmul+0x36>
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fb63 	bl	80011cc <__clzsi2>
 8000b06:	464a      	mov	r2, r9
 8000b08:	1f43      	subs	r3, r0, #5
 8000b0a:	2576      	movs	r5, #118	; 0x76
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	2300      	movs	r3, #0
 8000b10:	426d      	negs	r5, r5
 8000b12:	4691      	mov	r9, r2
 8000b14:	1a2d      	subs	r5, r5, r0
 8000b16:	469a      	mov	sl, r3
 8000b18:	469b      	mov	fp, r3
 8000b1a:	e746      	b.n	80009aa <__aeabi_fmul+0x36>
 8000b1c:	4652      	mov	r2, sl
 8000b1e:	2303      	movs	r3, #3
 8000b20:	431a      	orrs	r2, r3
 8000b22:	4692      	mov	sl, r2
 8000b24:	2003      	movs	r0, #3
 8000b26:	e750      	b.n	80009ca <__aeabi_fmul+0x56>
 8000b28:	0020      	movs	r0, r4
 8000b2a:	f000 fb4f 	bl	80011cc <__clzsi2>
 8000b2e:	1f43      	subs	r3, r0, #5
 8000b30:	1a2d      	subs	r5, r5, r0
 8000b32:	409c      	lsls	r4, r3
 8000b34:	3d76      	subs	r5, #118	; 0x76
 8000b36:	2000      	movs	r0, #0
 8000b38:	e747      	b.n	80009ca <__aeabi_fmul+0x56>
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	03db      	lsls	r3, r3, #15
 8000b40:	22ff      	movs	r2, #255	; 0xff
 8000b42:	e772      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000b44:	4642      	mov	r2, r8
 8000b46:	e766      	b.n	8000a16 <__aeabi_fmul+0xa2>
 8000b48:	464c      	mov	r4, r9
 8000b4a:	0032      	movs	r2, r6
 8000b4c:	4658      	mov	r0, fp
 8000b4e:	e762      	b.n	8000a16 <__aeabi_fmul+0xa2>
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	464a      	mov	r2, r9
 8000b54:	03db      	lsls	r3, r3, #15
 8000b56:	421a      	tst	r2, r3
 8000b58:	d022      	beq.n	8000ba0 <__aeabi_fmul+0x22c>
 8000b5a:	421c      	tst	r4, r3
 8000b5c:	d120      	bne.n	8000ba0 <__aeabi_fmul+0x22c>
 8000b5e:	4323      	orrs	r3, r4
 8000b60:	025b      	lsls	r3, r3, #9
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	4647      	mov	r7, r8
 8000b66:	22ff      	movs	r2, #255	; 0xff
 8000b68:	e75f      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	1a9a      	subs	r2, r3, r2
 8000b6e:	2a1b      	cmp	r2, #27
 8000b70:	dc21      	bgt.n	8000bb6 <__aeabi_fmul+0x242>
 8000b72:	0023      	movs	r3, r4
 8000b74:	9901      	ldr	r1, [sp, #4]
 8000b76:	40d3      	lsrs	r3, r2
 8000b78:	319e      	adds	r1, #158	; 0x9e
 8000b7a:	408c      	lsls	r4, r1
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	0023      	movs	r3, r4
 8000b80:	1e5c      	subs	r4, r3, #1
 8000b82:	41a3      	sbcs	r3, r4
 8000b84:	4313      	orrs	r3, r2
 8000b86:	075a      	lsls	r2, r3, #29
 8000b88:	d004      	beq.n	8000b94 <__aeabi_fmul+0x220>
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	2a04      	cmp	r2, #4
 8000b90:	d000      	beq.n	8000b94 <__aeabi_fmul+0x220>
 8000b92:	3304      	adds	r3, #4
 8000b94:	015a      	lsls	r2, r3, #5
 8000b96:	d411      	bmi.n	8000bbc <__aeabi_fmul+0x248>
 8000b98:	019b      	lsls	r3, r3, #6
 8000b9a:	0a5b      	lsrs	r3, r3, #9
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e744      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	464a      	mov	r2, r9
 8000ba4:	03db      	lsls	r3, r3, #15
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	025b      	lsls	r3, r3, #9
 8000baa:	0a5b      	lsrs	r3, r3, #9
 8000bac:	0037      	movs	r7, r6
 8000bae:	22ff      	movs	r2, #255	; 0xff
 8000bb0:	e73b      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000bb2:	9501      	str	r5, [sp, #4]
 8000bb4:	e787      	b.n	8000ac6 <__aeabi_fmul+0x152>
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e736      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e733      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	03db      	lsls	r3, r3, #15
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	0a5b      	lsrs	r3, r3, #9
 8000bcc:	22ff      	movs	r2, #255	; 0xff
 8000bce:	e72c      	b.n	8000a2a <__aeabi_fmul+0xb6>
 8000bd0:	08002dfc 	.word	0x08002dfc
 8000bd4:	f7ffffff 	.word	0xf7ffffff

08000bd8 <__aeabi_fsub>:
 8000bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bda:	4647      	mov	r7, r8
 8000bdc:	46ce      	mov	lr, r9
 8000bde:	0044      	lsls	r4, r0, #1
 8000be0:	0fc2      	lsrs	r2, r0, #31
 8000be2:	b580      	push	{r7, lr}
 8000be4:	0247      	lsls	r7, r0, #9
 8000be6:	0248      	lsls	r0, r1, #9
 8000be8:	0a40      	lsrs	r0, r0, #9
 8000bea:	4684      	mov	ip, r0
 8000bec:	4666      	mov	r6, ip
 8000bee:	0048      	lsls	r0, r1, #1
 8000bf0:	0a7f      	lsrs	r7, r7, #9
 8000bf2:	0e24      	lsrs	r4, r4, #24
 8000bf4:	00f6      	lsls	r6, r6, #3
 8000bf6:	0025      	movs	r5, r4
 8000bf8:	4690      	mov	r8, r2
 8000bfa:	00fb      	lsls	r3, r7, #3
 8000bfc:	0e00      	lsrs	r0, r0, #24
 8000bfe:	0fc9      	lsrs	r1, r1, #31
 8000c00:	46b1      	mov	r9, r6
 8000c02:	28ff      	cmp	r0, #255	; 0xff
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fsub+0x30>
 8000c06:	e085      	b.n	8000d14 <__aeabi_fsub+0x13c>
 8000c08:	2601      	movs	r6, #1
 8000c0a:	4071      	eors	r1, r6
 8000c0c:	1a26      	subs	r6, r4, r0
 8000c0e:	4291      	cmp	r1, r2
 8000c10:	d057      	beq.n	8000cc2 <__aeabi_fsub+0xea>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	dd43      	ble.n	8000c9e <__aeabi_fsub+0xc6>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_fsub+0x44>
 8000c1a:	e07f      	b.n	8000d1c <__aeabi_fsub+0x144>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2900      	cmp	r1, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x4c>
 8000c22:	e0aa      	b.n	8000d7a <__aeabi_fsub+0x1a2>
 8000c24:	3e01      	subs	r6, #1
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d000      	beq.n	8000c2c <__aeabi_fsub+0x54>
 8000c2a:	e0f7      	b.n	8000e1c <__aeabi_fsub+0x244>
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	015a      	lsls	r2, r3, #5
 8000c30:	d400      	bmi.n	8000c34 <__aeabi_fsub+0x5c>
 8000c32:	e08b      	b.n	8000d4c <__aeabi_fsub+0x174>
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	099c      	lsrs	r4, r3, #6
 8000c38:	0020      	movs	r0, r4
 8000c3a:	f000 fac7 	bl	80011cc <__clzsi2>
 8000c3e:	3805      	subs	r0, #5
 8000c40:	4084      	lsls	r4, r0
 8000c42:	4285      	cmp	r5, r0
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_fsub+0x70>
 8000c46:	e0d3      	b.n	8000df0 <__aeabi_fsub+0x218>
 8000c48:	1b45      	subs	r5, r0, r5
 8000c4a:	0023      	movs	r3, r4
 8000c4c:	2020      	movs	r0, #32
 8000c4e:	3501      	adds	r5, #1
 8000c50:	40eb      	lsrs	r3, r5
 8000c52:	1b45      	subs	r5, r0, r5
 8000c54:	40ac      	lsls	r4, r5
 8000c56:	1e62      	subs	r2, r4, #1
 8000c58:	4194      	sbcs	r4, r2
 8000c5a:	4323      	orrs	r3, r4
 8000c5c:	2407      	movs	r4, #7
 8000c5e:	2500      	movs	r5, #0
 8000c60:	401c      	ands	r4, r3
 8000c62:	2201      	movs	r2, #1
 8000c64:	4641      	mov	r1, r8
 8000c66:	400a      	ands	r2, r1
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d004      	beq.n	8000c76 <__aeabi_fsub+0x9e>
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	4019      	ands	r1, r3
 8000c70:	2904      	cmp	r1, #4
 8000c72:	d000      	beq.n	8000c76 <__aeabi_fsub+0x9e>
 8000c74:	3304      	adds	r3, #4
 8000c76:	0159      	lsls	r1, r3, #5
 8000c78:	d400      	bmi.n	8000c7c <__aeabi_fsub+0xa4>
 8000c7a:	e080      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000c7c:	3501      	adds	r5, #1
 8000c7e:	b2ec      	uxtb	r4, r5
 8000c80:	2dff      	cmp	r5, #255	; 0xff
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fsub+0xae>
 8000c84:	e0a3      	b.n	8000dce <__aeabi_fsub+0x1f6>
 8000c86:	24ff      	movs	r4, #255	; 0xff
 8000c88:	2300      	movs	r3, #0
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	05e4      	lsls	r4, r4, #23
 8000c8e:	0a58      	lsrs	r0, r3, #9
 8000c90:	07d2      	lsls	r2, r2, #31
 8000c92:	4320      	orrs	r0, r4
 8000c94:	4310      	orrs	r0, r2
 8000c96:	bc0c      	pop	{r2, r3}
 8000c98:	4690      	mov	r8, r2
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d174      	bne.n	8000d8c <__aeabi_fsub+0x1b4>
 8000ca2:	1c60      	adds	r0, r4, #1
 8000ca4:	b2c0      	uxtb	r0, r0
 8000ca6:	2801      	cmp	r0, #1
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_fsub+0xd4>
 8000caa:	e0a7      	b.n	8000dfc <__aeabi_fsub+0x224>
 8000cac:	464a      	mov	r2, r9
 8000cae:	1a9c      	subs	r4, r3, r2
 8000cb0:	0162      	lsls	r2, r4, #5
 8000cb2:	d500      	bpl.n	8000cb6 <__aeabi_fsub+0xde>
 8000cb4:	e0b6      	b.n	8000e24 <__aeabi_fsub+0x24c>
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d1be      	bne.n	8000c38 <__aeabi_fsub+0x60>
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2400      	movs	r4, #0
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e7e3      	b.n	8000c8a <__aeabi_fsub+0xb2>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	dc00      	bgt.n	8000cc8 <__aeabi_fsub+0xf0>
 8000cc6:	e085      	b.n	8000dd4 <__aeabi_fsub+0x1fc>
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d046      	beq.n	8000d5a <__aeabi_fsub+0x182>
 8000ccc:	2cff      	cmp	r4, #255	; 0xff
 8000cce:	d049      	beq.n	8000d64 <__aeabi_fsub+0x18c>
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	4648      	mov	r0, r9
 8000cd4:	04d2      	lsls	r2, r2, #19
 8000cd6:	4310      	orrs	r0, r2
 8000cd8:	4681      	mov	r9, r0
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2e1b      	cmp	r6, #27
 8000cde:	dc09      	bgt.n	8000cf4 <__aeabi_fsub+0x11c>
 8000ce0:	2020      	movs	r0, #32
 8000ce2:	464c      	mov	r4, r9
 8000ce4:	1b80      	subs	r0, r0, r6
 8000ce6:	4084      	lsls	r4, r0
 8000ce8:	464a      	mov	r2, r9
 8000cea:	0020      	movs	r0, r4
 8000cec:	40f2      	lsrs	r2, r6
 8000cee:	1e44      	subs	r4, r0, #1
 8000cf0:	41a0      	sbcs	r0, r4
 8000cf2:	4302      	orrs	r2, r0
 8000cf4:	189b      	adds	r3, r3, r2
 8000cf6:	015a      	lsls	r2, r3, #5
 8000cf8:	d528      	bpl.n	8000d4c <__aeabi_fsub+0x174>
 8000cfa:	3501      	adds	r5, #1
 8000cfc:	2dff      	cmp	r5, #255	; 0xff
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fsub+0x12a>
 8000d00:	e0a8      	b.n	8000e54 <__aeabi_fsub+0x27c>
 8000d02:	2201      	movs	r2, #1
 8000d04:	2407      	movs	r4, #7
 8000d06:	4994      	ldr	r1, [pc, #592]	; (8000f58 <__aeabi_fsub+0x380>)
 8000d08:	401a      	ands	r2, r3
 8000d0a:	085b      	lsrs	r3, r3, #1
 8000d0c:	400b      	ands	r3, r1
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	401c      	ands	r4, r3
 8000d12:	e7a6      	b.n	8000c62 <__aeabi_fsub+0x8a>
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fsub+0x142>
 8000d18:	e778      	b.n	8000c0c <__aeabi_fsub+0x34>
 8000d1a:	e775      	b.n	8000c08 <__aeabi_fsub+0x30>
 8000d1c:	2cff      	cmp	r4, #255	; 0xff
 8000d1e:	d054      	beq.n	8000dca <__aeabi_fsub+0x1f2>
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	4649      	mov	r1, r9
 8000d24:	04d2      	lsls	r2, r2, #19
 8000d26:	4311      	orrs	r1, r2
 8000d28:	4689      	mov	r9, r1
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2e1b      	cmp	r6, #27
 8000d2e:	dc09      	bgt.n	8000d44 <__aeabi_fsub+0x16c>
 8000d30:	2120      	movs	r1, #32
 8000d32:	4648      	mov	r0, r9
 8000d34:	1b89      	subs	r1, r1, r6
 8000d36:	4088      	lsls	r0, r1
 8000d38:	464a      	mov	r2, r9
 8000d3a:	0001      	movs	r1, r0
 8000d3c:	40f2      	lsrs	r2, r6
 8000d3e:	1e48      	subs	r0, r1, #1
 8000d40:	4181      	sbcs	r1, r0
 8000d42:	430a      	orrs	r2, r1
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	015a      	lsls	r2, r3, #5
 8000d48:	d500      	bpl.n	8000d4c <__aeabi_fsub+0x174>
 8000d4a:	e773      	b.n	8000c34 <__aeabi_fsub+0x5c>
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4641      	mov	r1, r8
 8000d50:	400a      	ands	r2, r1
 8000d52:	0759      	lsls	r1, r3, #29
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fsub+0x180>
 8000d56:	e789      	b.n	8000c6c <__aeabi_fsub+0x94>
 8000d58:	e011      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d158      	bne.n	8000e12 <__aeabi_fsub+0x23a>
 8000d60:	2cff      	cmp	r4, #255	; 0xff
 8000d62:	d10c      	bne.n	8000d7e <__aeabi_fsub+0x1a6>
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_fsub+0x194>
 8000d6a:	e78c      	b.n	8000c86 <__aeabi_fsub+0xae>
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	03c0      	lsls	r0, r0, #15
 8000d70:	4303      	orrs	r3, r0
 8000d72:	025b      	lsls	r3, r3, #9
 8000d74:	0a5b      	lsrs	r3, r3, #9
 8000d76:	24ff      	movs	r4, #255	; 0xff
 8000d78:	e787      	b.n	8000c8a <__aeabi_fsub+0xb2>
 8000d7a:	2cff      	cmp	r4, #255	; 0xff
 8000d7c:	d025      	beq.n	8000dca <__aeabi_fsub+0x1f2>
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	2dff      	cmp	r5, #255	; 0xff
 8000d82:	d0f0      	beq.n	8000d66 <__aeabi_fsub+0x18e>
 8000d84:	025b      	lsls	r3, r3, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	b2ec      	uxtb	r4, r5
 8000d8a:	e77e      	b.n	8000c8a <__aeabi_fsub+0xb2>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d04d      	beq.n	8000e2c <__aeabi_fsub+0x254>
 8000d90:	28ff      	cmp	r0, #255	; 0xff
 8000d92:	d018      	beq.n	8000dc6 <__aeabi_fsub+0x1ee>
 8000d94:	2480      	movs	r4, #128	; 0x80
 8000d96:	04e4      	lsls	r4, r4, #19
 8000d98:	4272      	negs	r2, r6
 8000d9a:	4323      	orrs	r3, r4
 8000d9c:	2a1b      	cmp	r2, #27
 8000d9e:	dd00      	ble.n	8000da2 <__aeabi_fsub+0x1ca>
 8000da0:	e0c4      	b.n	8000f2c <__aeabi_fsub+0x354>
 8000da2:	001c      	movs	r4, r3
 8000da4:	2520      	movs	r5, #32
 8000da6:	40d4      	lsrs	r4, r2
 8000da8:	1aaa      	subs	r2, r5, r2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	4193      	sbcs	r3, r2
 8000db0:	4323      	orrs	r3, r4
 8000db2:	464a      	mov	r2, r9
 8000db4:	0005      	movs	r5, r0
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	4688      	mov	r8, r1
 8000dba:	e738      	b.n	8000c2e <__aeabi_fsub+0x56>
 8000dbc:	1c72      	adds	r2, r6, #1
 8000dbe:	d0f8      	beq.n	8000db2 <__aeabi_fsub+0x1da>
 8000dc0:	43f2      	mvns	r2, r6
 8000dc2:	28ff      	cmp	r0, #255	; 0xff
 8000dc4:	d1ea      	bne.n	8000d9c <__aeabi_fsub+0x1c4>
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	464b      	mov	r3, r9
 8000dca:	25ff      	movs	r5, #255	; 0xff
 8000dcc:	e7d7      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000dce:	019b      	lsls	r3, r3, #6
 8000dd0:	0a5b      	lsrs	r3, r3, #9
 8000dd2:	e75a      	b.n	8000c8a <__aeabi_fsub+0xb2>
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d141      	bne.n	8000e5c <__aeabi_fsub+0x284>
 8000dd8:	1c65      	adds	r5, r4, #1
 8000dda:	b2e9      	uxtb	r1, r5
 8000ddc:	2901      	cmp	r1, #1
 8000dde:	dd45      	ble.n	8000e6c <__aeabi_fsub+0x294>
 8000de0:	2dff      	cmp	r5, #255	; 0xff
 8000de2:	d100      	bne.n	8000de6 <__aeabi_fsub+0x20e>
 8000de4:	e74f      	b.n	8000c86 <__aeabi_fsub+0xae>
 8000de6:	2407      	movs	r4, #7
 8000de8:	444b      	add	r3, r9
 8000dea:	085b      	lsrs	r3, r3, #1
 8000dec:	401c      	ands	r4, r3
 8000dee:	e738      	b.n	8000c62 <__aeabi_fsub+0x8a>
 8000df0:	2207      	movs	r2, #7
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <__aeabi_fsub+0x384>)
 8000df4:	1a2d      	subs	r5, r5, r0
 8000df6:	4023      	ands	r3, r4
 8000df8:	4014      	ands	r4, r2
 8000dfa:	e732      	b.n	8000c62 <__aeabi_fsub+0x8a>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d11d      	bne.n	8000e3c <__aeabi_fsub+0x264>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d17a      	bne.n	8000efa <__aeabi_fsub+0x322>
 8000e04:	464b      	mov	r3, r9
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0x234>
 8000e0a:	e091      	b.n	8000f30 <__aeabi_fsub+0x358>
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	2500      	movs	r5, #0
 8000e10:	e7b5      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000e12:	3e01      	subs	r6, #1
 8000e14:	2e00      	cmp	r6, #0
 8000e16:	d119      	bne.n	8000e4c <__aeabi_fsub+0x274>
 8000e18:	444b      	add	r3, r9
 8000e1a:	e76c      	b.n	8000cf6 <__aeabi_fsub+0x11e>
 8000e1c:	2cff      	cmp	r4, #255	; 0xff
 8000e1e:	d184      	bne.n	8000d2a <__aeabi_fsub+0x152>
 8000e20:	25ff      	movs	r5, #255	; 0xff
 8000e22:	e7ac      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000e24:	464a      	mov	r2, r9
 8000e26:	4688      	mov	r8, r1
 8000e28:	1ad4      	subs	r4, r2, r3
 8000e2a:	e705      	b.n	8000c38 <__aeabi_fsub+0x60>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1c5      	bne.n	8000dbc <__aeabi_fsub+0x1e4>
 8000e30:	000a      	movs	r2, r1
 8000e32:	28ff      	cmp	r0, #255	; 0xff
 8000e34:	d0c8      	beq.n	8000dc8 <__aeabi_fsub+0x1f0>
 8000e36:	0005      	movs	r5, r0
 8000e38:	464b      	mov	r3, r9
 8000e3a:	e7a0      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d149      	bne.n	8000ed4 <__aeabi_fsub+0x2fc>
 8000e40:	464b      	mov	r3, r9
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d077      	beq.n	8000f36 <__aeabi_fsub+0x35e>
 8000e46:	000a      	movs	r2, r1
 8000e48:	25ff      	movs	r5, #255	; 0xff
 8000e4a:	e798      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000e4c:	2cff      	cmp	r4, #255	; 0xff
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fsub+0x27a>
 8000e50:	e743      	b.n	8000cda <__aeabi_fsub+0x102>
 8000e52:	e787      	b.n	8000d64 <__aeabi_fsub+0x18c>
 8000e54:	000a      	movs	r2, r1
 8000e56:	24ff      	movs	r4, #255	; 0xff
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e716      	b.n	8000c8a <__aeabi_fsub+0xb2>
 8000e5c:	2c00      	cmp	r4, #0
 8000e5e:	d115      	bne.n	8000e8c <__aeabi_fsub+0x2b4>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d157      	bne.n	8000f14 <__aeabi_fsub+0x33c>
 8000e64:	28ff      	cmp	r0, #255	; 0xff
 8000e66:	d1e6      	bne.n	8000e36 <__aeabi_fsub+0x25e>
 8000e68:	464b      	mov	r3, r9
 8000e6a:	e77b      	b.n	8000d64 <__aeabi_fsub+0x18c>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d120      	bne.n	8000eb2 <__aeabi_fsub+0x2da>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d057      	beq.n	8000f24 <__aeabi_fsub+0x34c>
 8000e74:	4649      	mov	r1, r9
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d053      	beq.n	8000f22 <__aeabi_fsub+0x34a>
 8000e7a:	444b      	add	r3, r9
 8000e7c:	015a      	lsls	r2, r3, #5
 8000e7e:	d568      	bpl.n	8000f52 <__aeabi_fsub+0x37a>
 8000e80:	2407      	movs	r4, #7
 8000e82:	4a36      	ldr	r2, [pc, #216]	; (8000f5c <__aeabi_fsub+0x384>)
 8000e84:	401c      	ands	r4, r3
 8000e86:	2501      	movs	r5, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	e6ea      	b.n	8000c62 <__aeabi_fsub+0x8a>
 8000e8c:	28ff      	cmp	r0, #255	; 0xff
 8000e8e:	d0eb      	beq.n	8000e68 <__aeabi_fsub+0x290>
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	04d2      	lsls	r2, r2, #19
 8000e94:	4276      	negs	r6, r6
 8000e96:	4313      	orrs	r3, r2
 8000e98:	2e1b      	cmp	r6, #27
 8000e9a:	dc53      	bgt.n	8000f44 <__aeabi_fsub+0x36c>
 8000e9c:	2520      	movs	r5, #32
 8000e9e:	1bad      	subs	r5, r5, r6
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	40ab      	lsls	r3, r5
 8000ea4:	40f2      	lsrs	r2, r6
 8000ea6:	1e5c      	subs	r4, r3, #1
 8000ea8:	41a3      	sbcs	r3, r4
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	444b      	add	r3, r9
 8000eae:	0005      	movs	r5, r0
 8000eb0:	e721      	b.n	8000cf6 <__aeabi_fsub+0x11e>
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0d8      	beq.n	8000e68 <__aeabi_fsub+0x290>
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x2e6>
 8000ebc:	e752      	b.n	8000d64 <__aeabi_fsub+0x18c>
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	03c9      	lsls	r1, r1, #15
 8000ec2:	420f      	tst	r7, r1
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x2f0>
 8000ec6:	e74d      	b.n	8000d64 <__aeabi_fsub+0x18c>
 8000ec8:	4660      	mov	r0, ip
 8000eca:	4208      	tst	r0, r1
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fsub+0x2f8>
 8000ece:	e749      	b.n	8000d64 <__aeabi_fsub+0x18c>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	e747      	b.n	8000d64 <__aeabi_fsub+0x18c>
 8000ed4:	4648      	mov	r0, r9
 8000ed6:	25ff      	movs	r5, #255	; 0xff
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x306>
 8000edc:	e74f      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	03d2      	lsls	r2, r2, #15
 8000ee2:	4217      	tst	r7, r2
 8000ee4:	d004      	beq.n	8000ef0 <__aeabi_fsub+0x318>
 8000ee6:	4660      	mov	r0, ip
 8000ee8:	4210      	tst	r0, r2
 8000eea:	d101      	bne.n	8000ef0 <__aeabi_fsub+0x318>
 8000eec:	464b      	mov	r3, r9
 8000eee:	4688      	mov	r8, r1
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	25ff      	movs	r5, #255	; 0xff
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	e741      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000efa:	4648      	mov	r0, r9
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d01f      	beq.n	8000f40 <__aeabi_fsub+0x368>
 8000f00:	1a1a      	subs	r2, r3, r0
 8000f02:	0150      	lsls	r0, r2, #5
 8000f04:	d520      	bpl.n	8000f48 <__aeabi_fsub+0x370>
 8000f06:	464a      	mov	r2, r9
 8000f08:	2407      	movs	r4, #7
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	401c      	ands	r4, r3
 8000f0e:	4688      	mov	r8, r1
 8000f10:	2500      	movs	r5, #0
 8000f12:	e6a6      	b.n	8000c62 <__aeabi_fsub+0x8a>
 8000f14:	1c74      	adds	r4, r6, #1
 8000f16:	d0c9      	beq.n	8000eac <__aeabi_fsub+0x2d4>
 8000f18:	43f6      	mvns	r6, r6
 8000f1a:	28ff      	cmp	r0, #255	; 0xff
 8000f1c:	d1bc      	bne.n	8000e98 <__aeabi_fsub+0x2c0>
 8000f1e:	464b      	mov	r3, r9
 8000f20:	e720      	b.n	8000d64 <__aeabi_fsub+0x18c>
 8000f22:	4699      	mov	r9, r3
 8000f24:	464b      	mov	r3, r9
 8000f26:	2500      	movs	r5, #0
 8000f28:	08db      	lsrs	r3, r3, #3
 8000f2a:	e72b      	b.n	8000d84 <__aeabi_fsub+0x1ac>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e740      	b.n	8000db2 <__aeabi_fsub+0x1da>
 8000f30:	2200      	movs	r2, #0
 8000f32:	2300      	movs	r3, #0
 8000f34:	e6a9      	b.n	8000c8a <__aeabi_fsub+0xb2>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	2200      	movs	r2, #0
 8000f3a:	03db      	lsls	r3, r3, #15
 8000f3c:	24ff      	movs	r4, #255	; 0xff
 8000f3e:	e6a4      	b.n	8000c8a <__aeabi_fsub+0xb2>
 8000f40:	2500      	movs	r5, #0
 8000f42:	e71c      	b.n	8000d7e <__aeabi_fsub+0x1a6>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e7b1      	b.n	8000eac <__aeabi_fsub+0x2d4>
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d0f1      	beq.n	8000f30 <__aeabi_fsub+0x358>
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	2500      	movs	r5, #0
 8000f50:	e6fc      	b.n	8000d4c <__aeabi_fsub+0x174>
 8000f52:	2500      	movs	r5, #0
 8000f54:	e6fa      	b.n	8000d4c <__aeabi_fsub+0x174>
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	7dffffff 	.word	0x7dffffff
 8000f5c:	fbffffff 	.word	0xfbffffff

08000f60 <__aeabi_fcmpun>:
 8000f60:	0242      	lsls	r2, r0, #9
 8000f62:	024b      	lsls	r3, r1, #9
 8000f64:	0040      	lsls	r0, r0, #1
 8000f66:	0049      	lsls	r1, r1, #1
 8000f68:	0a52      	lsrs	r2, r2, #9
 8000f6a:	0a5b      	lsrs	r3, r3, #9
 8000f6c:	0e09      	lsrs	r1, r1, #24
 8000f6e:	0e00      	lsrs	r0, r0, #24
 8000f70:	28ff      	cmp	r0, #255	; 0xff
 8000f72:	d006      	beq.n	8000f82 <__aeabi_fcmpun+0x22>
 8000f74:	2000      	movs	r0, #0
 8000f76:	29ff      	cmp	r1, #255	; 0xff
 8000f78:	d102      	bne.n	8000f80 <__aeabi_fcmpun+0x20>
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	1e43      	subs	r3, r0, #1
 8000f7e:	4198      	sbcs	r0, r3
 8000f80:	4770      	bx	lr
 8000f82:	38fe      	subs	r0, #254	; 0xfe
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d1fb      	bne.n	8000f80 <__aeabi_fcmpun+0x20>
 8000f88:	e7f4      	b.n	8000f74 <__aeabi_fcmpun+0x14>
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <__aeabi_i2f>:
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	d03d      	beq.n	800100e <__aeabi_i2f+0x82>
 8000f92:	17c3      	asrs	r3, r0, #31
 8000f94:	18c5      	adds	r5, r0, r3
 8000f96:	405d      	eors	r5, r3
 8000f98:	0fc4      	lsrs	r4, r0, #31
 8000f9a:	0028      	movs	r0, r5
 8000f9c:	f000 f916 	bl	80011cc <__clzsi2>
 8000fa0:	229e      	movs	r2, #158	; 0x9e
 8000fa2:	1a12      	subs	r2, r2, r0
 8000fa4:	2a96      	cmp	r2, #150	; 0x96
 8000fa6:	dc07      	bgt.n	8000fb8 <__aeabi_i2f+0x2c>
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	2808      	cmp	r0, #8
 8000fac:	dd33      	ble.n	8001016 <__aeabi_i2f+0x8a>
 8000fae:	3808      	subs	r0, #8
 8000fb0:	4085      	lsls	r5, r0
 8000fb2:	0268      	lsls	r0, r5, #9
 8000fb4:	0a40      	lsrs	r0, r0, #9
 8000fb6:	e023      	b.n	8001000 <__aeabi_i2f+0x74>
 8000fb8:	2a99      	cmp	r2, #153	; 0x99
 8000fba:	dd0b      	ble.n	8000fd4 <__aeabi_i2f+0x48>
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	0029      	movs	r1, r5
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	40d9      	lsrs	r1, r3
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	331b      	adds	r3, #27
 8000fc8:	409d      	lsls	r5, r3
 8000fca:	002b      	movs	r3, r5
 8000fcc:	1e5d      	subs	r5, r3, #1
 8000fce:	41ab      	sbcs	r3, r5
 8000fd0:	4319      	orrs	r1, r3
 8000fd2:	000d      	movs	r5, r1
 8000fd4:	2805      	cmp	r0, #5
 8000fd6:	dd01      	ble.n	8000fdc <__aeabi_i2f+0x50>
 8000fd8:	1f43      	subs	r3, r0, #5
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	002b      	movs	r3, r5
 8000fde:	490f      	ldr	r1, [pc, #60]	; (800101c <__aeabi_i2f+0x90>)
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	076e      	lsls	r6, r5, #29
 8000fe4:	d009      	beq.n	8000ffa <__aeabi_i2f+0x6e>
 8000fe6:	260f      	movs	r6, #15
 8000fe8:	4035      	ands	r5, r6
 8000fea:	2d04      	cmp	r5, #4
 8000fec:	d005      	beq.n	8000ffa <__aeabi_i2f+0x6e>
 8000fee:	3304      	adds	r3, #4
 8000ff0:	015d      	lsls	r5, r3, #5
 8000ff2:	d502      	bpl.n	8000ffa <__aeabi_i2f+0x6e>
 8000ff4:	229f      	movs	r2, #159	; 0x9f
 8000ff6:	400b      	ands	r3, r1
 8000ff8:	1a12      	subs	r2, r2, r0
 8000ffa:	019b      	lsls	r3, r3, #6
 8000ffc:	0a58      	lsrs	r0, r3, #9
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	0240      	lsls	r0, r0, #9
 8001002:	05d2      	lsls	r2, r2, #23
 8001004:	0a40      	lsrs	r0, r0, #9
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4310      	orrs	r0, r2
 800100a:	4320      	orrs	r0, r4
 800100c:	bd70      	pop	{r4, r5, r6, pc}
 800100e:	2400      	movs	r4, #0
 8001010:	2200      	movs	r2, #0
 8001012:	2000      	movs	r0, #0
 8001014:	e7f4      	b.n	8001000 <__aeabi_i2f+0x74>
 8001016:	0268      	lsls	r0, r5, #9
 8001018:	0a40      	lsrs	r0, r0, #9
 800101a:	e7f1      	b.n	8001000 <__aeabi_i2f+0x74>
 800101c:	fbffffff 	.word	0xfbffffff

08001020 <__aeabi_f2d>:
 8001020:	0041      	lsls	r1, r0, #1
 8001022:	0e09      	lsrs	r1, r1, #24
 8001024:	1c4b      	adds	r3, r1, #1
 8001026:	b570      	push	{r4, r5, r6, lr}
 8001028:	b2db      	uxtb	r3, r3
 800102a:	0246      	lsls	r6, r0, #9
 800102c:	0a75      	lsrs	r5, r6, #9
 800102e:	0fc4      	lsrs	r4, r0, #31
 8001030:	2b01      	cmp	r3, #1
 8001032:	dd14      	ble.n	800105e <__aeabi_f2d+0x3e>
 8001034:	23e0      	movs	r3, #224	; 0xe0
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	076d      	lsls	r5, r5, #29
 800103a:	0b36      	lsrs	r6, r6, #12
 800103c:	18cb      	adds	r3, r1, r3
 800103e:	2100      	movs	r1, #0
 8001040:	0d0a      	lsrs	r2, r1, #20
 8001042:	0028      	movs	r0, r5
 8001044:	0512      	lsls	r2, r2, #20
 8001046:	4d1c      	ldr	r5, [pc, #112]	; (80010b8 <__aeabi_f2d+0x98>)
 8001048:	4332      	orrs	r2, r6
 800104a:	055b      	lsls	r3, r3, #21
 800104c:	402a      	ands	r2, r5
 800104e:	085b      	lsrs	r3, r3, #1
 8001050:	4313      	orrs	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	07e4      	lsls	r4, r4, #31
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	4323      	orrs	r3, r4
 800105a:	0019      	movs	r1, r3
 800105c:	bd70      	pop	{r4, r5, r6, pc}
 800105e:	2900      	cmp	r1, #0
 8001060:	d114      	bne.n	800108c <__aeabi_f2d+0x6c>
 8001062:	2d00      	cmp	r5, #0
 8001064:	d01e      	beq.n	80010a4 <__aeabi_f2d+0x84>
 8001066:	0028      	movs	r0, r5
 8001068:	f000 f8b0 	bl	80011cc <__clzsi2>
 800106c:	280a      	cmp	r0, #10
 800106e:	dc1c      	bgt.n	80010aa <__aeabi_f2d+0x8a>
 8001070:	230b      	movs	r3, #11
 8001072:	002a      	movs	r2, r5
 8001074:	1a1b      	subs	r3, r3, r0
 8001076:	40da      	lsrs	r2, r3
 8001078:	0003      	movs	r3, r0
 800107a:	3315      	adds	r3, #21
 800107c:	409d      	lsls	r5, r3
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <__aeabi_f2d+0x9c>)
 8001080:	0312      	lsls	r2, r2, #12
 8001082:	1a1b      	subs	r3, r3, r0
 8001084:	055b      	lsls	r3, r3, #21
 8001086:	0b16      	lsrs	r6, r2, #12
 8001088:	0d5b      	lsrs	r3, r3, #21
 800108a:	e7d8      	b.n	800103e <__aeabi_f2d+0x1e>
 800108c:	2d00      	cmp	r5, #0
 800108e:	d006      	beq.n	800109e <__aeabi_f2d+0x7e>
 8001090:	0b32      	lsrs	r2, r6, #12
 8001092:	2680      	movs	r6, #128	; 0x80
 8001094:	0336      	lsls	r6, r6, #12
 8001096:	076d      	lsls	r5, r5, #29
 8001098:	4316      	orrs	r6, r2
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <__aeabi_f2d+0xa0>)
 800109c:	e7cf      	b.n	800103e <__aeabi_f2d+0x1e>
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <__aeabi_f2d+0xa0>)
 80010a0:	2600      	movs	r6, #0
 80010a2:	e7cc      	b.n	800103e <__aeabi_f2d+0x1e>
 80010a4:	2300      	movs	r3, #0
 80010a6:	2600      	movs	r6, #0
 80010a8:	e7c9      	b.n	800103e <__aeabi_f2d+0x1e>
 80010aa:	0003      	movs	r3, r0
 80010ac:	002a      	movs	r2, r5
 80010ae:	3b0b      	subs	r3, #11
 80010b0:	409a      	lsls	r2, r3
 80010b2:	2500      	movs	r5, #0
 80010b4:	e7e3      	b.n	800107e <__aeabi_f2d+0x5e>
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	800fffff 	.word	0x800fffff
 80010bc:	00000389 	.word	0x00000389
 80010c0:	000007ff 	.word	0x000007ff

080010c4 <__aeabi_d2f>:
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	004c      	lsls	r4, r1, #1
 80010c8:	0d64      	lsrs	r4, r4, #21
 80010ca:	030b      	lsls	r3, r1, #12
 80010cc:	1c62      	adds	r2, r4, #1
 80010ce:	0a5b      	lsrs	r3, r3, #9
 80010d0:	0f46      	lsrs	r6, r0, #29
 80010d2:	0552      	lsls	r2, r2, #21
 80010d4:	0fc9      	lsrs	r1, r1, #31
 80010d6:	431e      	orrs	r6, r3
 80010d8:	00c5      	lsls	r5, r0, #3
 80010da:	0d52      	lsrs	r2, r2, #21
 80010dc:	2a01      	cmp	r2, #1
 80010de:	dd29      	ble.n	8001134 <__aeabi_d2f+0x70>
 80010e0:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <__aeabi_d2f+0xfc>)
 80010e2:	18e7      	adds	r7, r4, r3
 80010e4:	2ffe      	cmp	r7, #254	; 0xfe
 80010e6:	dc1c      	bgt.n	8001122 <__aeabi_d2f+0x5e>
 80010e8:	2f00      	cmp	r7, #0
 80010ea:	dd3b      	ble.n	8001164 <__aeabi_d2f+0xa0>
 80010ec:	0180      	lsls	r0, r0, #6
 80010ee:	1e43      	subs	r3, r0, #1
 80010f0:	4198      	sbcs	r0, r3
 80010f2:	2207      	movs	r2, #7
 80010f4:	00f3      	lsls	r3, r6, #3
 80010f6:	0f6d      	lsrs	r5, r5, #29
 80010f8:	4303      	orrs	r3, r0
 80010fa:	432b      	orrs	r3, r5
 80010fc:	401a      	ands	r2, r3
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d004      	beq.n	800110c <__aeabi_d2f+0x48>
 8001102:	220f      	movs	r2, #15
 8001104:	401a      	ands	r2, r3
 8001106:	2a04      	cmp	r2, #4
 8001108:	d000      	beq.n	800110c <__aeabi_d2f+0x48>
 800110a:	3304      	adds	r3, #4
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	04d2      	lsls	r2, r2, #19
 8001110:	401a      	ands	r2, r3
 8001112:	d024      	beq.n	800115e <__aeabi_d2f+0x9a>
 8001114:	3701      	adds	r7, #1
 8001116:	b2fa      	uxtb	r2, r7
 8001118:	2fff      	cmp	r7, #255	; 0xff
 800111a:	d002      	beq.n	8001122 <__aeabi_d2f+0x5e>
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	0a58      	lsrs	r0, r3, #9
 8001120:	e001      	b.n	8001126 <__aeabi_d2f+0x62>
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	2000      	movs	r0, #0
 8001126:	0240      	lsls	r0, r0, #9
 8001128:	05d2      	lsls	r2, r2, #23
 800112a:	0a40      	lsrs	r0, r0, #9
 800112c:	07c9      	lsls	r1, r1, #31
 800112e:	4310      	orrs	r0, r2
 8001130:	4308      	orrs	r0, r1
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001134:	4335      	orrs	r5, r6
 8001136:	2c00      	cmp	r4, #0
 8001138:	d104      	bne.n	8001144 <__aeabi_d2f+0x80>
 800113a:	2d00      	cmp	r5, #0
 800113c:	d10a      	bne.n	8001154 <__aeabi_d2f+0x90>
 800113e:	2200      	movs	r2, #0
 8001140:	2000      	movs	r0, #0
 8001142:	e7f0      	b.n	8001126 <__aeabi_d2f+0x62>
 8001144:	2d00      	cmp	r5, #0
 8001146:	d0ec      	beq.n	8001122 <__aeabi_d2f+0x5e>
 8001148:	2080      	movs	r0, #128	; 0x80
 800114a:	03c0      	lsls	r0, r0, #15
 800114c:	4330      	orrs	r0, r6
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	e7e9      	b.n	8001126 <__aeabi_d2f+0x62>
 8001152:	2400      	movs	r4, #0
 8001154:	2300      	movs	r3, #0
 8001156:	025b      	lsls	r3, r3, #9
 8001158:	0a58      	lsrs	r0, r3, #9
 800115a:	b2e2      	uxtb	r2, r4
 800115c:	e7e3      	b.n	8001126 <__aeabi_d2f+0x62>
 800115e:	08db      	lsrs	r3, r3, #3
 8001160:	003c      	movs	r4, r7
 8001162:	e7f8      	b.n	8001156 <__aeabi_d2f+0x92>
 8001164:	003b      	movs	r3, r7
 8001166:	3317      	adds	r3, #23
 8001168:	dbf3      	blt.n	8001152 <__aeabi_d2f+0x8e>
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	4333      	orrs	r3, r6
 8001170:	261e      	movs	r6, #30
 8001172:	1bf6      	subs	r6, r6, r7
 8001174:	2e1f      	cmp	r6, #31
 8001176:	dd14      	ble.n	80011a2 <__aeabi_d2f+0xde>
 8001178:	2202      	movs	r2, #2
 800117a:	4252      	negs	r2, r2
 800117c:	1bd7      	subs	r7, r2, r7
 800117e:	001a      	movs	r2, r3
 8001180:	40fa      	lsrs	r2, r7
 8001182:	0017      	movs	r7, r2
 8001184:	2e20      	cmp	r6, #32
 8001186:	d004      	beq.n	8001192 <__aeabi_d2f+0xce>
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <__aeabi_d2f+0x100>)
 800118a:	4694      	mov	ip, r2
 800118c:	4464      	add	r4, ip
 800118e:	40a3      	lsls	r3, r4
 8001190:	431d      	orrs	r5, r3
 8001192:	002b      	movs	r3, r5
 8001194:	1e5d      	subs	r5, r3, #1
 8001196:	41ab      	sbcs	r3, r5
 8001198:	2207      	movs	r2, #7
 800119a:	433b      	orrs	r3, r7
 800119c:	401a      	ands	r2, r3
 800119e:	2700      	movs	r7, #0
 80011a0:	e7ad      	b.n	80010fe <__aeabi_d2f+0x3a>
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <__aeabi_d2f+0x104>)
 80011a4:	0028      	movs	r0, r5
 80011a6:	18a2      	adds	r2, r4, r2
 80011a8:	4095      	lsls	r5, r2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	1e6c      	subs	r4, r5, #1
 80011ae:	41a5      	sbcs	r5, r4
 80011b0:	40f0      	lsrs	r0, r6
 80011b2:	2207      	movs	r2, #7
 80011b4:	432b      	orrs	r3, r5
 80011b6:	4303      	orrs	r3, r0
 80011b8:	401a      	ands	r2, r3
 80011ba:	2700      	movs	r7, #0
 80011bc:	e79f      	b.n	80010fe <__aeabi_d2f+0x3a>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	fffffc80 	.word	0xfffffc80
 80011c4:	fffffca2 	.word	0xfffffca2
 80011c8:	fffffc82 	.word	0xfffffc82

080011cc <__clzsi2>:
 80011cc:	211c      	movs	r1, #28
 80011ce:	2301      	movs	r3, #1
 80011d0:	041b      	lsls	r3, r3, #16
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d301      	bcc.n	80011da <__clzsi2+0xe>
 80011d6:	0c00      	lsrs	r0, r0, #16
 80011d8:	3910      	subs	r1, #16
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	4298      	cmp	r0, r3
 80011de:	d301      	bcc.n	80011e4 <__clzsi2+0x18>
 80011e0:	0a00      	lsrs	r0, r0, #8
 80011e2:	3908      	subs	r1, #8
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d301      	bcc.n	80011ee <__clzsi2+0x22>
 80011ea:	0900      	lsrs	r0, r0, #4
 80011ec:	3904      	subs	r1, #4
 80011ee:	a202      	add	r2, pc, #8	; (adr r2, 80011f8 <__clzsi2+0x2c>)
 80011f0:	5c10      	ldrb	r0, [r2, r0]
 80011f2:	1840      	adds	r0, r0, r1
 80011f4:	4770      	bx	lr
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	02020304 	.word	0x02020304
 80011fc:	01010101 	.word	0x01010101
	...

08001208 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800120e:	f000 fa83 	bl	8001718 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001212:	f000 f85d 	bl	80012d0 <SystemClock_Config>
	/* Result of the classifier */
	float32_t result[NB_OF_CLASSES];
	float32_t maxProba;
	uint32_t index;

	S.vectorDimension = VECTOR_DIMENSION;
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <main+0xac>)
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
	S.numberOfClasses = NB_OF_CLASSES;
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <main+0xac>)
 800121e:	2203      	movs	r2, #3
 8001220:	605a      	str	r2, [r3, #4]
	S.theta = theta;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <main+0xac>)
 8001224:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <main+0xb0>)
 8001226:	609a      	str	r2, [r3, #8]
	S.sigma = sigma;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <main+0xac>)
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <main+0xb4>)
 800122c:	60da      	str	r2, [r3, #12]
	S.classPriors = classPriors;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <main+0xac>)
 8001230:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <main+0xb8>)
 8001232:	611a      	str	r2, [r3, #16]
	S.epsilon = 4.328939296523643e-09f;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <main+0xac>)
 8001236:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <main+0xbc>)
 8001238:	615a      	str	r2, [r3, #20]

	in[0] = 1.5f;
 800123a:	2418      	movs	r4, #24
 800123c:	193b      	adds	r3, r7, r4
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	0592      	lsls	r2, r2, #22
 8001242:	601a      	str	r2, [r3, #0]
	in[1] = 1.0f;
 8001244:	193b      	adds	r3, r7, r4
 8001246:	22fe      	movs	r2, #254	; 0xfe
 8001248:	0592      	lsls	r2, r2, #22
 800124a:	605a      	str	r2, [r3, #4]

	arm_gaussian_naive_bayes_predict_f32(&S, in, result);
 800124c:	250c      	movs	r5, #12
 800124e:	197a      	adds	r2, r7, r5
 8001250:	1939      	adds	r1, r7, r4
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <main+0xac>)
 8001254:	0018      	movs	r0, r3
 8001256:	f000 f977 	bl	8001548 <arm_gaussian_naive_bayes_predict_f32>

	arm_max_f32(result, NB_OF_CLASSES, &maxProba, &index);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2608      	movs	r6, #8
 800125e:	19ba      	adds	r2, r7, r6
 8001260:	1978      	adds	r0, r7, r5
 8001262:	2103      	movs	r1, #3
 8001264:	f000 fa24 	bl	80016b0 <arm_max_f32>

#if defined(SEMIHOSTING)
	  printf("Class = %d\n", index);
	#endif

	in[0] = -1.5f;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <main+0xc0>)
 800126c:	601a      	str	r2, [r3, #0]
	in[1] = 1.0f;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	22fe      	movs	r2, #254	; 0xfe
 8001272:	0592      	lsls	r2, r2, #22
 8001274:	605a      	str	r2, [r3, #4]

	arm_gaussian_naive_bayes_predict_f32(&S, in, result);
 8001276:	197a      	adds	r2, r7, r5
 8001278:	1939      	adds	r1, r7, r4
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <main+0xac>)
 800127c:	0018      	movs	r0, r3
 800127e:	f000 f963 	bl	8001548 <arm_gaussian_naive_bayes_predict_f32>

	arm_max_f32(result, NB_OF_CLASSES, &maxProba, &index);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	19ba      	adds	r2, r7, r6
 8001286:	1978      	adds	r0, r7, r5
 8001288:	2103      	movs	r1, #3
 800128a:	f000 fa11 	bl	80016b0 <arm_max_f32>

#if defined(SEMIHOSTING)
	  printf("Class = %d\n", index);
	#endif

	in[0] = 0.0f;
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
	in[1] = -3.0f;
 8001294:	193b      	adds	r3, r7, r4
 8001296:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <main+0xc4>)
 8001298:	605a      	str	r2, [r3, #4]

	arm_gaussian_naive_bayes_predict_f32(&S, in, result);
 800129a:	197a      	adds	r2, r7, r5
 800129c:	1939      	adds	r1, r7, r4
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <main+0xac>)
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 f951 	bl	8001548 <arm_gaussian_naive_bayes_predict_f32>

	arm_max_f32(result, NB_OF_CLASSES, &maxProba, &index);
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	19ba      	adds	r2, r7, r6
 80012aa:	1978      	adds	r0, r7, r5
 80012ac:	2103      	movs	r1, #3
 80012ae:	f000 f9ff 	bl	80016b0 <arm_max_f32>
#if defined(SEMIHOSTING)
	  printf("Class = %d\n", index);
	#endif

#if !defined(SEMIHOSTING)
	while (1)
 80012b2:	e7fe      	b.n	80012b2 <main+0xaa>
 80012b4:	20000090 	.word	0x20000090
 80012b8:	08002e3c 	.word	0x08002e3c
 80012bc:	08002e54 	.word	0x08002e54
 80012c0:	08002e6c 	.word	0x08002e6c
 80012c4:	3194bdc1 	.word	0x3194bdc1
 80012c8:	bfc00000 	.word	0xbfc00000
 80012cc:	c0400000 	.word	0xc0400000

080012d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b095      	sub	sp, #84	; 0x54
 80012d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012d6:	2414      	movs	r4, #20
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	0018      	movs	r0, r3
 80012dc:	233c      	movs	r3, #60	; 0x3c
 80012de:	001a      	movs	r2, r3
 80012e0:	2100      	movs	r1, #0
 80012e2:	f001 fb7f 	bl	80029e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	0018      	movs	r0, r3
 80012ea:	2310      	movs	r3, #16
 80012ec:	001a      	movs	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f001 fb78 	bl	80029e4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 fb0d 	bl	8001918 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	2202      	movs	r2, #2
 8001302:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	193b      	adds	r3, r7, r4
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	0052      	lsls	r2, r2, #1
 800130a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800130c:	193b      	adds	r3, r7, r4
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001312:	193b      	adds	r3, r7, r4
 8001314:	2240      	movs	r2, #64	; 0x40
 8001316:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001318:	193b      	adds	r3, r7, r4
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800131e:	193b      	adds	r3, r7, r4
 8001320:	0018      	movs	r0, r3
 8001322:	f000 fb45 	bl	80019b0 <HAL_RCC_OscConfig>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x5e>
		Error_Handler();
 800132a:	f000 f82b 	bl	8001384 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2100      	movs	r1, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fe96 	bl	800207c <HAL_RCC_ClockConfig>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x88>
		Error_Handler();
 8001354:	f000 f816 	bl	8001384 <Error_Handler>
	}
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b015      	add	sp, #84	; 0x54
 800135e:	bd90      	pop	{r4, r7, pc}

08001360 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001372:	f000 f9f1 	bl	8001758 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40012c00 	.word	0x40012c00

08001384 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800138a:	e7fe      	b.n	800138a <Error_Handler+0x6>

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_MspInit+0x4c>)
 8001394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	2101      	movs	r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_MspInit+0x4c>)
 80013ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0549      	lsls	r1, r1, #21
 80013b4:	430a      	orrs	r2, r1
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_MspInit+0x4c>)
 80013ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	055b      	lsls	r3, r3, #21
 80013c0:	4013      	ands	r3, r2
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f9e0 	bl	8001790 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	0019      	movs	r1, r3
 80013f2:	200d      	movs	r0, #13
 80013f4:	f000 fa6a 	bl	80018cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80013f8:	200d      	movs	r0, #13
 80013fa:	f000 fa7c 	bl	80018f6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_InitTick+0xa8>)
 8001400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_InitTick+0xa8>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0109      	lsls	r1, r1, #4
 8001408:	430a      	orrs	r2, r1
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_InitTick+0xa8>)
 800140e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800141a:	230c      	movs	r3, #12
 800141c:	18fa      	adds	r2, r7, r3
 800141e:	2310      	movs	r3, #16
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f000 ffd3 	bl	80023d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800142a:	f000 ffbb 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 800142e:	0003      	movs	r3, r0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	4914      	ldr	r1, [pc, #80]	; (8001488 <HAL_InitTick+0xac>)
 8001436:	0018      	movs	r0, r3
 8001438:	f7fe fe64 	bl	8000104 <__udivsi3>
 800143c:	0003      	movs	r3, r0
 800143e:	3b01      	subs	r3, #1
 8001440:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0xb0>)
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_InitTick+0xb4>)
 8001446:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_InitTick+0xb0>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_InitTick+0xb8>)
 800144c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_InitTick+0xb0>)
 8001450:	6a3a      	ldr	r2, [r7, #32]
 8001452:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_InitTick+0xb0>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_InitTick+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_InitTick+0xb0>)
 8001462:	0018      	movs	r0, r3
 8001464:	f000 ffde 	bl	8002424 <HAL_TIM_Base_Init>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d105      	bne.n	8001478 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_InitTick+0xb0>)
 800146e:	0018      	movs	r0, r3
 8001470:	f001 f838 	bl	80024e4 <HAL_TIM_Base_Start_IT>
 8001474:	0003      	movs	r3, r0
 8001476:	e000      	b.n	800147a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b00a      	add	sp, #40	; 0x28
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	40021000 	.word	0x40021000
 8001488:	000f4240 	.word	0x000f4240
 800148c:	200000a8 	.word	0x200000a8
 8001490:	40012c00 	.word	0x40012c00
 8001494:	000003e7 	.word	0x000003e7

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f001 f86c 	bl	80025a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	200000a8 	.word	0x200000a8

080014dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <SystemInit+0x14>)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	0512      	lsls	r2, r2, #20
 80014e6:	609a      	str	r2, [r3, #8]
#endif
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f8:	f7ff fff0 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001522:	f001 fa3b 	bl	800299c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001526:	f7ff fe6f 	bl	8001208 <main>

0800152a <LoopForever>:

LoopForever:
  b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001538:	08002ee8 	.word	0x08002ee8
  ldr r2, =_sbss
 800153c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001540:	200000f8 	.word	0x200000f8

08001544 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_COMP_IRQHandler>
	...

08001548 <arm_gaussian_naive_bayes_predict_f32>:
 * @return The predicted class
 *
 */
uint32_t arm_gaussian_naive_bayes_predict_f32(
		const arm_gaussian_naive_bayes_instance_f32 *S, const float32_t *in,
		float32_t *pBuffer) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b093      	sub	sp, #76	; 0x4c
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	uint32_t nbClass;
	uint32_t nbDim;
	const float32_t *pPrior = S->classPriors;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
	const float32_t *pTheta = S->theta;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
	const float32_t *pSigma = S->sigma;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
	float32_t *buffer = pBuffer;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
	const float32_t *pIn = in;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t sigma;
	float32_t tmp;
	float32_t acc1, acc2;
	uint32_t index;

	pTheta = S->theta;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
	pSigma = S->sigma;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	637b      	str	r3, [r7, #52]	; 0x34

	for (nbClass = 0; nbClass < S->numberOfClasses; nbClass++) {
 800157a:	2300      	movs	r3, #0
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
 800157e:	e080      	b.n	8001682 <arm_gaussian_naive_bayes_predict_f32+0x13a>

		pIn = in;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c

		tmp = 0.0;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
		acc1 = 0.0f;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
		acc2 = 0.0f;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
		for (nbDim = 0; nbDim < S->vectorDimension; nbDim++) {
 8001590:	2300      	movs	r3, #0
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
 8001594:	e047      	b.n	8001626 <arm_gaussian_naive_bayes_predict_f32+0xde>
			sigma = *pSigma + S->epsilon;
 8001596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	1c19      	adds	r1, r3, #0
 80015a0:	1c10      	adds	r0, r2, #0
 80015a2:	f7fe fe75 	bl	8000290 <__aeabi_fadd>
 80015a6:	1c03      	adds	r3, r0, #0
 80015a8:	61fb      	str	r3, [r7, #28]
			acc1 += logf(2.0f * PI_F * sigma);
 80015aa:	4940      	ldr	r1, [pc, #256]	; (80016ac <arm_gaussian_naive_bayes_predict_f32+0x164>)
 80015ac:	69f8      	ldr	r0, [r7, #28]
 80015ae:	f7ff f9e1 	bl	8000974 <__aeabi_fmul>
 80015b2:	1c03      	adds	r3, r0, #0
 80015b4:	1c18      	adds	r0, r3, #0
 80015b6:	f001 fa1d 	bl	80029f4 <logf>
 80015ba:	1c03      	adds	r3, r0, #0
 80015bc:	1c19      	adds	r1, r3, #0
 80015be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015c0:	f7fe fe66 	bl	8000290 <__aeabi_fadd>
 80015c4:	1c03      	adds	r3, r0, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
			acc2 += (*pIn - *pTheta) * (*pIn - *pTheta) / sigma;
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1c19      	adds	r1, r3, #0
 80015d2:	1c10      	adds	r0, r2, #0
 80015d4:	f7ff fb00 	bl	8000bd8 <__aeabi_fsub>
 80015d8:	1c03      	adds	r3, r0, #0
 80015da:	1c1c      	adds	r4, r3, #0
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	1c19      	adds	r1, r3, #0
 80015e6:	1c10      	adds	r0, r2, #0
 80015e8:	f7ff faf6 	bl	8000bd8 <__aeabi_fsub>
 80015ec:	1c03      	adds	r3, r0, #0
 80015ee:	1c19      	adds	r1, r3, #0
 80015f0:	1c20      	adds	r0, r4, #0
 80015f2:	f7ff f9bf 	bl	8000974 <__aeabi_fmul>
 80015f6:	1c03      	adds	r3, r0, #0
 80015f8:	69f9      	ldr	r1, [r7, #28]
 80015fa:	1c18      	adds	r0, r3, #0
 80015fc:	f7fe ffe2 	bl	80005c4 <__aeabi_fdiv>
 8001600:	1c03      	adds	r3, r0, #0
 8001602:	1c19      	adds	r1, r3, #0
 8001604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001606:	f7fe fe43 	bl	8000290 <__aeabi_fadd>
 800160a:	1c03      	adds	r3, r0, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24

			pIn++;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	3304      	adds	r3, #4
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
			pTheta++;
 8001614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001616:	3304      	adds	r3, #4
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
			pSigma++;
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	3304      	adds	r3, #4
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
		for (nbDim = 0; nbDim < S->vectorDimension; nbDim++) {
 8001620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001622:	3301      	adds	r3, #1
 8001624:	643b      	str	r3, [r7, #64]	; 0x40
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800162c:	429a      	cmp	r2, r3
 800162e:	d3b2      	bcc.n	8001596 <arm_gaussian_naive_bayes_predict_f32+0x4e>
		}

		tmp = -0.5f * acc1;
 8001630:	21bf      	movs	r1, #191	; 0xbf
 8001632:	0609      	lsls	r1, r1, #24
 8001634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001636:	f7ff f99d 	bl	8000974 <__aeabi_fmul>
 800163a:	1c03      	adds	r3, r0, #0
 800163c:	623b      	str	r3, [r7, #32]
		tmp -= 0.5f * acc2;
 800163e:	21fc      	movs	r1, #252	; 0xfc
 8001640:	0589      	lsls	r1, r1, #22
 8001642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001644:	f7ff f996 	bl	8000974 <__aeabi_fmul>
 8001648:	1c03      	adds	r3, r0, #0
 800164a:	1c19      	adds	r1, r3, #0
 800164c:	6a38      	ldr	r0, [r7, #32]
 800164e:	f7ff fac3 	bl	8000bd8 <__aeabi_fsub>
 8001652:	1c03      	adds	r3, r0, #0
 8001654:	623b      	str	r3, [r7, #32]

		*buffer = tmp + logf(*pPrior++);
 8001656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001658:	1d1a      	adds	r2, r3, #4
 800165a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1c18      	adds	r0, r3, #0
 8001660:	f001 f9c8 	bl	80029f4 <logf>
 8001664:	1c03      	adds	r3, r0, #0
 8001666:	6a39      	ldr	r1, [r7, #32]
 8001668:	1c18      	adds	r0, r3, #0
 800166a:	f7fe fe11 	bl	8000290 <__aeabi_fadd>
 800166e:	1c03      	adds	r3, r0, #0
 8001670:	1c1a      	adds	r2, r3, #0
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	601a      	str	r2, [r3, #0]
		buffer++;
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	3304      	adds	r3, #4
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
	for (nbClass = 0; nbClass < S->numberOfClasses; nbClass++) {
 800167c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800167e:	3301      	adds	r3, #1
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001688:	429a      	cmp	r2, r3
 800168a:	d200      	bcs.n	800168e <arm_gaussian_naive_bayes_predict_f32+0x146>
 800168c:	e778      	b.n	8001580 <arm_gaussian_naive_bayes_predict_f32+0x38>
	}

	arm_max_f32(pBuffer, S->numberOfClasses, &result, &index);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6859      	ldr	r1, [r3, #4]
 8001692:	2314      	movs	r3, #20
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2218      	movs	r2, #24
 8001698:	18ba      	adds	r2, r7, r2
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f808 	bl	80016b0 <arm_max_f32>

	return (index);
 80016a0:	697b      	ldr	r3, [r7, #20]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b013      	add	sp, #76	; 0x4c
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40c90fdb 	.word	0x40c90fdb

080016b0 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1d1a      	adds	r2, r3, #4
 80016c6:	60fa      	str	r2, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80016d2:	e013      	b.n	80016fc <arm_max_f32+0x4c>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1d1a      	adds	r2, r3, #4
 80016d8:	60fa      	str	r2, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 80016de:	6939      	ldr	r1, [r7, #16]
 80016e0:	69f8      	ldr	r0, [r7, #28]
 80016e2:	f7fe fdad 	bl	8000240 <__aeabi_fcmplt>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d005      	beq.n	80016f6 <arm_max_f32+0x46>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1e8      	bne.n	80016d4 <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b008      	add	sp, #32
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_Init+0x3c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Init+0x3c>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0049      	lsls	r1, r1, #1
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fe52 	bl	80013dc <HAL_InitTick>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d003      	beq.n	8001744 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e001      	b.n	8001748 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001744:	f7ff fe22 	bl	800138c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	781b      	ldrb	r3, [r3, #0]
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40022000 	.word	0x40022000

08001758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x1c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	001a      	movs	r2, r3
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_IncTick+0x20>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	18d2      	adds	r2, r2, r3
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_IncTick+0x20>)
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	20000008 	.word	0x20000008
 8001778:	200000f4 	.word	0x200000f4

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <HAL_GetTick+0x10>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	200000f4 	.word	0x200000f4

08001790 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800179e:	4013      	ands	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40010000 	.word	0x40010000
 80017b8:	fffff9ff 	.word	0xfffff9ff

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b7f      	cmp	r3, #127	; 0x7f
 80017ce:	d809      	bhi.n	80017e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	001a      	movs	r2, r3
 80017d6:	231f      	movs	r3, #31
 80017d8:	401a      	ands	r2, r3
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_EnableIRQ+0x30>)
 80017dc:	2101      	movs	r1, #1
 80017de:	4091      	lsls	r1, r2
 80017e0:	000a      	movs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	0002      	movs	r2, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b7f      	cmp	r3, #127	; 0x7f
 8001804:	d828      	bhi.n	8001858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001806:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <__NVIC_SetPriority+0xd4>)
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	33c0      	adds	r3, #192	; 0xc0
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	589b      	ldr	r3, [r3, r2]
 8001816:	1dfa      	adds	r2, r7, #7
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	0011      	movs	r1, r2
 800181c:	2203      	movs	r2, #3
 800181e:	400a      	ands	r2, r1
 8001820:	00d2      	lsls	r2, r2, #3
 8001822:	21ff      	movs	r1, #255	; 0xff
 8001824:	4091      	lsls	r1, r2
 8001826:	000a      	movs	r2, r1
 8001828:	43d2      	mvns	r2, r2
 800182a:	401a      	ands	r2, r3
 800182c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	22ff      	movs	r2, #255	; 0xff
 8001834:	401a      	ands	r2, r3
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	0018      	movs	r0, r3
 800183c:	2303      	movs	r3, #3
 800183e:	4003      	ands	r3, r0
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001844:	481f      	ldr	r0, [pc, #124]	; (80018c4 <__NVIC_SetPriority+0xd4>)
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b25b      	sxtb	r3, r3
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	430a      	orrs	r2, r1
 8001850:	33c0      	adds	r3, #192	; 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001856:	e031      	b.n	80018bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <__NVIC_SetPriority+0xd8>)
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0019      	movs	r1, r3
 8001860:	230f      	movs	r3, #15
 8001862:	400b      	ands	r3, r1
 8001864:	3b08      	subs	r3, #8
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3306      	adds	r3, #6
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1dfa      	adds	r2, r7, #7
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	0011      	movs	r1, r2
 8001878:	2203      	movs	r2, #3
 800187a:	400a      	ands	r2, r1
 800187c:	00d2      	lsls	r2, r2, #3
 800187e:	21ff      	movs	r1, #255	; 0xff
 8001880:	4091      	lsls	r1, r2
 8001882:	000a      	movs	r2, r1
 8001884:	43d2      	mvns	r2, r2
 8001886:	401a      	ands	r2, r3
 8001888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	22ff      	movs	r2, #255	; 0xff
 8001890:	401a      	ands	r2, r3
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	0018      	movs	r0, r3
 8001898:	2303      	movs	r3, #3
 800189a:	4003      	ands	r3, r0
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <__NVIC_SetPriority+0xd8>)
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	001c      	movs	r4, r3
 80018a8:	230f      	movs	r3, #15
 80018aa:	4023      	ands	r3, r4
 80018ac:	3b08      	subs	r3, #8
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	430a      	orrs	r2, r1
 80018b2:	3306      	adds	r3, #6
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	18c3      	adds	r3, r0, r3
 80018b8:	3304      	adds	r3, #4
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b003      	add	sp, #12
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	210f      	movs	r1, #15
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	1c02      	adds	r2, r0, #0
 80018dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff ff81 	bl	80017f0 <__NVIC_SetPriority>
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	0002      	movs	r2, r0
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff ff57 	bl	80017bc <__NVIC_EnableIRQ>
}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001926:	4013      	ands	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d11f      	bne.n	800197c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	0013      	movs	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	189b      	adds	r3, r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4912      	ldr	r1, [pc, #72]	; (8001994 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800194a:	0018      	movs	r0, r3
 800194c:	f7fe fbda 	bl	8000104 <__udivsi3>
 8001950:	0003      	movs	r3, r0
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001956:	e008      	b.n	800196a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3b01      	subs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e001      	b.n	800196a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e009      	b.n	800197e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	401a      	ands	r2, r3
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	429a      	cmp	r2, r3
 800197a:	d0ed      	beq.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40007000 	.word	0x40007000
 800198c:	fffff9ff 	.word	0xfffff9ff
 8001990:	20000000 	.word	0x20000000
 8001994:	000f4240 	.word	0x000f4240

08001998 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	23e0      	movs	r3, #224	; 0xe0
 80019a2:	01db      	lsls	r3, r3, #7
 80019a4:	4013      	ands	r3, r2
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	f000 fb56 	bl	8002070 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	d100      	bne.n	80019d0 <HAL_RCC_OscConfig+0x20>
 80019ce:	e07d      	b.n	8001acc <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d0:	4bc3      	ldr	r3, [pc, #780]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2238      	movs	r2, #56	; 0x38
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019da:	4bc1      	ldr	r3, [pc, #772]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2203      	movs	r2, #3
 80019e0:	4013      	ands	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d102      	bne.n	80019f0 <HAL_RCC_OscConfig+0x40>
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d002      	beq.n	80019f6 <HAL_RCC_OscConfig+0x46>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	4bba      	ldr	r3, [pc, #744]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	029b      	lsls	r3, r3, #10
 80019fe:	4013      	ands	r3, r2
 8001a00:	d063      	beq.n	8001aca <HAL_RCC_OscConfig+0x11a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d15f      	bne.n	8001aca <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 fb30 	bl	8002070 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	025b      	lsls	r3, r3, #9
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x7c>
 8001a1c:	4bb0      	ldr	r3, [pc, #704]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4baf      	ldr	r3, [pc, #700]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	0249      	lsls	r1, r1, #9
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e020      	b.n	8001a6e <HAL_RCC_OscConfig+0xbe>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	23a0      	movs	r3, #160	; 0xa0
 8001a32:	02db      	lsls	r3, r3, #11
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d10e      	bne.n	8001a56 <HAL_RCC_OscConfig+0xa6>
 8001a38:	4ba9      	ldr	r3, [pc, #676]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4ba8      	ldr	r3, [pc, #672]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	02c9      	lsls	r1, r1, #11
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	4ba6      	ldr	r3, [pc, #664]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4ba5      	ldr	r3, [pc, #660]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	0249      	lsls	r1, r1, #9
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0xbe>
 8001a56:	4ba2      	ldr	r3, [pc, #648]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4ba1      	ldr	r3, [pc, #644]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a5c:	49a1      	ldr	r1, [pc, #644]	; (8001ce4 <HAL_RCC_OscConfig+0x334>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	4b9f      	ldr	r3, [pc, #636]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b9e      	ldr	r3, [pc, #632]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a68:	499f      	ldr	r1, [pc, #636]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d014      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff fe81 	bl	800177c <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fe7c 	bl	800177c <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e2ee      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a92:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	029b      	lsls	r3, r3, #10
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xd0>
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fe6c 	bl	800177c <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fe67 	bl	800177c <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e2d9      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001abc:	4b88      	ldr	r3, [pc, #544]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0xfa>
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d100      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x128>
 8001ad6:	e099      	b.n	8001c0c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad8:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2238      	movs	r2, #56	; 0x38
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d102      	bne.n	8001af8 <HAL_RCC_OscConfig+0x148>
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d002      	beq.n	8001afe <HAL_RCC_OscConfig+0x14e>
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d135      	bne.n	8001b6a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afe:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4013      	ands	r3, r2
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x166>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e2ac      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4a74      	ldr	r2, [pc, #464]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	021a      	lsls	r2, r3, #8
 8001b26:	4b6e      	ldr	r3, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d112      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b32:	4b6b      	ldr	r3, [pc, #428]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x340>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b46:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0adb      	lsrs	r3, r3, #11
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	4013      	ands	r3, r2
 8001b50:	4a68      	ldr	r2, [pc, #416]	; (8001cf4 <HAL_RCC_OscConfig+0x344>)
 8001b52:	40da      	lsrs	r2, r3
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x348>)
 8001b56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x34c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff fc3d 	bl	80013dc <HAL_InitTick>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d051      	beq.n	8001c0a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e282      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d030      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b72:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x340>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b86:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0049      	lsls	r1, r1, #1
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fdf2 	bl	800177c <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fded 	bl	800177c <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e25f      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb0:	4b4b      	ldr	r3, [pc, #300]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	021a      	lsls	r2, r3, #8
 8001bcc:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	e01b      	b.n	8001c0c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001bd4:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bda:	4949      	ldr	r1, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x350>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fdcc 	bl	800177c <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fdc7 	bl	800177c <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e239      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x23a>
 8001c08:	e000      	b.n	8001c0c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	4013      	ands	r3, r2
 8001c14:	d047      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2238      	movs	r2, #56	; 0x38
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b18      	cmp	r3, #24
 8001c20:	d10a      	bne.n	8001c38 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2f6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d138      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e21b      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d019      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fd96 	bl	800177c <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c56:	f7ff fd91 	bl	800177c <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e203      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d0f1      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2a6>
 8001c72:	e018      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fd7c 	bl	800177c <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fd77 	bl	800177c <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1e9      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d1f1      	bne.n	8001c8a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2204      	movs	r2, #4
 8001cac:	4013      	ands	r3, r2
 8001cae:	d100      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x302>
 8001cb0:	e0c6      	b.n	8001e40 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	231f      	movs	r3, #31
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2238      	movs	r2, #56	; 0x38
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d11e      	bne.n	8001d04 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x322>
 8001cd0:	e0b6      	b.n	8001e40 <HAL_RCC_OscConfig+0x490>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d000      	beq.n	8001cdc <HAL_RCC_OscConfig+0x32c>
 8001cda:	e0b1      	b.n	8001e40 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e1c7      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	fffeffff 	.word	0xfffeffff
 8001ce8:	fffbffff 	.word	0xfffbffff
 8001cec:	ffff80ff 	.word	0xffff80ff
 8001cf0:	ffffc7ff 	.word	0xffffc7ff
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d04:	4bb8      	ldr	r3, [pc, #736]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	055b      	lsls	r3, r3, #21
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_OscConfig+0x364>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x366>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d011      	beq.n	8001d3e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4bb3      	ldr	r3, [pc, #716]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1e:	4bb2      	ldr	r3, [pc, #712]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0549      	lsls	r1, r1, #21
 8001d24:	430a      	orrs	r2, r1
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d28:	4baf      	ldr	r3, [pc, #700]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	055b      	lsls	r3, r3, #21
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3e:	4bab      	ldr	r3, [pc, #684]	; (8001fec <HAL_RCC_OscConfig+0x63c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4013      	ands	r3, r2
 8001d48:	d11a      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4a:	4ba8      	ldr	r3, [pc, #672]	; (8001fec <HAL_RCC_OscConfig+0x63c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4ba7      	ldr	r3, [pc, #668]	; (8001fec <HAL_RCC_OscConfig+0x63c>)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	0049      	lsls	r1, r1, #1
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fd10 	bl	800177c <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff fd0b 	bl	800177c <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e17d      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	4b9d      	ldr	r3, [pc, #628]	; (8001fec <HAL_RCC_OscConfig+0x63c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3e6>
 8001d88:	4b97      	ldr	r3, [pc, #604]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001d8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d8c:	4b96      	ldr	r3, [pc, #600]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d94:	e01c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x420>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x408>
 8001d9e:	4b92      	ldr	r3, [pc, #584]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da2:	4b91      	ldr	r3, [pc, #580]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001da4:	2104      	movs	r1, #4
 8001da6:	430a      	orrs	r2, r1
 8001da8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001daa:	4b8f      	ldr	r3, [pc, #572]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dae:	4b8e      	ldr	r3, [pc, #568]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001db0:	2101      	movs	r1, #1
 8001db2:	430a      	orrs	r2, r1
 8001db4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x420>
 8001db8:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001dba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dbc:	4b8a      	ldr	r3, [pc, #552]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dc4:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc8:	4b87      	ldr	r3, [pc, #540]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001dca:	2104      	movs	r1, #4
 8001dcc:	438a      	bics	r2, r1
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d014      	beq.n	8001e02 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fcd0 	bl	800177c <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fccb 	bl	800177c <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a80      	ldr	r2, [pc, #512]	; (8001ff0 <HAL_RCC_OscConfig+0x640>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e13c      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df6:	4b7c      	ldr	r3, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x432>
 8001e00:	e013      	b.n	8001e2a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff fcbb 	bl	800177c <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e0a:	e009      	b.n	8001e20 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fcb6 	bl	800177c <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	4a76      	ldr	r2, [pc, #472]	; (8001ff0 <HAL_RCC_OscConfig+0x640>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e127      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2202      	movs	r2, #2
 8001e26:	4013      	ands	r3, r2
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e2a:	231f      	movs	r3, #31
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e3a:	496e      	ldr	r1, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x644>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2220      	movs	r2, #32
 8001e46:	4013      	ands	r3, r2
 8001e48:	d039      	beq.n	8001ebe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e52:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	03c9      	lsls	r1, r1, #15
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff fc8c 	bl	800177c <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6a:	f7ff fc87 	bl	800177c <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0f9      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x4ba>
 8001e88:	e019      	b.n	8001ebe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e8a:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001e90:	4959      	ldr	r1, [pc, #356]	; (8001ff8 <HAL_RCC_OscConfig+0x648>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff fc71 	bl	800177c <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea0:	f7ff fc6c 	bl	800177c <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0de      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d100      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x518>
 8001ec6:	e0d2      	b.n	800206e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec8:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2238      	movs	r2, #56	; 0x38
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d100      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x526>
 8001ed4:	e081      	b.n	8001fda <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d156      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001ee4:	4945      	ldr	r1, [pc, #276]	; (8001ffc <HAL_RCC_OscConfig+0x64c>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff fc47 	bl	800177c <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7ff fc42 	bl	800177c <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0b4      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	049b      	lsls	r3, r3, #18
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f12:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <HAL_RCC_OscConfig+0x650>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0449      	lsls	r1, r1, #17
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	0549      	lsls	r1, r1, #21
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff fc0b 	bl	800177c <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff fc06 	bl	800177c <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e078      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	049b      	lsls	r3, r3, #18
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x5bc>
 8001f8a:	e070      	b.n	800206e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f92:	491a      	ldr	r1, [pc, #104]	; (8001ffc <HAL_RCC_OscConfig+0x64c>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001f9e:	2103      	movs	r1, #3
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001faa:	4916      	ldr	r1, [pc, #88]	; (8002004 <HAL_RCC_OscConfig+0x654>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fbe4 	bl	800177c <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff fbdf 	bl	800177c <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e051      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_OscConfig+0x638>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	049b      	lsls	r3, r3, #18
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x60a>
 8001fd8:	e049      	b.n	800206e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d112      	bne.n	8002008 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e044      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	00001388 	.word	0x00001388
 8001ff4:	efffffff 	.word	0xefffffff
 8001ff8:	ffbfffff 	.word	0xffbfffff
 8001ffc:	feffffff 	.word	0xfeffffff
 8002000:	11c1808c 	.word	0x11c1808c
 8002004:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x6c8>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2203      	movs	r2, #3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	429a      	cmp	r2, r3
 800201a:	d126      	bne.n	800206a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2270      	movs	r2, #112	; 0x70
 8002020:	401a      	ands	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11f      	bne.n	800206a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	23fe      	movs	r3, #254	; 0xfe
 800202e:	01db      	lsls	r3, r3, #7
 8002030:	401a      	ands	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d116      	bne.n	800206a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	23f8      	movs	r3, #248	; 0xf8
 8002040:	039b      	lsls	r3, r3, #14
 8002042:	401a      	ands	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d10e      	bne.n	800206a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	23e0      	movs	r3, #224	; 0xe0
 8002050:	051b      	lsls	r3, r3, #20
 8002052:	401a      	ands	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	0f5b      	lsrs	r3, r3, #29
 8002060:	075a      	lsls	r2, r3, #29
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b008      	add	sp, #32
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0e9      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2207      	movs	r2, #7
 8002096:	4013      	ands	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d91e      	bls.n	80020dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2207      	movs	r2, #7
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020b0:	f7ff fb64 	bl	800177c <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7ff fb5f 	bl	800177c <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a6a      	ldr	r2, [pc, #424]	; (8002270 <HAL_RCC_ClockConfig+0x1f4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0ca      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2207      	movs	r2, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d015      	beq.n	8002112 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2204      	movs	r2, #4
 80020ec:	4013      	ands	r3, r2
 80020ee:	d006      	beq.n	80020fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020f0:	4b60      	ldr	r3, [pc, #384]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 80020f6:	21e0      	movs	r1, #224	; 0xe0
 80020f8:	01c9      	lsls	r1, r1, #7
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4a5d      	ldr	r2, [pc, #372]	; (8002278 <HAL_RCC_ClockConfig+0x1fc>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d057      	beq.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	029b      	lsls	r3, r3, #10
 800212c:	4013      	ands	r3, r2
 800212e:	d12b      	bne.n	8002188 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e097      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d107      	bne.n	800214c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213c:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	049b      	lsls	r3, r3, #18
 8002144:	4013      	ands	r3, r2
 8002146:	d11f      	bne.n	8002188 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e08b      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002154:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4013      	ands	r3, r2
 800215e:	d113      	bne.n	8002188 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e07f      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d106      	bne.n	800217a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216c:	4b41      	ldr	r3, [pc, #260]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d108      	bne.n	8002188 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e074      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e06d      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2207      	movs	r2, #7
 800218e:	4393      	bics	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4b37      	ldr	r3, [pc, #220]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800219c:	f7ff faee 	bl	800177c <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a4:	e009      	b.n	80021ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a6:	f7ff fae9 	bl	800177c <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <HAL_RCC_ClockConfig+0x1f4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e054      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2238      	movs	r2, #56	; 0x38
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d1ec      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2207      	movs	r2, #7
 80021d2:	4013      	ands	r3, r2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d21e      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2207      	movs	r2, #7
 80021e0:	4393      	bics	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021ec:	f7ff fac6 	bl	800177c <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f4:	e009      	b.n	800220a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f6:	f7ff fac1 	bl	800177c <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_RCC_ClockConfig+0x1f4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e02c      	b.n	8002264 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2207      	movs	r2, #7
 8002210:	4013      	ands	r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2204      	movs	r2, #4
 800221e:	4013      	ands	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_RCC_ClockConfig+0x200>)
 8002228:	4013      	ands	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 8002232:	430a      	orrs	r2, r1
 8002234:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002236:	f000 f829 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800223a:	0001      	movs	r1, r0
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	220f      	movs	r2, #15
 8002244:	401a      	ands	r2, r3
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x204>)
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	58d3      	ldr	r3, [r2, r3]
 800224c:	221f      	movs	r2, #31
 800224e:	4013      	ands	r3, r2
 8002250:	000a      	movs	r2, r1
 8002252:	40da      	lsrs	r2, r3
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x208>)
 8002256:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x20c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff f8bd 	bl	80013dc <HAL_InitTick>
 8002262:	0003      	movs	r3, r0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40022000 	.word	0x40022000
 8002270:	00001388 	.word	0x00001388
 8002274:	40021000 	.word	0x40021000
 8002278:	fffff0ff 	.word	0xfffff0ff
 800227c:	ffff8fff 	.word	0xffff8fff
 8002280:	08002e78 	.word	0x08002e78
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2238      	movs	r2, #56	; 0x38
 8002298:	4013      	ands	r3, r2
 800229a:	d10f      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0adb      	lsrs	r3, r3, #11
 80022a2:	2207      	movs	r2, #7
 80022a4:	4013      	ands	r3, r2
 80022a6:	2201      	movs	r2, #1
 80022a8:	409a      	lsls	r2, r3
 80022aa:	0013      	movs	r3, r2
 80022ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022ae:	6839      	ldr	r1, [r7, #0]
 80022b0:	4835      	ldr	r0, [pc, #212]	; (8002388 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022b2:	f7fd ff27 	bl	8000104 <__udivsi3>
 80022b6:	0003      	movs	r3, r0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e05d      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2238      	movs	r2, #56	; 0x38
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d102      	bne.n	80022ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c8:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_RCC_GetSysClockFreq+0x100>)
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	e054      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2238      	movs	r2, #56	; 0x38
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d138      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2203      	movs	r2, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	2207      	movs	r2, #7
 80022ec:	4013      	ands	r3, r2
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d10d      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	4824      	ldr	r0, [pc, #144]	; (800238c <HAL_RCC_GetSysClockFreq+0x100>)
 80022fc:	f7fd ff02 	bl	8000104 <__udivsi3>
 8002300:	0003      	movs	r3, r0
 8002302:	0019      	movs	r1, r3
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	227f      	movs	r2, #127	; 0x7f
 800230c:	4013      	ands	r3, r2
 800230e:	434b      	muls	r3, r1
 8002310:	617b      	str	r3, [r7, #20]
        break;
 8002312:	e00d      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	481c      	ldr	r0, [pc, #112]	; (8002388 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002318:	f7fd fef4 	bl	8000104 <__udivsi3>
 800231c:	0003      	movs	r3, r0
 800231e:	0019      	movs	r1, r3
 8002320:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	227f      	movs	r2, #127	; 0x7f
 8002328:	4013      	ands	r3, r2
 800232a:	434b      	muls	r3, r1
 800232c:	617b      	str	r3, [r7, #20]
        break;
 800232e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0f5b      	lsrs	r3, r3, #29
 8002336:	2207      	movs	r2, #7
 8002338:	4013      	ands	r3, r2
 800233a:	3301      	adds	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	6978      	ldr	r0, [r7, #20]
 8002342:	f7fd fedf 	bl	8000104 <__udivsi3>
 8002346:	0003      	movs	r3, r0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e015      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2238      	movs	r2, #56	; 0x38
 8002352:	4013      	ands	r3, r2
 8002354:	2b20      	cmp	r3, #32
 8002356:	d103      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2238      	movs	r2, #56	; 0x38
 8002366:	4013      	ands	r3, r2
 8002368:	2b18      	cmp	r3, #24
 800236a:	d103      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800236c:	23fa      	movs	r3, #250	; 0xfa
 800236e:	01db      	lsls	r3, r3, #7
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e001      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002378:	693b      	ldr	r3, [r7, #16]
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b006      	add	sp, #24
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	40021000 	.word	0x40021000
 8002388:	00f42400 	.word	0x00f42400
 800238c:	007a1200 	.word	0x007a1200

08002390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b5b0      	push	{r4, r5, r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023a8:	f7ff fff2 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023ac:	0004      	movs	r4, r0
 80023ae:	f7ff faf3 	bl	8001998 <LL_RCC_GetAPB1Prescaler>
 80023b2:	0003      	movs	r3, r0
 80023b4:	0b1a      	lsrs	r2, r3, #12
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	58d3      	ldr	r3, [r2, r3]
 80023bc:	221f      	movs	r2, #31
 80023be:	4013      	ands	r3, r2
 80023c0:	40dc      	lsrs	r4, r3
 80023c2:	0023      	movs	r3, r4
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	08002eb8 	.word	0x08002eb8

080023d0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCC_GetClockConfig+0x4c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2207      	movs	r2, #7
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_GetClockConfig+0x4c>)
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	23f0      	movs	r3, #240	; 0xf0
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	401a      	ands	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_GetClockConfig+0x4c>)
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	23e0      	movs	r3, #224	; 0xe0
 8002400:	01db      	lsls	r3, r3, #7
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetClockConfig+0x50>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2207      	movs	r2, #7
 800240e:	401a      	ands	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40022000 	.word	0x40022000

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e04a      	b.n	80024cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223d      	movs	r2, #61	; 0x3d
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	223c      	movs	r2, #60	; 0x3c
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f841 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	223d      	movs	r2, #61	; 0x3d
 8002456:	2102      	movs	r1, #2
 8002458:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	0019      	movs	r1, r3
 8002464:	0010      	movs	r0, r2
 8002466:	f000 f9f1 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2248      	movs	r2, #72	; 0x48
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223e      	movs	r2, #62	; 0x3e
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2241      	movs	r2, #65	; 0x41
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2242      	movs	r2, #66	; 0x42
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2243      	movs	r2, #67	; 0x43
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2244      	movs	r2, #68	; 0x44
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2245      	movs	r2, #69	; 0x45
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2246      	movs	r2, #70	; 0x46
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2247      	movs	r2, #71	; 0x47
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	223d      	movs	r2, #61	; 0x3d
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223d      	movs	r2, #61	; 0x3d
 80024f0:	5c9b      	ldrb	r3, [r3, r2]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d001      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e047      	b.n	800258c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	223d      	movs	r2, #61	; 0x3d
 8002500:	2102      	movs	r1, #2
 8002502:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <HAL_TIM_Base_Start_IT+0xb0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d014      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x64>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	05db      	lsls	r3, r3, #23
 8002526:	429a      	cmp	r2, r3
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x64>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_TIM_Base_Start_IT+0xb4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x64>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_TIM_Base_Start_IT+0xb8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x64>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d116      	bne.n	8002576 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d016      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0xa4>
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	429a      	cmp	r2, r3
 8002562:	d011      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002574:	e008      	b.n	8002588 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e000      	b.n	800258a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002588:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b004      	add	sp, #16
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800
 80025a0:	40014000 	.word	0x40014000
 80025a4:	00010007 	.word	0x00010007

080025a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d124      	bne.n	8002608 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2202      	movs	r2, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d11d      	bne.n	8002608 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2203      	movs	r2, #3
 80025d2:	4252      	negs	r2, r2
 80025d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2203      	movs	r2, #3
 80025e4:	4013      	ands	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 f916 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80025f0:	e007      	b.n	8002602 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f909 	bl	800280c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f915 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	2b04      	cmp	r3, #4
 8002614:	d125      	bne.n	8002662 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2204      	movs	r2, #4
 800261e:	4013      	ands	r3, r2
 8002620:	2b04      	cmp	r3, #4
 8002622:	d11e      	bne.n	8002662 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2205      	movs	r2, #5
 800262a:	4252      	negs	r2, r2
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	23c0      	movs	r3, #192	; 0xc0
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4013      	ands	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f8e9 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 800264a:	e007      	b.n	800265c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f8dc 	bl	800280c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f8e8 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2208      	movs	r2, #8
 800266a:	4013      	ands	r3, r2
 800266c:	2b08      	cmp	r3, #8
 800266e:	d124      	bne.n	80026ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2208      	movs	r2, #8
 8002678:	4013      	ands	r3, r2
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11d      	bne.n	80026ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2209      	movs	r2, #9
 8002684:	4252      	negs	r2, r2
 8002686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2203      	movs	r2, #3
 8002696:	4013      	ands	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f8bd 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80026a2:	e007      	b.n	80026b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f8b0 	bl	800280c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f8bc 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2210      	movs	r2, #16
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d125      	bne.n	8002714 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2210      	movs	r2, #16
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d11e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2211      	movs	r2, #17
 80026dc:	4252      	negs	r2, r2
 80026de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2208      	movs	r2, #8
 80026e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	23c0      	movs	r3, #192	; 0xc0
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f890 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80026fc:	e007      	b.n	800270e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f000 f883 	bl	800280c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f88f 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2201      	movs	r2, #1
 800271c:	4013      	ands	r3, r2
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10f      	bne.n	8002742 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	2b01      	cmp	r3, #1
 800272e:	d108      	bne.n	8002742 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2202      	movs	r2, #2
 8002736:	4252      	negs	r2, r2
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7fe fe0f 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	4013      	ands	r3, r2
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d10f      	bne.n	8002770 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	4013      	ands	r3, r2
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d108      	bne.n	8002770 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2281      	movs	r2, #129	; 0x81
 8002764:	4252      	negs	r2, r2
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f900 	bl	8002970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	401a      	ands	r2, r3
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	429a      	cmp	r2, r3
 8002782:	d10e      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	4013      	ands	r3, r2
 800278e:	2b80      	cmp	r3, #128	; 0x80
 8002790:	d107      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_TIM_IRQHandler+0x260>)
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 f8ef 	bl	8002980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d10f      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d108      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2241      	movs	r2, #65	; 0x41
 80027c4:	4252      	negs	r2, r2
 80027c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f836 	bl	800283c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2220      	movs	r2, #32
 80027d8:	4013      	ands	r3, r2
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d10f      	bne.n	80027fe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d108      	bne.n	80027fe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2221      	movs	r2, #33	; 0x21
 80027f2:	4252      	negs	r2, r2
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 f8b1 	bl	8002960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	fffffeff 	.word	0xfffffeff

0800280c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a38      	ldr	r2, [pc, #224]	; (8002940 <TIM_Base_SetConfig+0xf4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00c      	beq.n	800287e <TIM_Base_SetConfig+0x32>
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	05db      	lsls	r3, r3, #23
 800286a:	429a      	cmp	r2, r3
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0x32>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a34      	ldr	r2, [pc, #208]	; (8002944 <TIM_Base_SetConfig+0xf8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x32>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a33      	ldr	r2, [pc, #204]	; (8002948 <TIM_Base_SetConfig+0xfc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2270      	movs	r2, #112	; 0x70
 8002882:	4393      	bics	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <TIM_Base_SetConfig+0xf4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d01c      	beq.n	80028d2 <TIM_Base_SetConfig+0x86>
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	429a      	cmp	r2, r3
 80028a0:	d017      	beq.n	80028d2 <TIM_Base_SetConfig+0x86>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <TIM_Base_SetConfig+0xf8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <TIM_Base_SetConfig+0x86>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a26      	ldr	r2, [pc, #152]	; (8002948 <TIM_Base_SetConfig+0xfc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00f      	beq.n	80028d2 <TIM_Base_SetConfig+0x86>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <TIM_Base_SetConfig+0x100>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0x86>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <TIM_Base_SetConfig+0x104>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0x86>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a23      	ldr	r2, [pc, #140]	; (8002954 <TIM_Base_SetConfig+0x108>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0x86>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a22      	ldr	r2, [pc, #136]	; (8002958 <TIM_Base_SetConfig+0x10c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a21      	ldr	r2, [pc, #132]	; (800295c <TIM_Base_SetConfig+0x110>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	4393      	bics	r3, r2
 80028ea:	001a      	movs	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <TIM_Base_SetConfig+0xf4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0xde>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <TIM_Base_SetConfig+0x104>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0xde>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <TIM_Base_SetConfig+0x108>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0xde>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <TIM_Base_SetConfig+0x10c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d103      	bne.n	8002932 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	615a      	str	r2, [r3, #20]
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40000400 	.word	0x40000400
 8002948:	40000800 	.word	0x40000800
 800294c:	40002000 	.word	0x40002000
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800
 800295c:	fffffcff 	.word	0xfffffcff

08002960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <__errno>:
 8002990:	4b01      	ldr	r3, [pc, #4]	; (8002998 <__errno+0x8>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	4770      	bx	lr
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	2000000c 	.word	0x2000000c

0800299c <__libc_init_array>:
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	2600      	movs	r6, #0
 80029a0:	4d0c      	ldr	r5, [pc, #48]	; (80029d4 <__libc_init_array+0x38>)
 80029a2:	4c0d      	ldr	r4, [pc, #52]	; (80029d8 <__libc_init_array+0x3c>)
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	42a6      	cmp	r6, r4
 80029aa:	d109      	bne.n	80029c0 <__libc_init_array+0x24>
 80029ac:	2600      	movs	r6, #0
 80029ae:	f000 f9d9 	bl	8002d64 <_init>
 80029b2:	4d0a      	ldr	r5, [pc, #40]	; (80029dc <__libc_init_array+0x40>)
 80029b4:	4c0a      	ldr	r4, [pc, #40]	; (80029e0 <__libc_init_array+0x44>)
 80029b6:	1b64      	subs	r4, r4, r5
 80029b8:	10a4      	asrs	r4, r4, #2
 80029ba:	42a6      	cmp	r6, r4
 80029bc:	d105      	bne.n	80029ca <__libc_init_array+0x2e>
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	00b3      	lsls	r3, r6, #2
 80029c2:	58eb      	ldr	r3, [r5, r3]
 80029c4:	4798      	blx	r3
 80029c6:	3601      	adds	r6, #1
 80029c8:	e7ee      	b.n	80029a8 <__libc_init_array+0xc>
 80029ca:	00b3      	lsls	r3, r6, #2
 80029cc:	58eb      	ldr	r3, [r5, r3]
 80029ce:	4798      	blx	r3
 80029d0:	3601      	adds	r6, #1
 80029d2:	e7f2      	b.n	80029ba <__libc_init_array+0x1e>
 80029d4:	08002ee0 	.word	0x08002ee0
 80029d8:	08002ee0 	.word	0x08002ee0
 80029dc:	08002ee0 	.word	0x08002ee0
 80029e0:	08002ee4 	.word	0x08002ee4

080029e4 <memset>:
 80029e4:	0003      	movs	r3, r0
 80029e6:	1812      	adds	r2, r2, r0
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d100      	bne.n	80029ee <memset+0xa>
 80029ec:	4770      	bx	lr
 80029ee:	7019      	strb	r1, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	e7f9      	b.n	80029e8 <memset+0x4>

080029f4 <logf>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2500      	movs	r5, #0
 80029f8:	b08c      	sub	sp, #48	; 0x30
 80029fa:	1c04      	adds	r4, r0, #0
 80029fc:	f000 f872 	bl	8002ae4 <__ieee754_logf>
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <logf+0xdc>)
 8002a02:	1c06      	adds	r6, r0, #0
 8002a04:	575d      	ldrsb	r5, [r3, r5]
 8002a06:	1c6b      	adds	r3, r5, #1
 8002a08:	d05e      	beq.n	8002ac8 <logf+0xd4>
 8002a0a:	1c21      	adds	r1, r4, #0
 8002a0c:	1c20      	adds	r0, r4, #0
 8002a0e:	f7fe faa7 	bl	8000f60 <__aeabi_fcmpun>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d158      	bne.n	8002ac8 <logf+0xd4>
 8002a16:	2100      	movs	r1, #0
 8002a18:	1c20      	adds	r0, r4, #0
 8002a1a:	f7fd fc25 	bl	8000268 <__aeabi_fcmpgt>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d152      	bne.n	8002ac8 <logf+0xd4>
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <logf+0xe0>)
 8002a24:	900a      	str	r0, [sp, #40]	; 0x28
 8002a26:	1c20      	adds	r0, r4, #0
 8002a28:	9303      	str	r3, [sp, #12]
 8002a2a:	f7fe faf9 	bl	8001020 <__aeabi_f2d>
 8002a2e:	9006      	str	r0, [sp, #24]
 8002a30:	9107      	str	r1, [sp, #28]
 8002a32:	9004      	str	r0, [sp, #16]
 8002a34:	9105      	str	r1, [sp, #20]
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	d113      	bne.n	8002a62 <logf+0x6e>
 8002a3a:	22e0      	movs	r2, #224	; 0xe0
 8002a3c:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <logf+0xe4>)
 8002a3e:	0612      	lsls	r2, r2, #24
 8002a40:	2100      	movs	r1, #0
 8002a42:	1c20      	adds	r0, r4, #0
 8002a44:	9208      	str	r2, [sp, #32]
 8002a46:	9309      	str	r3, [sp, #36]	; 0x24
 8002a48:	f7fd fbf4 	bl	8000234 <__aeabi_fcmpeq>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d126      	bne.n	8002a9e <logf+0xaa>
 8002a50:	2301      	movs	r3, #1
 8002a52:	9302      	str	r3, [sp, #8]
 8002a54:	2d02      	cmp	r5, #2
 8002a56:	d117      	bne.n	8002a88 <logf+0x94>
 8002a58:	f7ff ff9a 	bl	8002990 <__errno>
 8002a5c:	2321      	movs	r3, #33	; 0x21
 8002a5e:	6003      	str	r3, [r0, #0]
 8002a60:	e017      	b.n	8002a92 <logf+0x9e>
 8002a62:	2200      	movs	r2, #0
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <logf+0xe8>)
 8002a66:	2100      	movs	r1, #0
 8002a68:	1c20      	adds	r0, r4, #0
 8002a6a:	9208      	str	r2, [sp, #32]
 8002a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a6e:	f7fd fbe1 	bl	8000234 <__aeabi_fcmpeq>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d0ec      	beq.n	8002a50 <logf+0x5c>
 8002a76:	2302      	movs	r3, #2
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	429d      	cmp	r5, r3
 8002a7c:	d111      	bne.n	8002aa2 <logf+0xae>
 8002a7e:	f7ff ff87 	bl	8002990 <__errno>
 8002a82:	2322      	movs	r3, #34	; 0x22
 8002a84:	6003      	str	r3, [r0, #0]
 8002a86:	e011      	b.n	8002aac <logf+0xb8>
 8002a88:	a802      	add	r0, sp, #8
 8002a8a:	f000 f963 	bl	8002d54 <matherr>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d0e2      	beq.n	8002a58 <logf+0x64>
 8002a92:	4813      	ldr	r0, [pc, #76]	; (8002ae0 <logf+0xec>)
 8002a94:	f000 f960 	bl	8002d58 <nan>
 8002a98:	9008      	str	r0, [sp, #32]
 8002a9a:	9109      	str	r1, [sp, #36]	; 0x24
 8002a9c:	e006      	b.n	8002aac <logf+0xb8>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	9302      	str	r3, [sp, #8]
 8002aa2:	a802      	add	r0, sp, #8
 8002aa4:	f000 f956 	bl	8002d54 <matherr>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d0e8      	beq.n	8002a7e <logf+0x8a>
 8002aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <logf+0xca>
 8002ab4:	f7ff ff6c 	bl	8002990 <__errno>
 8002ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	6003      	str	r3, [r0, #0]
 8002abe:	9808      	ldr	r0, [sp, #32]
 8002ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ac2:	f7fe faff 	bl	80010c4 <__aeabi_d2f>
 8002ac6:	1c06      	adds	r6, r0, #0
 8002ac8:	1c30      	adds	r0, r6, #0
 8002aca:	b00c      	add	sp, #48	; 0x30
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000070 	.word	0x20000070
 8002ad4:	08002ed8 	.word	0x08002ed8
 8002ad8:	c7efffff 	.word	0xc7efffff
 8002adc:	fff00000 	.word	0xfff00000
 8002ae0:	08002edc 	.word	0x08002edc

08002ae4 <__ieee754_logf>:
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	b085      	sub	sp, #20
 8002aea:	0042      	lsls	r2, r0, #1
 8002aec:	d106      	bne.n	8002afc <__ieee754_logf+0x18>
 8002aee:	20cc      	movs	r0, #204	; 0xcc
 8002af0:	2100      	movs	r1, #0
 8002af2:	0600      	lsls	r0, r0, #24
 8002af4:	f7fd fd66 	bl	80005c4 <__aeabi_fdiv>
 8002af8:	b005      	add	sp, #20
 8002afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afc:	2800      	cmp	r0, #0
 8002afe:	da04      	bge.n	8002b0a <__ieee754_logf+0x26>
 8002b00:	1c01      	adds	r1, r0, #0
 8002b02:	f7fe f869 	bl	8000bd8 <__aeabi_fsub>
 8002b06:	2100      	movs	r1, #0
 8002b08:	e7f4      	b.n	8002af4 <__ieee754_logf+0x10>
 8002b0a:	4a83      	ldr	r2, [pc, #524]	; (8002d18 <__ieee754_logf+0x234>)
 8002b0c:	1c01      	adds	r1, r0, #0
 8002b0e:	4290      	cmp	r0, r2
 8002b10:	dc3d      	bgt.n	8002b8e <__ieee754_logf+0xaa>
 8002b12:	4982      	ldr	r1, [pc, #520]	; (8002d1c <__ieee754_logf+0x238>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	4288      	cmp	r0, r1
 8002b18:	dc06      	bgt.n	8002b28 <__ieee754_logf+0x44>
 8002b1a:	2198      	movs	r1, #152	; 0x98
 8002b1c:	05c9      	lsls	r1, r1, #23
 8002b1e:	f7fd ff29 	bl	8000974 <__aeabi_fmul>
 8002b22:	2219      	movs	r2, #25
 8002b24:	0003      	movs	r3, r0
 8002b26:	4252      	negs	r2, r2
 8002b28:	15dd      	asrs	r5, r3, #23
 8002b2a:	3d7f      	subs	r5, #127	; 0x7f
 8002b2c:	18ad      	adds	r5, r5, r2
 8002b2e:	025b      	lsls	r3, r3, #9
 8002b30:	4a7b      	ldr	r2, [pc, #492]	; (8002d20 <__ieee754_logf+0x23c>)
 8002b32:	0a5b      	lsrs	r3, r3, #9
 8002b34:	1898      	adds	r0, r3, r2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	4003      	ands	r3, r0
 8002b3e:	20fe      	movs	r0, #254	; 0xfe
 8002b40:	21fe      	movs	r1, #254	; 0xfe
 8002b42:	0580      	lsls	r0, r0, #22
 8002b44:	15da      	asrs	r2, r3, #23
 8002b46:	4058      	eors	r0, r3
 8002b48:	9b00      	ldr	r3, [sp, #0]
 8002b4a:	0589      	lsls	r1, r1, #22
 8002b4c:	4318      	orrs	r0, r3
 8002b4e:	1955      	adds	r5, r2, r5
 8002b50:	f7fe f842 	bl	8000bd8 <__aeabi_fsub>
 8002b54:	9b00      	ldr	r3, [sp, #0]
 8002b56:	1c04      	adds	r4, r0, #0
 8002b58:	330f      	adds	r3, #15
 8002b5a:	025b      	lsls	r3, r3, #9
 8002b5c:	0a5b      	lsrs	r3, r3, #9
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	dc47      	bgt.n	8002bf2 <__ieee754_logf+0x10e>
 8002b62:	2100      	movs	r1, #0
 8002b64:	f7fd fb66 	bl	8000234 <__aeabi_fcmpeq>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d013      	beq.n	8002b94 <__ieee754_logf+0xb0>
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	d0c2      	beq.n	8002af8 <__ieee754_logf+0x14>
 8002b72:	0028      	movs	r0, r5
 8002b74:	f7fe fa0a 	bl	8000f8c <__aeabi_i2f>
 8002b78:	496a      	ldr	r1, [pc, #424]	; (8002d24 <__ieee754_logf+0x240>)
 8002b7a:	1c04      	adds	r4, r0, #0
 8002b7c:	f7fd fefa 	bl	8000974 <__aeabi_fmul>
 8002b80:	4969      	ldr	r1, [pc, #420]	; (8002d28 <__ieee754_logf+0x244>)
 8002b82:	1c05      	adds	r5, r0, #0
 8002b84:	1c20      	adds	r0, r4, #0
 8002b86:	f7fd fef5 	bl	8000974 <__aeabi_fmul>
 8002b8a:	1c01      	adds	r1, r0, #0
 8002b8c:	1c28      	adds	r0, r5, #0
 8002b8e:	f7fd fb7f 	bl	8000290 <__aeabi_fadd>
 8002b92:	e7b1      	b.n	8002af8 <__ieee754_logf+0x14>
 8002b94:	4965      	ldr	r1, [pc, #404]	; (8002d2c <__ieee754_logf+0x248>)
 8002b96:	1c20      	adds	r0, r4, #0
 8002b98:	f7fd feec 	bl	8000974 <__aeabi_fmul>
 8002b9c:	1c01      	adds	r1, r0, #0
 8002b9e:	20fc      	movs	r0, #252	; 0xfc
 8002ba0:	0580      	lsls	r0, r0, #22
 8002ba2:	f7fe f819 	bl	8000bd8 <__aeabi_fsub>
 8002ba6:	1c21      	adds	r1, r4, #0
 8002ba8:	1c06      	adds	r6, r0, #0
 8002baa:	1c20      	adds	r0, r4, #0
 8002bac:	f7fd fee2 	bl	8000974 <__aeabi_fmul>
 8002bb0:	1c01      	adds	r1, r0, #0
 8002bb2:	1c30      	adds	r0, r6, #0
 8002bb4:	f7fd fede 	bl	8000974 <__aeabi_fmul>
 8002bb8:	1c06      	adds	r6, r0, #0
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	d101      	bne.n	8002bc2 <__ieee754_logf+0xde>
 8002bbe:	1c31      	adds	r1, r6, #0
 8002bc0:	e07c      	b.n	8002cbc <__ieee754_logf+0x1d8>
 8002bc2:	0028      	movs	r0, r5
 8002bc4:	f7fe f9e2 	bl	8000f8c <__aeabi_i2f>
 8002bc8:	4956      	ldr	r1, [pc, #344]	; (8002d24 <__ieee754_logf+0x240>)
 8002bca:	1c05      	adds	r5, r0, #0
 8002bcc:	f7fd fed2 	bl	8000974 <__aeabi_fmul>
 8002bd0:	4955      	ldr	r1, [pc, #340]	; (8002d28 <__ieee754_logf+0x244>)
 8002bd2:	1c07      	adds	r7, r0, #0
 8002bd4:	1c28      	adds	r0, r5, #0
 8002bd6:	f7fd fecd 	bl	8000974 <__aeabi_fmul>
 8002bda:	1c01      	adds	r1, r0, #0
 8002bdc:	1c30      	adds	r0, r6, #0
 8002bde:	f7fd fffb 	bl	8000bd8 <__aeabi_fsub>
 8002be2:	1c21      	adds	r1, r4, #0
 8002be4:	f7fd fff8 	bl	8000bd8 <__aeabi_fsub>
 8002be8:	1c01      	adds	r1, r0, #0
 8002bea:	1c38      	adds	r0, r7, #0
 8002bec:	f7fd fff4 	bl	8000bd8 <__aeabi_fsub>
 8002bf0:	e782      	b.n	8002af8 <__ieee754_logf+0x14>
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	05c9      	lsls	r1, r1, #23
 8002bf6:	f7fd fb4b 	bl	8000290 <__aeabi_fadd>
 8002bfa:	1c01      	adds	r1, r0, #0
 8002bfc:	1c20      	adds	r0, r4, #0
 8002bfe:	f7fd fce1 	bl	80005c4 <__aeabi_fdiv>
 8002c02:	9001      	str	r0, [sp, #4]
 8002c04:	0028      	movs	r0, r5
 8002c06:	f7fe f9c1 	bl	8000f8c <__aeabi_i2f>
 8002c0a:	9901      	ldr	r1, [sp, #4]
 8002c0c:	9002      	str	r0, [sp, #8]
 8002c0e:	1c08      	adds	r0, r1, #0
 8002c10:	f7fd feb0 	bl	8000974 <__aeabi_fmul>
 8002c14:	4a46      	ldr	r2, [pc, #280]	; (8002d30 <__ieee754_logf+0x24c>)
 8002c16:	9b00      	ldr	r3, [sp, #0]
 8002c18:	4694      	mov	ip, r2
 8002c1a:	1c01      	adds	r1, r0, #0
 8002c1c:	4463      	add	r3, ip
 8002c1e:	9303      	str	r3, [sp, #12]
 8002c20:	1c07      	adds	r7, r0, #0
 8002c22:	f7fd fea7 	bl	8000974 <__aeabi_fmul>
 8002c26:	4943      	ldr	r1, [pc, #268]	; (8002d34 <__ieee754_logf+0x250>)
 8002c28:	1c06      	adds	r6, r0, #0
 8002c2a:	f7fd fea3 	bl	8000974 <__aeabi_fmul>
 8002c2e:	4942      	ldr	r1, [pc, #264]	; (8002d38 <__ieee754_logf+0x254>)
 8002c30:	f7fd fb2e 	bl	8000290 <__aeabi_fadd>
 8002c34:	1c31      	adds	r1, r6, #0
 8002c36:	f7fd fe9d 	bl	8000974 <__aeabi_fmul>
 8002c3a:	4940      	ldr	r1, [pc, #256]	; (8002d3c <__ieee754_logf+0x258>)
 8002c3c:	f7fd fb28 	bl	8000290 <__aeabi_fadd>
 8002c40:	1c31      	adds	r1, r6, #0
 8002c42:	f7fd fe97 	bl	8000974 <__aeabi_fmul>
 8002c46:	493e      	ldr	r1, [pc, #248]	; (8002d40 <__ieee754_logf+0x25c>)
 8002c48:	f7fd fb22 	bl	8000290 <__aeabi_fadd>
 8002c4c:	1c39      	adds	r1, r7, #0
 8002c4e:	f7fd fe91 	bl	8000974 <__aeabi_fmul>
 8002c52:	493c      	ldr	r1, [pc, #240]	; (8002d44 <__ieee754_logf+0x260>)
 8002c54:	1c07      	adds	r7, r0, #0
 8002c56:	1c30      	adds	r0, r6, #0
 8002c58:	f7fd fe8c 	bl	8000974 <__aeabi_fmul>
 8002c5c:	493a      	ldr	r1, [pc, #232]	; (8002d48 <__ieee754_logf+0x264>)
 8002c5e:	f7fd fb17 	bl	8000290 <__aeabi_fadd>
 8002c62:	1c31      	adds	r1, r6, #0
 8002c64:	f7fd fe86 	bl	8000974 <__aeabi_fmul>
 8002c68:	4938      	ldr	r1, [pc, #224]	; (8002d4c <__ieee754_logf+0x268>)
 8002c6a:	f7fd fb11 	bl	8000290 <__aeabi_fadd>
 8002c6e:	1c31      	adds	r1, r6, #0
 8002c70:	f7fd fe80 	bl	8000974 <__aeabi_fmul>
 8002c74:	1c01      	adds	r1, r0, #0
 8002c76:	1c38      	adds	r0, r7, #0
 8002c78:	f7fd fb0a 	bl	8000290 <__aeabi_fadd>
 8002c7c:	9b00      	ldr	r3, [sp, #0]
 8002c7e:	1c07      	adds	r7, r0, #0
 8002c80:	4833      	ldr	r0, [pc, #204]	; (8002d50 <__ieee754_logf+0x26c>)
 8002c82:	1ac0      	subs	r0, r0, r3
 8002c84:	9b03      	ldr	r3, [sp, #12]
 8002c86:	4318      	orrs	r0, r3
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	dd2f      	ble.n	8002cec <__ieee754_logf+0x208>
 8002c8c:	21fc      	movs	r1, #252	; 0xfc
 8002c8e:	1c20      	adds	r0, r4, #0
 8002c90:	0589      	lsls	r1, r1, #22
 8002c92:	f7fd fe6f 	bl	8000974 <__aeabi_fmul>
 8002c96:	1c21      	adds	r1, r4, #0
 8002c98:	f7fd fe6c 	bl	8000974 <__aeabi_fmul>
 8002c9c:	1c01      	adds	r1, r0, #0
 8002c9e:	1c06      	adds	r6, r0, #0
 8002ca0:	1c38      	adds	r0, r7, #0
 8002ca2:	f7fd faf5 	bl	8000290 <__aeabi_fadd>
 8002ca6:	9901      	ldr	r1, [sp, #4]
 8002ca8:	f7fd fe64 	bl	8000974 <__aeabi_fmul>
 8002cac:	1c07      	adds	r7, r0, #0
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	d106      	bne.n	8002cc0 <__ieee754_logf+0x1dc>
 8002cb2:	1c01      	adds	r1, r0, #0
 8002cb4:	1c30      	adds	r0, r6, #0
 8002cb6:	f7fd ff8f 	bl	8000bd8 <__aeabi_fsub>
 8002cba:	1c01      	adds	r1, r0, #0
 8002cbc:	1c20      	adds	r0, r4, #0
 8002cbe:	e795      	b.n	8002bec <__ieee754_logf+0x108>
 8002cc0:	4918      	ldr	r1, [pc, #96]	; (8002d24 <__ieee754_logf+0x240>)
 8002cc2:	9802      	ldr	r0, [sp, #8]
 8002cc4:	f7fd fe56 	bl	8000974 <__aeabi_fmul>
 8002cc8:	4917      	ldr	r1, [pc, #92]	; (8002d28 <__ieee754_logf+0x244>)
 8002cca:	1c05      	adds	r5, r0, #0
 8002ccc:	9802      	ldr	r0, [sp, #8]
 8002cce:	f7fd fe51 	bl	8000974 <__aeabi_fmul>
 8002cd2:	1c39      	adds	r1, r7, #0
 8002cd4:	f7fd fadc 	bl	8000290 <__aeabi_fadd>
 8002cd8:	1c01      	adds	r1, r0, #0
 8002cda:	1c30      	adds	r0, r6, #0
 8002cdc:	f7fd ff7c 	bl	8000bd8 <__aeabi_fsub>
 8002ce0:	1c21      	adds	r1, r4, #0
 8002ce2:	f7fd ff79 	bl	8000bd8 <__aeabi_fsub>
 8002ce6:	1c01      	adds	r1, r0, #0
 8002ce8:	1c28      	adds	r0, r5, #0
 8002cea:	e77f      	b.n	8002bec <__ieee754_logf+0x108>
 8002cec:	1c39      	adds	r1, r7, #0
 8002cee:	1c20      	adds	r0, r4, #0
 8002cf0:	f7fd ff72 	bl	8000bd8 <__aeabi_fsub>
 8002cf4:	9901      	ldr	r1, [sp, #4]
 8002cf6:	f7fd fe3d 	bl	8000974 <__aeabi_fmul>
 8002cfa:	1c06      	adds	r6, r0, #0
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	d100      	bne.n	8002d02 <__ieee754_logf+0x21e>
 8002d00:	e75d      	b.n	8002bbe <__ieee754_logf+0xda>
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <__ieee754_logf+0x240>)
 8002d04:	9802      	ldr	r0, [sp, #8]
 8002d06:	f7fd fe35 	bl	8000974 <__aeabi_fmul>
 8002d0a:	4907      	ldr	r1, [pc, #28]	; (8002d28 <__ieee754_logf+0x244>)
 8002d0c:	1c05      	adds	r5, r0, #0
 8002d0e:	9802      	ldr	r0, [sp, #8]
 8002d10:	f7fd fe30 	bl	8000974 <__aeabi_fmul>
 8002d14:	e7e0      	b.n	8002cd8 <__ieee754_logf+0x1f4>
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	7f7fffff 	.word	0x7f7fffff
 8002d1c:	007fffff 	.word	0x007fffff
 8002d20:	004afb20 	.word	0x004afb20
 8002d24:	3f317180 	.word	0x3f317180
 8002d28:	3717f7d1 	.word	0x3717f7d1
 8002d2c:	3eaaaaab 	.word	0x3eaaaaab
 8002d30:	ffcf5c30 	.word	0xffcf5c30
 8002d34:	3e178897 	.word	0x3e178897
 8002d38:	3e3a3325 	.word	0x3e3a3325
 8002d3c:	3e924925 	.word	0x3e924925
 8002d40:	3f2aaaab 	.word	0x3f2aaaab
 8002d44:	3e1cd04f 	.word	0x3e1cd04f
 8002d48:	3e638e29 	.word	0x3e638e29
 8002d4c:	3ecccccd 	.word	0x3ecccccd
 8002d50:	0035c288 	.word	0x0035c288

08002d54 <matherr>:
 8002d54:	2000      	movs	r0, #0
 8002d56:	4770      	bx	lr

08002d58 <nan>:
 8002d58:	2000      	movs	r0, #0
 8002d5a:	4901      	ldr	r1, [pc, #4]	; (8002d60 <nan+0x8>)
 8002d5c:	4770      	bx	lr
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	7ff80000 	.word	0x7ff80000

08002d64 <_init>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr

08002d70 <_fini>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr
